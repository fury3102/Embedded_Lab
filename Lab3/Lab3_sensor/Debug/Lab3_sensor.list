
Lab3_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000401c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004230  08004230  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004230  08004230  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004230  08004230  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000074  080042ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080042ac  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de22  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002142  00000000  00000000  0002df02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00030048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa8  00000000  00000000  00030df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b94  00000000  00000000  000318a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edef  00000000  00000000  0004a434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e8c9  00000000  00000000  00059223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042c4  00000000  00000000  000e7aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ebdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004110 	.word	0x08004110

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004110 	.word	0x08004110

0800014c <calc_SAE_J1850>:
uint8_t TxBuffer[] = {0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
uint32_t CANTxMailboxes = CAN_TX_MAILBOX0;
CAN_TxHeaderTypeDef TxHeader;

int calc_SAE_J1850(uint8_t data[], int crc_len)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	int crc, temp1, temp2, idx, idy;
	crc 	= 0;
 8000156:	2300      	movs	r3, #0
 8000158:	61fb      	str	r3, [r7, #28]
	temp1 	= 0;
 800015a:	2300      	movs	r3, #0
 800015c:	61bb      	str	r3, [r7, #24]
	temp2 	= 0;
 800015e:	2300      	movs	r3, #0
 8000160:	60fb      	str	r3, [r7, #12]
	idx 	= 0;
 8000162:	2300      	movs	r3, #0
 8000164:	617b      	str	r3, [r7, #20]
	idy 	= 0;
 8000166:	2300      	movs	r3, #0
 8000168:	613b      	str	r3, [r7, #16]
	for ( idx = 0; idx < crc_len; idx ++)
 800016a:	2300      	movs	r3, #0
 800016c:	617b      	str	r3, [r7, #20]
 800016e:	e02b      	b.n	80001c8 <calc_SAE_J1850+0x7c>
	{
		if (idx == 0)
 8000170:	697b      	ldr	r3, [r7, #20]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d102      	bne.n	800017c <calc_SAE_J1850+0x30>
		{
			temp1 = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	61bb      	str	r3, [r7, #24]
 800017a:	e007      	b.n	800018c <calc_SAE_J1850+0x40>
		}
		else
		{
			temp1 = data[crc_len - idx];
 800017c:	683a      	ldr	r2, [r7, #0]
 800017e:	697b      	ldr	r3, [r7, #20]
 8000180:	1ad3      	subs	r3, r2, r3
 8000182:	461a      	mov	r2, r3
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	4413      	add	r3, r2
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	61bb      	str	r3, [r7, #24]
		}
		crc = crc ^ temp1;
 800018c:	69fa      	ldr	r2, [r7, #28]
 800018e:	69bb      	ldr	r3, [r7, #24]
 8000190:	4053      	eors	r3, r2
 8000192:	61fb      	str	r3, [r7, #28]
		for (idy = 8; idy > 0;idy --)
 8000194:	2308      	movs	r3, #8
 8000196:	613b      	str	r3, [r7, #16]
 8000198:	e010      	b.n	80001bc <calc_SAE_J1850+0x70>
		{
			temp2 = crc;
 800019a:	69fb      	ldr	r3, [r7, #28]
 800019c:	60fb      	str	r3, [r7, #12]
			crc = crc << 1;
 800019e:	69fb      	ldr	r3, [r7, #28]
 80001a0:	005b      	lsls	r3, r3, #1
 80001a2:	61fb      	str	r3, [r7, #28]
			if (0 != (temp2 & 128))
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d003      	beq.n	80001b6 <calc_SAE_J1850+0x6a>
			{
				crc = crc ^ 0x1d;
 80001ae:	69fb      	ldr	r3, [r7, #28]
 80001b0:	f083 031d 	eor.w	r3, r3, #29
 80001b4:	61fb      	str	r3, [r7, #28]
		for (idy = 8; idy > 0;idy --)
 80001b6:	693b      	ldr	r3, [r7, #16]
 80001b8:	3b01      	subs	r3, #1
 80001ba:	613b      	str	r3, [r7, #16]
 80001bc:	693b      	ldr	r3, [r7, #16]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	dceb      	bgt.n	800019a <calc_SAE_J1850+0x4e>
	for ( idx = 0; idx < crc_len; idx ++)
 80001c2:	697b      	ldr	r3, [r7, #20]
 80001c4:	3301      	adds	r3, #1
 80001c6:	617b      	str	r3, [r7, #20]
 80001c8:	697a      	ldr	r2, [r7, #20]
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	dbcf      	blt.n	8000170 <calc_SAE_J1850+0x24>
			}
		}
	}
	return crc;
 80001d0:	69fb      	ldr	r3, [r7, #28]
}
 80001d2:	4618      	mov	r0, r3
 80001d4:	3724      	adds	r7, #36	; 0x24
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <calc_Message>:

void calc_Message()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	TxHeader.StdId 	= CAN_TX_ID;
 80001e0:	4b1c      	ldr	r3, [pc, #112]	; (8000254 <calc_Message+0x78>)
 80001e2:	22a2      	movs	r2, #162	; 0xa2
 80001e4:	601a      	str	r2, [r3, #0]
	TxHeader.IDE 	= CAN_ID_STD;
 80001e6:	4b1b      	ldr	r3, [pc, #108]	; (8000254 <calc_Message+0x78>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	609a      	str	r2, [r3, #8]
	TxHeader.RTR 	= CAN_RTR_DATA;
 80001ec:	4b19      	ldr	r3, [pc, #100]	; (8000254 <calc_Message+0x78>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	60da      	str	r2, [r3, #12]
	TxHeader.DLC 	= CAN_DATA_LENGTH;
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <calc_Message+0x78>)
 80001f4:	2208      	movs	r2, #8
 80001f6:	611a      	str	r2, [r3, #16]

	TxBuffer[0] 		= rand() % 16;
 80001f8:	f002 ff9c 	bl	8003134 <rand>
 80001fc:	4603      	mov	r3, r0
 80001fe:	425a      	negs	r2, r3
 8000200:	f003 030f 	and.w	r3, r3, #15
 8000204:	f002 020f 	and.w	r2, r2, #15
 8000208:	bf58      	it	pl
 800020a:	4253      	negpl	r3, r2
 800020c:	b2da      	uxtb	r2, r3
 800020e:	4b12      	ldr	r3, [pc, #72]	; (8000258 <calc_Message+0x7c>)
 8000210:	701a      	strb	r2, [r3, #0]
	TxBuffer[1] 		= rand() % 16;
 8000212:	f002 ff8f 	bl	8003134 <rand>
 8000216:	4603      	mov	r3, r0
 8000218:	425a      	negs	r2, r3
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	f002 020f 	and.w	r2, r2, #15
 8000222:	bf58      	it	pl
 8000224:	4253      	negpl	r3, r2
 8000226:	b2da      	uxtb	r2, r3
 8000228:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <calc_Message+0x7c>)
 800022a:	705a      	strb	r2, [r3, #1]
	TxBuffer[6] 		= (TxBuffer[6] + 1)%15;
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <calc_Message+0x7c>)
 800022e:	799b      	ldrb	r3, [r3, #6]
 8000230:	1c5a      	adds	r2, r3, #1
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <calc_Message+0x80>)
 8000234:	fb83 1302 	smull	r1, r3, r3, r2
 8000238:	4413      	add	r3, r2
 800023a:	10d9      	asrs	r1, r3, #3
 800023c:	17d3      	asrs	r3, r2, #31
 800023e:	1ac9      	subs	r1, r1, r3
 8000240:	460b      	mov	r3, r1
 8000242:	011b      	lsls	r3, r3, #4
 8000244:	1a5b      	subs	r3, r3, r1
 8000246:	1ad1      	subs	r1, r2, r3
 8000248:	b2ca      	uxtb	r2, r1
 800024a:	4b03      	ldr	r3, [pc, #12]	; (8000258 <calc_Message+0x7c>)
 800024c:	719a      	strb	r2, [r3, #6]
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	200000b8 	.word	0x200000b8
 8000258:	20000000 	.word	0x20000000
 800025c:	88888889 	.word	0x88888889

08000260 <CAN_Transmit>:

void CAN_Transmit(CAN_HandleTypeDef *hcan)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxBuffer, &CANTxMailboxes) == HAL_OK)
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <CAN_Transmit+0x2c>)
 800026a:	4a09      	ldr	r2, [pc, #36]	; (8000290 <CAN_Transmit+0x30>)
 800026c:	4909      	ldr	r1, [pc, #36]	; (8000294 <CAN_Transmit+0x34>)
 800026e:	6878      	ldr	r0, [r7, #4]
 8000270:	f000 ff78 	bl	8001164 <HAL_CAN_AddTxMessage>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d104      	bne.n	8000284 <CAN_Transmit+0x24>
	{
		HAL_GPIO_TogglePin(GPIOB, LEDB_Pin);
 800027a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027e:	4806      	ldr	r0, [pc, #24]	; (8000298 <CAN_Transmit+0x38>)
 8000280:	f001 fe52 	bl	8001f28 <HAL_GPIO_TogglePin>
	}
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000008 	.word	0x20000008
 8000290:	20000000 	.word	0x20000000
 8000294:	200000b8 	.word	0x200000b8
 8000298:	40010c00 	.word	0x40010c00

0800029c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxBuffer) != HAL_OK)
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80002a8:	2101      	movs	r1, #1
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f001 f829 	bl	8001302 <HAL_CAN_GetRxMessage>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80002b6:	f000 fa6b 	bl	8000790 <Error_Handler>
	}

	if (RxHeader.StdId == CAN_RX_ID)
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b12      	cmp	r3, #18
 80002c0:	d107      	bne.n	80002d2 <HAL_CAN_RxFifo1MsgPendingCallback+0x36>
	{
		ReceiveFlag = 1;
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, LEDR_Pin);
 80002c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002cc:	4806      	ldr	r0, [pc, #24]	; (80002e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 80002ce:	f001 fe2b 	bl	8001f28 <HAL_GPIO_TogglePin>
	}
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000094 	.word	0x20000094
 80002e0:	2000009c 	.word	0x2000009c
 80002e4:	20000090 	.word	0x20000090
 80002e8:	40010c00 	.word	0x40010c00

080002ec <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Callback function for timer2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 if(htim->Instance == htim2.Instance)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d107      	bne.n	8000310 <HAL_TIM_PeriodElapsedCallback+0x24>
 {
   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000304:	4805      	ldr	r0, [pc, #20]	; (800031c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000306:	f001 fe0f 	bl	8001f28 <HAL_GPIO_TogglePin>
   DataFlag = 1;
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800030c:	2201      	movs	r2, #1
 800030e:	701a      	strb	r2, [r3, #0]
 }
}
 8000310:	bf00      	nop
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200000f8 	.word	0x200000f8
 800031c:	40011000 	.word	0x40011000
 8000320:	200001d0 	.word	0x200001d0

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032a:	f000 fc8d 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032e:	f000 f867 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000332:	f000 f9a3 	bl	800067c <MX_GPIO_Init>
  MX_CAN_Init();
 8000336:	f000 f8a9 	bl	800048c <MX_CAN_Init>
  MX_USART1_UART_Init();
 800033a:	f000 f94b 	bl	80005d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800033e:	f000 f973 	bl	8000628 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000342:	f000 f8f9 	bl	8000538 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000346:	4827      	ldr	r0, [pc, #156]	; (80003e4 <main+0xc0>)
 8000348:	f002 fa68 	bl	800281c <HAL_TIM_Base_Start_IT>
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800034c:	4826      	ldr	r0, [pc, #152]	; (80003e8 <main+0xc4>)
 800034e:	f000 fec5 	bl	80010dc <HAL_CAN_Start>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <main+0x38>
  {
	  Error_Handler();
 8000358:	f000 fa1a 	bl	8000790 <Error_Handler>
  }
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800035c:	2110      	movs	r1, #16
 800035e:	4822      	ldr	r0, [pc, #136]	; (80003e8 <main+0xc4>)
 8000360:	f001 f8f0 	bl	8001544 <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (DataFlag == 1)
 8000364:	4b21      	ldr	r3, [pc, #132]	; (80003ec <main+0xc8>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d10b      	bne.n	8000384 <main+0x60>
	{
		DataFlag = 0;
 800036c:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <main+0xc8>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
		calc_Message();
 8000372:	f7ff ff33 	bl	80001dc <calc_Message>
		CAN_Transmit(&hcan);
 8000376:	481c      	ldr	r0, [pc, #112]	; (80003e8 <main+0xc4>)
 8000378:	f7ff ff72 	bl	8000260 <CAN_Transmit>
		HAL_Delay(2000);
 800037c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000380:	f000 fcc4 	bl	8000d0c <HAL_Delay>
	}

	if (ReceiveFlag == 1)
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <main+0xcc>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d1eb      	bne.n	8000364 <main+0x40>
	{
		ReceiveFlag = 0;
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <main+0xcc>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]

		if ((RxBuffer[0] == TxBuffer[0]) && (RxBuffer[1] == TxBuffer[1]))
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <main+0xd0>)
 8000394:	781a      	ldrb	r2, [r3, #0]
 8000396:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <main+0xd4>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	d1e2      	bne.n	8000364 <main+0x40>
 800039e:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <main+0xd0>)
 80003a0:	785a      	ldrb	r2, [r3, #1]
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <main+0xd4>)
 80003a4:	785b      	ldrb	r3, [r3, #1]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d1dc      	bne.n	8000364 <main+0x40>
		{
			if (RxBuffer[2] == (TxBuffer[0] + TxBuffer[1]))
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <main+0xd0>)
 80003ac:	789b      	ldrb	r3, [r3, #2]
 80003ae:	461a      	mov	r2, r3
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <main+0xd4>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	4619      	mov	r1, r3
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <main+0xd4>)
 80003b8:	785b      	ldrb	r3, [r3, #1]
 80003ba:	440b      	add	r3, r1
 80003bc:	429a      	cmp	r2, r3
 80003be:	d1d1      	bne.n	8000364 <main+0x40>
			{
				uint8_t crc = calc_SAE_J1850(RxBuffer, 7);
 80003c0:	2107      	movs	r1, #7
 80003c2:	480c      	ldr	r0, [pc, #48]	; (80003f4 <main+0xd0>)
 80003c4:	f7ff fec2 	bl	800014c <calc_SAE_J1850>
 80003c8:	4603      	mov	r3, r0
 80003ca:	71fb      	strb	r3, [r7, #7]
				if (crc == RxBuffer[7])
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <main+0xd0>)
 80003ce:	79db      	ldrb	r3, [r3, #7]
 80003d0:	79fa      	ldrb	r2, [r7, #7]
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d1c6      	bne.n	8000364 <main+0x40>
				{
					HAL_GPIO_TogglePin(GPIOB, LEDG_Pin);
 80003d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003da:	4808      	ldr	r0, [pc, #32]	; (80003fc <main+0xd8>)
 80003dc:	f001 fda4 	bl	8001f28 <HAL_GPIO_TogglePin>
	if (DataFlag == 1)
 80003e0:	e7c0      	b.n	8000364 <main+0x40>
 80003e2:	bf00      	nop
 80003e4:	200000f8 	.word	0x200000f8
 80003e8:	200000d0 	.word	0x200000d0
 80003ec:	200001d0 	.word	0x200001d0
 80003f0:	20000090 	.word	0x20000090
 80003f4:	20000094 	.word	0x20000094
 80003f8:	20000000 	.word	0x20000000
 80003fc:	40010c00 	.word	0x40010c00

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b090      	sub	sp, #64	; 0x40
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0318 	add.w	r3, r7, #24
 800040a:	2228      	movs	r2, #40	; 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f002 ffd3 	bl	80033ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000422:	2301      	movs	r3, #1
 8000424:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000430:	2301      	movs	r3, #1
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2302      	movs	r3, #2
 8000436:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800043c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800043e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000442:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000444:	f107 0318 	add.w	r3, r7, #24
 8000448:	4618      	mov	r0, r3
 800044a:	f001 fd87 	bl	8001f5c <HAL_RCC_OscConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000454:	f000 f99c 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000458:	230f      	movs	r3, #15
 800045a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045c:	2302      	movs	r3, #2
 800045e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2102      	movs	r1, #2
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fff4 	bl	8002460 <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800047e:	f000 f987 	bl	8000790 <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3740      	adds	r7, #64	; 0x40
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <MX_CAN_Init+0xa4>)
 8000494:	4a27      	ldr	r2, [pc, #156]	; (8000534 <MX_CAN_Init+0xa8>)
 8000496:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000498:	4b25      	ldr	r3, [pc, #148]	; (8000530 <MX_CAN_Init+0xa4>)
 800049a:	2204      	movs	r2, #4
 800049c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800049e:	4b24      	ldr	r3, [pc, #144]	; (8000530 <MX_CAN_Init+0xa4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80004a4:	4b22      	ldr	r3, [pc, #136]	; (8000530 <MX_CAN_Init+0xa4>)
 80004a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80004ac:	4b20      	ldr	r3, [pc, #128]	; (8000530 <MX_CAN_Init+0xa4>)
 80004ae:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80004b2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80004b4:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <MX_CAN_Init+0xa4>)
 80004b6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80004ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004bc:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <MX_CAN_Init+0xa4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004c2:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <MX_CAN_Init+0xa4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004c8:	4b19      	ldr	r3, [pc, #100]	; (8000530 <MX_CAN_Init+0xa4>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <MX_CAN_Init+0xa4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <MX_CAN_Init+0xa4>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <MX_CAN_Init+0xa4>)
 80004dc:	2200      	movs	r2, #0
 80004de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004e0:	4813      	ldr	r0, [pc, #76]	; (8000530 <MX_CAN_Init+0xa4>)
 80004e2:	f000 fc37 	bl	8000d54 <HAL_CAN_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_CAN_Init+0x64>
  {
    Error_Handler();
 80004ec:	f000 f950 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80004f0:	2301      	movs	r3, #1
 80004f2:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 12;  // which filter bank to use from the assigned ones
 80004f4:	230c      	movs	r3, #12
 80004f6:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x012<<5;
 80004fc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000500:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x012<<5;
 8000506:	f44f 7310 	mov.w	r3, #576	; 0x240
 800050a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000514:	2301      	movs	r3, #1
 8000516:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // how many filters to assign to the CAN1 (master can)
 8000518:	230d      	movs	r3, #13
 800051a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800051c:	463b      	mov	r3, r7
 800051e:	4619      	mov	r1, r3
 8000520:	4803      	ldr	r0, [pc, #12]	; (8000530 <MX_CAN_Init+0xa4>)
 8000522:	f000 fd12 	bl	8000f4a <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	3728      	adds	r7, #40	; 0x28
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000d0 	.word	0x200000d0
 8000534:	40006400 	.word	0x40006400

08000538 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053e:	f107 0308 	add.w	r3, r7, #8
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_TIM2_Init+0x98>)
 8000556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800055a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_TIM2_Init+0x98>)
 800055e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000562:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <MX_TIM2_Init+0x98>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_TIM2_Init+0x98>)
 800056c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000570:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_TIM2_Init+0x98>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_TIM2_Init+0x98>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800057e:	4814      	ldr	r0, [pc, #80]	; (80005d0 <MX_TIM2_Init+0x98>)
 8000580:	f002 f8fc 	bl	800277c <HAL_TIM_Base_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800058a:	f000 f901 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800058e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000592:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	4619      	mov	r1, r3
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <MX_TIM2_Init+0x98>)
 800059c:	f002 fa98 	bl	8002ad0 <HAL_TIM_ConfigClockSource>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005a6:	f000 f8f3 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	4619      	mov	r1, r3
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <MX_TIM2_Init+0x98>)
 80005b8:	f002 fc6e 	bl	8002e98 <HAL_TIMEx_MasterConfigSynchronization>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005c2:	f000 f8e5 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000f8 	.word	0x200000f8

080005d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_USART1_UART_Init+0x50>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_USART1_UART_Init+0x4c>)
 800060c:	f002 fcb4 	bl	8002f78 <HAL_UART_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000616:	f000 f8bb 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000140 	.word	0x20000140
 8000624:	40013800 	.word	0x40013800

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_USART2_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x4c>)
 8000660:	f002 fc8a 	bl	8002f78 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f891 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000188 	.word	0x20000188
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000690:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <MX_GPIO_Init+0x104>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a3a      	ldr	r2, [pc, #232]	; (8000780 <MX_GPIO_Init+0x104>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b38      	ldr	r3, [pc, #224]	; (8000780 <MX_GPIO_Init+0x104>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0310 	and.w	r3, r3, #16
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a8:	4b35      	ldr	r3, [pc, #212]	; (8000780 <MX_GPIO_Init+0x104>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a34      	ldr	r2, [pc, #208]	; (8000780 <MX_GPIO_Init+0x104>)
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b32      	ldr	r3, [pc, #200]	; (8000780 <MX_GPIO_Init+0x104>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0320 	and.w	r3, r3, #32
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <MX_GPIO_Init+0x104>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <MX_GPIO_Init+0x104>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <MX_GPIO_Init+0x104>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_GPIO_Init+0x104>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a28      	ldr	r2, [pc, #160]	; (8000780 <MX_GPIO_Init+0x104>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_GPIO_Init+0x104>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f6:	4823      	ldr	r0, [pc, #140]	; (8000784 <MX_GPIO_Init+0x108>)
 80006f8:	f001 fbfe 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin|LEDG_Pin|LEDR_Pin|GPIO_PIN_3, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f641 4108 	movw	r1, #7176	; 0x1c08
 8000702:	4821      	ldr	r0, [pc, #132]	; (8000788 <MX_GPIO_Init+0x10c>)
 8000704:	f001 fbf8 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2302      	movs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4619      	mov	r1, r3
 8000720:	4818      	ldr	r0, [pc, #96]	; (8000784 <MX_GPIO_Init+0x108>)
 8000722:	f001 fa65 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin;
 8000726:	2303      	movs	r3, #3
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	4813      	ldr	r0, [pc, #76]	; (8000788 <MX_GPIO_Init+0x10c>)
 800073a:	f001 fa59 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDG_Pin LEDR_Pin PB3 */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDG_Pin|LEDR_Pin|GPIO_PIN_3;
 800073e:	f641 4308 	movw	r3, #7176	; 0x1c08
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_GPIO_Init+0x10c>)
 8000758:	f001 fa4a 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_MCU1_1_Pin */
  GPIO_InitStruct.Pin = GPIO1_MCU1_1_Pin;
 800075c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_GPIO_Init+0x110>)
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO1_MCU1_1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_GPIO_Init+0x10c>)
 8000772:	f001 fa3d 	bl	8001bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	40011000 	.word	0x40011000
 8000788:	40010c00 	.word	0x40010c00
 800078c:	10110000 	.word	0x10110000

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_MspInit+0x5c>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <HAL_MspInit+0x5c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_MspInit+0x5c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x5c>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x5c>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x5c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_MspInit+0x60>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_MspInit+0x60>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010000 	.word	0x40010000

08000800 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a20      	ldr	r2, [pc, #128]	; (800089c <HAL_CAN_MspInit+0x9c>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d139      	bne.n	8000894 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <HAL_CAN_MspInit+0xa0>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <HAL_CAN_MspInit+0xa0>)
 8000826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082a:	61d3      	str	r3, [r2, #28]
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_CAN_MspInit+0xa0>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_CAN_MspInit+0xa0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <HAL_CAN_MspInit+0xa0>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_CAN_MspInit+0xa0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4619      	mov	r1, r3
 8000864:	480f      	ldr	r0, [pc, #60]	; (80008a4 <HAL_CAN_MspInit+0xa4>)
 8000866:	f001 f9c3 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <HAL_CAN_MspInit+0xa4>)
 8000880:	f001 f9b6 	bl	8001bf0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2015      	movs	r0, #21
 800088a:	f001 f97a 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800088e:	2015      	movs	r0, #21
 8000890:	f001 f993 	bl	8001bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40006400 	.word	0x40006400
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010800 	.word	0x40010800

080008a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b8:	d113      	bne.n	80008e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_TIM_Base_MspInit+0x44>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <HAL_TIM_Base_MspInit+0x44>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_TIM_Base_MspInit+0x44>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	201c      	movs	r0, #28
 80008d8:	f001 f953 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008dc:	201c      	movs	r0, #28
 80008de:	f001 f96c 	bl	8001bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a37      	ldr	r2, [pc, #220]	; (80009e8 <HAL_UART_MspInit+0xf8>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d132      	bne.n	8000976 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000910:	4b36      	ldr	r3, [pc, #216]	; (80009ec <HAL_UART_MspInit+0xfc>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a35      	ldr	r2, [pc, #212]	; (80009ec <HAL_UART_MspInit+0xfc>)
 8000916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b33      	ldr	r3, [pc, #204]	; (80009ec <HAL_UART_MspInit+0xfc>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b30      	ldr	r3, [pc, #192]	; (80009ec <HAL_UART_MspInit+0xfc>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a2f      	ldr	r2, [pc, #188]	; (80009ec <HAL_UART_MspInit+0xfc>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <HAL_UART_MspInit+0xfc>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0318 	add.w	r3, r7, #24
 8000952:	4619      	mov	r1, r3
 8000954:	4826      	ldr	r0, [pc, #152]	; (80009f0 <HAL_UART_MspInit+0x100>)
 8000956:	f001 f94b 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	4619      	mov	r1, r3
 800096e:	4820      	ldr	r0, [pc, #128]	; (80009f0 <HAL_UART_MspInit+0x100>)
 8000970:	f001 f93e 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000974:	e034      	b.n	80009e0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <HAL_UART_MspInit+0x104>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d12f      	bne.n	80009e0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_UART_MspInit+0xfc>)
 8000982:	69db      	ldr	r3, [r3, #28]
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_UART_MspInit+0xfc>)
 8000986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098a:	61d3      	str	r3, [r2, #28]
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <HAL_UART_MspInit+0xfc>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_UART_MspInit+0xfc>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a13      	ldr	r2, [pc, #76]	; (80009ec <HAL_UART_MspInit+0xfc>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <HAL_UART_MspInit+0xfc>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b0:	2304      	movs	r3, #4
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	4619      	mov	r1, r3
 80009c2:	480b      	ldr	r0, [pc, #44]	; (80009f0 <HAL_UART_MspInit+0x100>)
 80009c4:	f001 f914 	bl	8001bf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009c8:	2308      	movs	r3, #8
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_UART_MspInit+0x100>)
 80009dc:	f001 f908 	bl	8001bf0 <HAL_GPIO_Init>
}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40013800 	.word	0x40013800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010800 	.word	0x40010800
 80009f4:	40004400 	.word	0x40004400

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3e:	f000 f949 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <CAN1_RX1_IRQHandler+0x10>)
 8000a4e:	f000 fd9e 	bl	800158e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000d0 	.word	0x200000d0

08000a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <TIM2_IRQHandler+0x10>)
 8000a62:	f001 ff2d 	bl	80028c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000f8 	.word	0x200000f8

08000a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return 1;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <_kill>:

int _kill(int pid, int sig)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a88:	f002 fce6 	bl	8003458 <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2216      	movs	r2, #22
 8000a90:	601a      	str	r2, [r3, #0]
  return -1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_exit>:

void _exit (int status)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000aa6:	f04f 31ff 	mov.w	r1, #4294967295
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ffe7 	bl	8000a7e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ab0:	e7fe      	b.n	8000ab0 <_exit+0x12>

08000ab2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	e00a      	b.n	8000ada <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac4:	f3af 8000 	nop.w
 8000ac8:	4601      	mov	r1, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	60ba      	str	r2, [r7, #8]
 8000ad0:	b2ca      	uxtb	r2, r1
 8000ad2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	dbf0      	blt.n	8000ac4 <_read+0x12>
  }

  return len;
 8000ae2:	687b      	ldr	r3, [r7, #4]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e009      	b.n	8000b12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	60ba      	str	r2, [r7, #8]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	dbf1      	blt.n	8000afe <_write+0x12>
  }
  return len;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <_close>:

int _close(int file)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <_isatty>:

int _isatty(int file)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b60:	2301      	movs	r3, #1
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f002 fc50 	bl	8003458 <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20005000 	.word	0x20005000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	200001d4 	.word	0x200001d4
 8000bec:	20000328 	.word	0x20000328

08000bf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <Reset_Handler>:
 8000bfc:	f7ff fff8 	bl	8000bf0 <SystemInit>
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <LoopFillZerobss+0xe>)
 8000c02:	490c      	ldr	r1, [pc, #48]	; (8000c34 <LoopFillZerobss+0x12>)
 8000c04:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <LoopFillZerobss+0x16>)
 8000c06:	2300      	movs	r3, #0
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:
 8000c0a:	58d4      	ldr	r4, [r2, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:
 8000c10:	18c4      	adds	r4, r0, r3
 8000c12:	428c      	cmp	r4, r1
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
 8000c16:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <LoopFillZerobss+0x1a>)
 8000c18:	4c09      	ldr	r4, [pc, #36]	; (8000c40 <LoopFillZerobss+0x1e>)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:
 8000c22:	42a2      	cmp	r2, r4
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>
 8000c26:	f002 fc1d 	bl	8003464 <__libc_init_array>
 8000c2a:	f7ff fb7b 	bl	8000324 <main>
 8000c2e:	4770      	bx	lr
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000074 	.word	0x20000074
 8000c38:	08004238 	.word	0x08004238
 8000c3c:	20000074 	.word	0x20000074
 8000c40:	20000328 	.word	0x20000328

08000c44 <ADC1_2_IRQHandler>:
 8000c44:	e7fe      	b.n	8000c44 <ADC1_2_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x28>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x28>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 ff87 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fd9a 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 ff9f 	bl	8001bd6 <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 ff67 	bl	8001b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2000000c 	.word	0x2000000c
 8000ccc:	20000014 	.word	0x20000014
 8000cd0:	20000010 	.word	0x20000010

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x1c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a03      	ldr	r2, [pc, #12]	; (8000cf4 <HAL_IncTick+0x20>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	20000014 	.word	0x20000014
 8000cf4:	200001d8 	.word	0x200001d8

08000cf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <HAL_GetTick+0x10>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	200001d8 	.word	0x200001d8

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff fff0 	bl	8000cf8 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_Delay+0x44>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d32:	bf00      	nop
 8000d34:	f7ff ffe0 	bl	8000cf8 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000014 	.word	0x20000014

08000d54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e0ed      	b.n	8000f42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fd44 	bl	8000800 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0201 	orr.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d88:	f7ff ffb6 	bl	8000cf8 <HAL_GetTick>
 8000d8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d8e:	e012      	b.n	8000db6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d90:	f7ff ffb2 	bl	8000cf8 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b0a      	cmp	r3, #10
 8000d9c:	d90b      	bls.n	8000db6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2205      	movs	r2, #5
 8000dae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e0c5      	b.n	8000f42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0e5      	beq.n	8000d90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 0202 	bic.w	r2, r2, #2
 8000dd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd4:	f7ff ff90 	bl	8000cf8 <HAL_GetTick>
 8000dd8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dda:	e012      	b.n	8000e02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ddc:	f7ff ff8c 	bl	8000cf8 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b0a      	cmp	r3, #10
 8000de8:	d90b      	bls.n	8000e02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2205      	movs	r2, #5
 8000dfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e09f      	b.n	8000f42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1e5      	bne.n	8000ddc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7e1b      	ldrb	r3, [r3, #24]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d108      	bne.n	8000e2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	e007      	b.n	8000e3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7e5b      	ldrb	r3, [r3, #25]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d108      	bne.n	8000e54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e007      	b.n	8000e64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7e9b      	ldrb	r3, [r3, #26]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d108      	bne.n	8000e7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 0220 	orr.w	r2, r2, #32
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e007      	b.n	8000e8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0220 	bic.w	r2, r2, #32
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7edb      	ldrb	r3, [r3, #27]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d108      	bne.n	8000ea8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0210 	bic.w	r2, r2, #16
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e007      	b.n	8000eb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0210 	orr.w	r2, r2, #16
 8000eb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7f1b      	ldrb	r3, [r3, #28]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d108      	bne.n	8000ed2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0208 	orr.w	r2, r2, #8
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e007      	b.n	8000ee2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0208 	bic.w	r2, r2, #8
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7f5b      	ldrb	r3, [r3, #29]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d108      	bne.n	8000efc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f042 0204 	orr.w	r2, r2, #4
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e007      	b.n	8000f0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0204 	bic.w	r2, r2, #4
 8000f0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	ea42 0103 	orr.w	r1, r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	1e5a      	subs	r2, r3, #1
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b087      	sub	sp, #28
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f60:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d003      	beq.n	8000f70 <HAL_CAN_ConfigFilter+0x26>
 8000f68:	7cfb      	ldrb	r3, [r7, #19]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	f040 80aa 	bne.w	80010c4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f76:	f043 0201 	orr.w	r2, r3, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	2201      	movs	r2, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d123      	bne.n	8000ff2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fcc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3248      	adds	r2, #72	; 0x48
 8000fd2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fe6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fe8:	6979      	ldr	r1, [r7, #20]
 8000fea:	3348      	adds	r3, #72	; 0x48
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	440b      	add	r3, r1
 8000ff0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d122      	bne.n	8001040 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	431a      	orrs	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800101a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3248      	adds	r2, #72	; 0x48
 8001020:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001034:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001036:	6979      	ldr	r1, [r7, #20]
 8001038:	3348      	adds	r3, #72	; 0x48
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d109      	bne.n	800105c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43db      	mvns	r3, r3
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800105a:	e007      	b.n	800106c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	431a      	orrs	r2, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d109      	bne.n	8001088 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001086:	e007      	b.n	8001098 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d107      	bne.n	80010b0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010b6:	f023 0201 	bic.w	r2, r3, #1
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	e006      	b.n	80010d2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
  }
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d12e      	bne.n	800114e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2202      	movs	r2, #2
 80010f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001108:	f7ff fdf6 	bl	8000cf8 <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800110e:	e012      	b.n	8001136 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001110:	f7ff fdf2 	bl	8000cf8 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b0a      	cmp	r3, #10
 800111c:	d90b      	bls.n	8001136 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2205      	movs	r2, #5
 800112e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e012      	b.n	800115c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e5      	bne.n	8001110 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e006      	b.n	800115c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
  }
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001178:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001182:	7ffb      	ldrb	r3, [r7, #31]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d003      	beq.n	8001190 <HAL_CAN_AddTxMessage+0x2c>
 8001188:	7ffb      	ldrb	r3, [r7, #31]
 800118a:	2b02      	cmp	r3, #2
 800118c:	f040 80ad 	bne.w	80012ea <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10a      	bne.n	80011b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8095 	beq.w	80012da <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	0e1b      	lsrs	r3, r3, #24
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011ba:	2201      	movs	r2, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10d      	bne.n	80011e8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011d6:	68f9      	ldr	r1, [r7, #12]
 80011d8:	6809      	ldr	r1, [r1, #0]
 80011da:	431a      	orrs	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3318      	adds	r3, #24
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	440b      	add	r3, r1
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e00f      	b.n	8001208 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011f8:	68f9      	ldr	r1, [r7, #12]
 80011fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	3318      	adds	r3, #24
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	440b      	add	r3, r1
 8001206:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6819      	ldr	r1, [r3, #0]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3318      	adds	r3, #24
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	440b      	add	r3, r1
 8001218:	3304      	adds	r3, #4
 800121a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	7d1b      	ldrb	r3, [r3, #20]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d111      	bne.n	8001248 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3318      	adds	r3, #24
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4413      	add	r3, r2
 8001230:	3304      	adds	r3, #4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	6811      	ldr	r1, [r2, #0]
 8001238:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3318      	adds	r3, #24
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	440b      	add	r3, r1
 8001244:	3304      	adds	r3, #4
 8001246:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3307      	adds	r3, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	061a      	lsls	r2, r3, #24
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3306      	adds	r3, #6
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3305      	adds	r3, #5
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	4313      	orrs	r3, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	3204      	adds	r2, #4
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	4610      	mov	r0, r2
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	6811      	ldr	r1, [r2, #0]
 8001270:	ea43 0200 	orr.w	r2, r3, r0
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	440b      	add	r3, r1
 800127a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800127e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3303      	adds	r3, #3
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	061a      	lsls	r2, r3, #24
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3302      	adds	r3, #2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	041b      	lsls	r3, r3, #16
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3301      	adds	r3, #1
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	4313      	orrs	r3, r2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	7812      	ldrb	r2, [r2, #0]
 80012a0:	4610      	mov	r0, r2
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	6811      	ldr	r1, [r2, #0]
 80012a6:	ea43 0200 	orr.w	r2, r3, r0
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	440b      	add	r3, r1
 80012b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3318      	adds	r3, #24
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4413      	add	r3, r2
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	6811      	ldr	r1, [r2, #0]
 80012c8:	f043 0201 	orr.w	r2, r3, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3318      	adds	r3, #24
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	440b      	add	r3, r1
 80012d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e00e      	b.n	80012f8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e006      	b.n	80012f8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
  }
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3724      	adds	r7, #36	; 0x24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001302:	b480      	push	{r7}
 8001304:	b087      	sub	sp, #28
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001316:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d003      	beq.n	8001326 <HAL_CAN_GetRxMessage+0x24>
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	2b02      	cmp	r3, #2
 8001322:	f040 8103 	bne.w	800152c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10e      	bne.n	800134a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0f7      	b.n	800153a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d107      	bne.n	8001368 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0e8      	b.n	800153a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	331b      	adds	r3, #27
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0204 	and.w	r2, r3, #4
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10c      	bne.n	80013a0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	331b      	adds	r3, #27
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	0d5b      	lsrs	r3, r3, #21
 8001396:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	331b      	adds	r3, #27
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	4413      	add	r3, r2
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	331b      	adds	r3, #27
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	4413      	add	r3, r2
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0202 	and.w	r2, r3, #2
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	331b      	adds	r3, #27
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	4413      	add	r3, r2
 80013da:	3304      	adds	r3, #4
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2208      	movs	r2, #8
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	e00b      	b.n	8001406 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	331b      	adds	r3, #27
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	4413      	add	r3, r2
 80013fa:	3304      	adds	r3, #4
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 020f 	and.w	r2, r3, #15
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	331b      	adds	r3, #27
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	3304      	adds	r3, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	0a1b      	lsrs	r3, r3, #8
 8001418:	b2da      	uxtb	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	331b      	adds	r3, #27
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	4413      	add	r3, r2
 800142a:	3304      	adds	r3, #4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	0c1b      	lsrs	r3, r3, #16
 8001430:	b29a      	uxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	4413      	add	r3, r2
 8001440:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0a1a      	lsrs	r2, r3, #8
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0c1a      	lsrs	r2, r3, #16
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	3302      	adds	r3, #2
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4413      	add	r3, r2
 800148a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0e1a      	lsrs	r2, r3, #24
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	3303      	adds	r3, #3
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3304      	adds	r3, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0a1a      	lsrs	r2, r3, #8
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3305      	adds	r3, #5
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0c1a      	lsrs	r2, r3, #16
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3306      	adds	r3, #6
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0e1a      	lsrs	r2, r3, #24
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3307      	adds	r3, #7
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d108      	bne.n	8001518 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0220 	orr.w	r2, r2, #32
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	e007      	b.n	8001528 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0220 	orr.w	r2, r2, #32
 8001526:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	e006      	b.n	800153a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
  }
}
 800153a:	4618      	mov	r0, r3
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001554:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d002      	beq.n	8001562 <HAL_CAN_ActivateNotification+0x1e>
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d109      	bne.n	8001576 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6959      	ldr	r1, [r3, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e006      	b.n	8001584 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
  }
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b08a      	sub	sp, #40	; 0x28
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d07c      	beq.n	80016ce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d023      	beq.n	8001626 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f983 	bl	80018fc <HAL_CAN_TxMailbox0CompleteCallback>
 80015f6:	e016      	b.n	8001626 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	e00c      	b.n	8001626 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d004      	beq.n	8001620 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	e002      	b.n	8001626 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f986 	bl	8001932 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d024      	beq.n	800167a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001638:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f962 	bl	800190e <HAL_CAN_TxMailbox1CompleteCallback>
 800164a:	e016      	b.n	800167a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
 800165e:	e00c      	b.n	800167a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	e002      	b.n	800167a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f965 	bl	8001944 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d024      	beq.n	80016ce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800168c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f941 	bl	8001920 <HAL_CAN_TxMailbox2CompleteCallback>
 800169e:	e016      	b.n	80016ce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
 80016b2:	e00c      	b.n	80016ce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
 80016c6:	e002      	b.n	80016ce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f944 	bl	8001956 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00c      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2210      	movs	r2, #16
 80016f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00b      	beq.n	8001714 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2208      	movs	r2, #8
 800170c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f933 	bl	800197a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d009      	beq.n	8001732 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f91b 	bl	8001968 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00c      	beq.n	8001756 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2210      	movs	r2, #16
 8001754:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00b      	beq.n	8001778 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2208      	movs	r2, #8
 8001770:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f90a 	bl	800198c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7fe fd83 	bl	800029c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00b      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2210      	movs	r2, #16
 80017b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f8f3 	bl	800199e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00b      	beq.n	80017da <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2208      	movs	r2, #8
 80017d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f8eb 	bl	80019b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d07b      	beq.n	80018dc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d072      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001848:	2b00      	cmp	r3, #0
 800184a:	d043      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001852:	2b00      	cmp	r3, #0
 8001854:	d03e      	beq.n	80018d4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800185c:	2b60      	cmp	r3, #96	; 0x60
 800185e:	d02b      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x32a>
 8001860:	2b60      	cmp	r3, #96	; 0x60
 8001862:	d82e      	bhi.n	80018c2 <HAL_CAN_IRQHandler+0x334>
 8001864:	2b50      	cmp	r3, #80	; 0x50
 8001866:	d022      	beq.n	80018ae <HAL_CAN_IRQHandler+0x320>
 8001868:	2b50      	cmp	r3, #80	; 0x50
 800186a:	d82a      	bhi.n	80018c2 <HAL_CAN_IRQHandler+0x334>
 800186c:	2b40      	cmp	r3, #64	; 0x40
 800186e:	d019      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x316>
 8001870:	2b40      	cmp	r3, #64	; 0x40
 8001872:	d826      	bhi.n	80018c2 <HAL_CAN_IRQHandler+0x334>
 8001874:	2b30      	cmp	r3, #48	; 0x30
 8001876:	d010      	beq.n	800189a <HAL_CAN_IRQHandler+0x30c>
 8001878:	2b30      	cmp	r3, #48	; 0x30
 800187a:	d822      	bhi.n	80018c2 <HAL_CAN_IRQHandler+0x334>
 800187c:	2b10      	cmp	r3, #16
 800187e:	d002      	beq.n	8001886 <HAL_CAN_IRQHandler+0x2f8>
 8001880:	2b20      	cmp	r3, #32
 8001882:	d005      	beq.n	8001890 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001884:	e01d      	b.n	80018c2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800188e:	e019      	b.n	80018c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001898:	e014      	b.n	80018c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	f043 0320 	orr.w	r3, r3, #32
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018a2:	e00f      	b.n	80018c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018ac:	e00a      	b.n	80018c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018b6:	e005      	b.n	80018c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018c0:	e000      	b.n	80018c4 <HAL_CAN_IRQHandler+0x336>
            break;
 80018c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2204      	movs	r2, #4
 80018da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f867 	bl	80019c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0b      	blt.n	8001a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	4906      	ldr	r1, [pc, #24]	; (8001a6c <__NVIC_EnableIRQ+0x34>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b38:	d301      	bcc.n	8001b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00f      	b.n	8001b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <SysTick_Config+0x40>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b46:	210f      	movs	r1, #15
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f7ff ff90 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <SysTick_Config+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <SysTick_Config+0x40>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff2d 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b94:	f7ff ff42 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f7ff ff90 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff5f 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff35 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffa2 	bl	8001b28 <SysTick_Config>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b08b      	sub	sp, #44	; 0x2c
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	e169      	b.n	8001ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c04:	2201      	movs	r2, #1
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	f040 8158 	bne.w	8001ed2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4a9a      	ldr	r2, [pc, #616]	; (8001e90 <HAL_GPIO_Init+0x2a0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d05e      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c2c:	4a98      	ldr	r2, [pc, #608]	; (8001e90 <HAL_GPIO_Init+0x2a0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d875      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c32:	4a98      	ldr	r2, [pc, #608]	; (8001e94 <HAL_GPIO_Init+0x2a4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d058      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c38:	4a96      	ldr	r2, [pc, #600]	; (8001e94 <HAL_GPIO_Init+0x2a4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d86f      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c3e:	4a96      	ldr	r2, [pc, #600]	; (8001e98 <HAL_GPIO_Init+0x2a8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d052      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c44:	4a94      	ldr	r2, [pc, #592]	; (8001e98 <HAL_GPIO_Init+0x2a8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d869      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c4a:	4a94      	ldr	r2, [pc, #592]	; (8001e9c <HAL_GPIO_Init+0x2ac>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d04c      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c50:	4a92      	ldr	r2, [pc, #584]	; (8001e9c <HAL_GPIO_Init+0x2ac>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d863      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c56:	4a92      	ldr	r2, [pc, #584]	; (8001ea0 <HAL_GPIO_Init+0x2b0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d046      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c5c:	4a90      	ldr	r2, [pc, #576]	; (8001ea0 <HAL_GPIO_Init+0x2b0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d85d      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d82a      	bhi.n	8001cbc <HAL_GPIO_Init+0xcc>
 8001c66:	2b12      	cmp	r3, #18
 8001c68:	d859      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c6a:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <HAL_GPIO_Init+0x80>)
 8001c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c70:	08001ceb 	.word	0x08001ceb
 8001c74:	08001cc5 	.word	0x08001cc5
 8001c78:	08001cd7 	.word	0x08001cd7
 8001c7c:	08001d19 	.word	0x08001d19
 8001c80:	08001d1f 	.word	0x08001d1f
 8001c84:	08001d1f 	.word	0x08001d1f
 8001c88:	08001d1f 	.word	0x08001d1f
 8001c8c:	08001d1f 	.word	0x08001d1f
 8001c90:	08001d1f 	.word	0x08001d1f
 8001c94:	08001d1f 	.word	0x08001d1f
 8001c98:	08001d1f 	.word	0x08001d1f
 8001c9c:	08001d1f 	.word	0x08001d1f
 8001ca0:	08001d1f 	.word	0x08001d1f
 8001ca4:	08001d1f 	.word	0x08001d1f
 8001ca8:	08001d1f 	.word	0x08001d1f
 8001cac:	08001d1f 	.word	0x08001d1f
 8001cb0:	08001d1f 	.word	0x08001d1f
 8001cb4:	08001ccd 	.word	0x08001ccd
 8001cb8:	08001ce1 	.word	0x08001ce1
 8001cbc:	4a79      	ldr	r2, [pc, #484]	; (8001ea4 <HAL_GPIO_Init+0x2b4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cc2:	e02c      	b.n	8001d1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	623b      	str	r3, [r7, #32]
          break;
 8001cca:	e029      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e024      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	623b      	str	r3, [r7, #32]
          break;
 8001cde:	e01f      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	623b      	str	r3, [r7, #32]
          break;
 8001ce8:	e01a      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d102      	bne.n	8001cf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	623b      	str	r3, [r7, #32]
          break;
 8001cf6:	e013      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d00:	2308      	movs	r3, #8
 8001d02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	611a      	str	r2, [r3, #16]
          break;
 8001d0a:	e009      	b.n	8001d20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	615a      	str	r2, [r3, #20]
          break;
 8001d16:	e003      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
          break;
 8001d1c:	e000      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          break;
 8001d1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2bff      	cmp	r3, #255	; 0xff
 8001d24:	d801      	bhi.n	8001d2a <HAL_GPIO_Init+0x13a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	e001      	b.n	8001d2e <HAL_GPIO_Init+0x13e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	d802      	bhi.n	8001d3c <HAL_GPIO_Init+0x14c>
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	e002      	b.n	8001d42 <HAL_GPIO_Init+0x152>
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	3b08      	subs	r3, #8
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	210f      	movs	r1, #15
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	401a      	ands	r2, r3
 8001d54:	6a39      	ldr	r1, [r7, #32]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80b1 	beq.w	8001ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d70:	4b4d      	ldr	r3, [pc, #308]	; (8001ea8 <HAL_GPIO_Init+0x2b8>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <HAL_GPIO_Init+0x2b8>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <HAL_GPIO_Init+0x2b8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d88:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_GPIO_Init+0x2bc>)
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a40      	ldr	r2, [pc, #256]	; (8001eb0 <HAL_GPIO_Init+0x2c0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d013      	beq.n	8001ddc <HAL_GPIO_Init+0x1ec>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3f      	ldr	r2, [pc, #252]	; (8001eb4 <HAL_GPIO_Init+0x2c4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00d      	beq.n	8001dd8 <HAL_GPIO_Init+0x1e8>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3e      	ldr	r2, [pc, #248]	; (8001eb8 <HAL_GPIO_Init+0x2c8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a3d      	ldr	r2, [pc, #244]	; (8001ebc <HAL_GPIO_Init+0x2cc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_GPIO_Init+0x1e0>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e006      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	e004      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e002      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4093      	lsls	r3, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dee:	492f      	ldr	r1, [pc, #188]	; (8001eac <HAL_GPIO_Init+0x2bc>)
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	492c      	ldr	r1, [pc, #176]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4928      	ldr	r1, [pc, #160]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	491e      	ldr	r1, [pc, #120]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4918      	ldr	r1, [pc, #96]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4914      	ldr	r1, [pc, #80]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d021      	beq.n	8001ec4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
 8001e8c:	e021      	b.n	8001ed2 <HAL_GPIO_Init+0x2e2>
 8001e8e:	bf00      	nop
 8001e90:	10320000 	.word	0x10320000
 8001e94:	10310000 	.word	0x10310000
 8001e98:	10220000 	.word	0x10220000
 8001e9c:	10210000 	.word	0x10210000
 8001ea0:	10120000 	.word	0x10120000
 8001ea4:	10110000 	.word	0x10110000
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40010800 	.word	0x40010800
 8001eb4:	40010c00 	.word	0x40010c00
 8001eb8:	40011000 	.word	0x40011000
 8001ebc:	40011400 	.word	0x40011400
 8001ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	4909      	ldr	r1, [pc, #36]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f47f ae8e 	bne.w	8001c04 <HAL_GPIO_Init+0x14>
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	372c      	adds	r7, #44	; 0x2c
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f14:	e003      	b.n	8001f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43d9      	mvns	r1, r3
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	400b      	ands	r3, r1
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	611a      	str	r2, [r3, #16]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e272      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8087 	beq.w	800208a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f7c:	4b92      	ldr	r3, [pc, #584]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d00c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f88:	4b8f      	ldr	r3, [pc, #572]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d112      	bne.n	8001fba <HAL_RCC_OscConfig+0x5e>
 8001f94:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d10b      	bne.n	8001fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa2:	4b89      	ldr	r3, [pc, #548]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d06c      	beq.n	8002088 <HAL_RCC_OscConfig+0x12c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d168      	bne.n	8002088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e24c      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x76>
 8001fc4:	4b80      	ldr	r3, [pc, #512]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a7f      	ldr	r2, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e02e      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x98>
 8001fda:	4b7b      	ldr	r3, [pc, #492]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7a      	ldr	r2, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b78      	ldr	r3, [pc, #480]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a77      	ldr	r2, [pc, #476]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e01d      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0xbc>
 8001ffe:	4b72      	ldr	r3, [pc, #456]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a71      	ldr	r2, [pc, #452]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b6f      	ldr	r3, [pc, #444]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a6e      	ldr	r2, [pc, #440]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8002018:	4b6b      	ldr	r3, [pc, #428]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a6a      	ldr	r2, [pc, #424]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800201e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a67      	ldr	r2, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7fe fe5e 	bl	8000cf8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7fe fe5a 	bl	8000cf8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e200      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0xe4>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe fe4a 	bl	8000cf8 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7fe fe46 	bl	8000cf8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1ec      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x10c>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d063      	beq.n	800215e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002096:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d11c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x18c>
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d116      	bne.n	80020e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_RCC_OscConfig+0x176>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d001      	beq.n	80020d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e1c0      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4939      	ldr	r1, [pc, #228]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	e03a      	b.n	800215e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f0:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7fe fdff 	bl	8000cf8 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fe:	f7fe fdfb 	bl	8000cf8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e1a1      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4927      	ldr	r1, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
 8002130:	e015      	b.n	800215e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe fdde 	bl	8000cf8 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002140:	f7fe fdda 	bl	8000cf8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e180      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d03a      	beq.n	80021e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d019      	beq.n	80021a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7fe fdbe 	bl	8000cf8 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002180:	f7fe fdba 	bl	8000cf8 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e160      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800219e:	2001      	movs	r0, #1
 80021a0:	f000 face 	bl	8002740 <RCC_Delay>
 80021a4:	e01c      	b.n	80021e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7fe fda4 	bl	8000cf8 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b2:	e00f      	b.n	80021d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7fe fda0 	bl	8000cf8 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d908      	bls.n	80021d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e146      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	42420000 	.word	0x42420000
 80021d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	4b92      	ldr	r3, [pc, #584]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e9      	bne.n	80021b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a6 	beq.w	800233a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b8b      	ldr	r3, [pc, #556]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10d      	bne.n	800221a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a87      	ldr	r2, [pc, #540]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	61d3      	str	r3, [r2, #28]
 800220a:	4b85      	ldr	r3, [pc, #532]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b82      	ldr	r3, [pc, #520]	; (8002424 <HAL_RCC_OscConfig+0x4c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d118      	bne.n	8002258 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002226:	4b7f      	ldr	r3, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x4c8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7e      	ldr	r2, [pc, #504]	; (8002424 <HAL_RCC_OscConfig+0x4c8>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002232:	f7fe fd61 	bl	8000cf8 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7fe fd5d 	bl	8000cf8 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e103      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4b75      	ldr	r3, [pc, #468]	; (8002424 <HAL_RCC_OscConfig+0x4c8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x312>
 8002260:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a6e      	ldr	r2, [pc, #440]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6213      	str	r3, [r2, #32]
 800226c:	e02d      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x334>
 8002276:	4b6a      	ldr	r3, [pc, #424]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a69      	ldr	r2, [pc, #420]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	4b67      	ldr	r3, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a66      	ldr	r2, [pc, #408]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	e01c      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x356>
 8002298:	4b61      	ldr	r3, [pc, #388]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a60      	ldr	r2, [pc, #384]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4a5d      	ldr	r2, [pc, #372]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 80022b2:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a5a      	ldr	r2, [pc, #360]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	4b58      	ldr	r3, [pc, #352]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a57      	ldr	r2, [pc, #348]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d015      	beq.n	80022fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7fe fd11 	bl	8000cf8 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fd0d 	bl	8000cf8 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0b1      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ee      	beq.n	80022da <HAL_RCC_OscConfig+0x37e>
 80022fc:	e014      	b.n	8002328 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7fe fcfb 	bl	8000cf8 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fcf7 	bl	8000cf8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e09b      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	4b40      	ldr	r3, [pc, #256]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4b3c      	ldr	r3, [pc, #240]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a3b      	ldr	r2, [pc, #236]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002338:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8087 	beq.w	8002452 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002344:	4b36      	ldr	r3, [pc, #216]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d061      	beq.n	8002414 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d146      	bne.n	80023e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b33      	ldr	r3, [pc, #204]	; (8002428 <HAL_RCC_OscConfig+0x4cc>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7fe fccb 	bl	8000cf8 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7fe fcc7 	bl	8000cf8 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e06d      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d108      	bne.n	80023a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4921      	ldr	r1, [pc, #132]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a19      	ldr	r1, [r3, #32]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	430b      	orrs	r3, r1
 80023b2:	491b      	ldr	r1, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x4cc>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fc9b 	bl	8000cf8 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe fc97 	bl	8000cf8 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e03d      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x46a>
 80023e4:	e035      	b.n	8002452 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_RCC_OscConfig+0x4cc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe fc84 	bl	8000cf8 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe fc80 	bl	8000cf8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e026      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x498>
 8002412:	e01e      	b.n	8002452 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d107      	bne.n	800242c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e019      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
 8002428:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_OscConfig+0x500>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	429a      	cmp	r2, r3
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0d0      	b.n	8002616 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002474:	4b6a      	ldr	r3, [pc, #424]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d910      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b67      	ldr	r3, [pc, #412]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 0207 	bic.w	r2, r3, #7
 800248a:	4965      	ldr	r1, [pc, #404]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b63      	ldr	r3, [pc, #396]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0b8      	b.n	8002616 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d4:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a52      	ldr	r2, [pc, #328]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e0:	4b50      	ldr	r3, [pc, #320]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	494d      	ldr	r1, [pc, #308]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d040      	beq.n	8002580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b47      	ldr	r3, [pc, #284]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d115      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e07f      	b.n	8002616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e073      	b.n	8002616 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252e:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e06b      	b.n	8002616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253e:	4b39      	ldr	r3, [pc, #228]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4936      	ldr	r1, [pc, #216]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002550:	f7fe fbd2 	bl	8000cf8 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	e00a      	b.n	800256e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002558:	f7fe fbce 	bl	8000cf8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e053      	b.n	8002616 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 020c 	and.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	429a      	cmp	r2, r3
 800257e:	d1eb      	bne.n	8002558 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d210      	bcs.n	80025b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0207 	bic.w	r2, r3, #7
 8002596:	4922      	ldr	r1, [pc, #136]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e032      	b.n	8002616 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4916      	ldr	r1, [pc, #88]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	490e      	ldr	r1, [pc, #56]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ee:	f000 f821 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	490a      	ldr	r1, [pc, #40]	; (8002628 <HAL_RCC_ClockConfig+0x1c8>)
 8002600:	5ccb      	ldrb	r3, [r1, r3]
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	4a09      	ldr	r2, [pc, #36]	; (800262c <HAL_RCC_ClockConfig+0x1cc>)
 8002608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_ClockConfig+0x1d0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fb30 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40022000 	.word	0x40022000
 8002624:	40021000 	.word	0x40021000
 8002628:	08004128 	.word	0x08004128
 800262c:	2000000c 	.word	0x2000000c
 8002630:	20000010 	.word	0x20000010

08002634 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b04      	cmp	r3, #4
 800265c:	d002      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x30>
 800265e:	2b08      	cmp	r3, #8
 8002660:	d003      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x36>
 8002662:	e027      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002666:	613b      	str	r3, [r7, #16]
      break;
 8002668:	e027      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	0c9b      	lsrs	r3, r3, #18
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d010      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	0c5b      	lsrs	r3, r3, #17
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002696:	fb03 f202 	mul.w	r2, r3, r2
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	e004      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	613b      	str	r3, [r7, #16]
      break;
 80026b2:	e002      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_GetSysClockFreq+0x98>)
 80026b6:	613b      	str	r3, [r7, #16]
      break;
 80026b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ba:	693b      	ldr	r3, [r7, #16]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	007a1200 	.word	0x007a1200
 80026d0:	08004140 	.word	0x08004140
 80026d4:	08004150 	.word	0x08004150
 80026d8:	003d0900 	.word	0x003d0900

080026dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e0:	4b02      	ldr	r3, [pc, #8]	; (80026ec <HAL_RCC_GetHCLKFreq+0x10>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	2000000c 	.word	0x2000000c

080026f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f4:	f7ff fff2 	bl	80026dc <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	08004138 	.word	0x08004138

08002718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800271c:	f7ff ffde 	bl	80026dc <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0adb      	lsrs	r3, r3, #11
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	; (800273c <HAL_RCC_GetPCLK2Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08004138 	.word	0x08004138

08002740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <RCC_Delay+0x34>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <RCC_Delay+0x38>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0a5b      	lsrs	r3, r3, #9
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800275c:	bf00      	nop
  }
  while (Delay --);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e5a      	subs	r2, r3, #1
 8002762:	60fa      	str	r2, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f9      	bne.n	800275c <RCC_Delay+0x1c>
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	2000000c 	.word	0x2000000c
 8002778:	10624dd3 	.word	0x10624dd3

0800277c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e041      	b.n	8002812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe f880 	bl	80008a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f000 fa74 	bl	8002ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d001      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e03a      	b.n	80028aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <HAL_TIM_Base_Start_IT+0x98>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x58>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285e:	d009      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x58>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x58>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_TIM_Base_Start_IT+0xa0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d111      	bne.n	8002898 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b06      	cmp	r3, #6
 8002884:	d010      	beq.n	80028a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002896:	e007      	b.n	80028a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40000800 	.word	0x40000800

080028c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0202 	mvn.w	r2, #2
 80028ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f9b4 	bl	8002c70 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f9a7 	bl	8002c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f9b6 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b04      	cmp	r3, #4
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0204 	mvn.w	r2, #4
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f98a 	bl	8002c70 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f97d 	bl	8002c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f98c 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b08      	cmp	r3, #8
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0208 	mvn.w	r2, #8
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f960 	bl	8002c70 <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f953 	bl	8002c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f962 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0210 	mvn.w	r2, #16
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2208      	movs	r2, #8
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f936 	bl	8002c70 <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f929 	bl	8002c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f938 	bl	8002c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0201 	mvn.w	r2, #1
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd fc54 	bl	80002ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d107      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa7b 	bl	8002f66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	d10e      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d107      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f8fc 	bl	8002c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d107      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0220 	mvn.w	r2, #32
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa46 	bl	8002f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_TIM_ConfigClockSource+0x1c>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e0b4      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x186>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b24:	d03e      	beq.n	8002ba4 <HAL_TIM_ConfigClockSource+0xd4>
 8002b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2a:	f200 8087 	bhi.w	8002c3c <HAL_TIM_ConfigClockSource+0x16c>
 8002b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b32:	f000 8086 	beq.w	8002c42 <HAL_TIM_ConfigClockSource+0x172>
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3a:	d87f      	bhi.n	8002c3c <HAL_TIM_ConfigClockSource+0x16c>
 8002b3c:	2b70      	cmp	r3, #112	; 0x70
 8002b3e:	d01a      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0xa6>
 8002b40:	2b70      	cmp	r3, #112	; 0x70
 8002b42:	d87b      	bhi.n	8002c3c <HAL_TIM_ConfigClockSource+0x16c>
 8002b44:	2b60      	cmp	r3, #96	; 0x60
 8002b46:	d050      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0x11a>
 8002b48:	2b60      	cmp	r3, #96	; 0x60
 8002b4a:	d877      	bhi.n	8002c3c <HAL_TIM_ConfigClockSource+0x16c>
 8002b4c:	2b50      	cmp	r3, #80	; 0x50
 8002b4e:	d03c      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0xfa>
 8002b50:	2b50      	cmp	r3, #80	; 0x50
 8002b52:	d873      	bhi.n	8002c3c <HAL_TIM_ConfigClockSource+0x16c>
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d058      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0x13a>
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	d86f      	bhi.n	8002c3c <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	2b30      	cmp	r3, #48	; 0x30
 8002b5e:	d064      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0x15a>
 8002b60:	2b30      	cmp	r3, #48	; 0x30
 8002b62:	d86b      	bhi.n	8002c3c <HAL_TIM_ConfigClockSource+0x16c>
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d060      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0x15a>
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d867      	bhi.n	8002c3c <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d05c      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0x15a>
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d05a      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0x15a>
 8002b74:	e062      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b86:	f000 f968 	bl	8002e5a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	609a      	str	r2, [r3, #8]
      break;
 8002ba2:	e04f      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bb4:	f000 f951 	bl	8002e5a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bc6:	609a      	str	r2, [r3, #8]
      break;
 8002bc8:	e03c      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f000 f8c8 	bl	8002d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2150      	movs	r1, #80	; 0x50
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f91f 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002be8:	e02c      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f000 f8e6 	bl	8002dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2160      	movs	r1, #96	; 0x60
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f90f 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002c08:	e01c      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c16:	461a      	mov	r2, r3
 8002c18:	f000 f8a8 	bl	8002d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2140      	movs	r1, #64	; 0x40
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f8ff 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002c28:	e00c      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4619      	mov	r1, r3
 8002c34:	4610      	mov	r0, r2
 8002c36:	f000 f8f6 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 8002c3a:	e003      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c40:	e000      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
	...

08002ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a29      	ldr	r2, [pc, #164]	; (8002d60 <TIM_Base_SetConfig+0xb8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_Base_SetConfig+0x30>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc6:	d007      	beq.n	8002cd8 <TIM_Base_SetConfig+0x30>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <TIM_Base_SetConfig+0xbc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0x30>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <TIM_Base_SetConfig+0xc0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d108      	bne.n	8002cea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <TIM_Base_SetConfig+0xb8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_Base_SetConfig+0x62>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <TIM_Base_SetConfig+0xbc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x62>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <TIM_Base_SetConfig+0xc0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <TIM_Base_SetConfig+0xb8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d103      	bne.n	8002d50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	615a      	str	r2, [r3, #20]
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40000800 	.word	0x40000800

08002d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0201 	bic.w	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f023 030a 	bic.w	r3, r3, #10
 8002da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f023 0210 	bic.w	r2, r3, #16
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	031b      	lsls	r3, r3, #12
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	621a      	str	r2, [r3, #32]
}
 8002e1c:	bf00      	nop
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f043 0307 	orr.w	r3, r3, #7
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	609a      	str	r2, [r3, #8]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b087      	sub	sp, #28
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	021a      	lsls	r2, r3, #8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	609a      	str	r2, [r3, #8]
}
 8002e8e:	bf00      	nop
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e046      	b.n	8002f3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00e      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d009      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d004      	beq.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d10c      	bne.n	8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800

08002f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e042      	b.n	8003010 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fca6 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f82b 	bl	8003018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003052:	f023 030c 	bic.w	r3, r3, #12
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	430b      	orrs	r3, r1
 800305e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2c      	ldr	r2, [pc, #176]	; (800312c <UART_SetConfig+0x114>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003080:	f7ff fb4a 	bl	8002718 <HAL_RCC_GetPCLK2Freq>
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	e002      	b.n	800308e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003088:	f7ff fb32 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 800308c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	4a22      	ldr	r2, [pc, #136]	; (8003130 <UART_SetConfig+0x118>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	0119      	lsls	r1, r3, #4
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <UART_SetConfig+0x118>)
 80030c6:	fba3 0302 	umull	r0, r3, r3, r2
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2064      	movs	r0, #100	; 0x64
 80030ce:	fb00 f303 	mul.w	r3, r0, r3
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	3332      	adds	r3, #50	; 0x32
 80030d8:	4a15      	ldr	r2, [pc, #84]	; (8003130 <UART_SetConfig+0x118>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e4:	4419      	add	r1, r3
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009a      	lsls	r2, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <UART_SetConfig+0x118>)
 80030fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	2064      	movs	r0, #100	; 0x64
 8003106:	fb00 f303 	mul.w	r3, r0, r3
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	3332      	adds	r3, #50	; 0x32
 8003110:	4a07      	ldr	r2, [pc, #28]	; (8003130 <UART_SetConfig+0x118>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	440a      	add	r2, r1
 8003122:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40013800 	.word	0x40013800
 8003130:	51eb851f 	.word	0x51eb851f

08003134 <rand>:
 8003134:	4b16      	ldr	r3, [pc, #88]	; (8003190 <rand+0x5c>)
 8003136:	b510      	push	{r4, lr}
 8003138:	681c      	ldr	r4, [r3, #0]
 800313a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800313c:	b9b3      	cbnz	r3, 800316c <rand+0x38>
 800313e:	2018      	movs	r0, #24
 8003140:	f000 fa1e 	bl	8003580 <malloc>
 8003144:	4602      	mov	r2, r0
 8003146:	6320      	str	r0, [r4, #48]	; 0x30
 8003148:	b920      	cbnz	r0, 8003154 <rand+0x20>
 800314a:	2152      	movs	r1, #82	; 0x52
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <rand+0x60>)
 800314e:	4812      	ldr	r0, [pc, #72]	; (8003198 <rand+0x64>)
 8003150:	f000 f9b0 	bl	80034b4 <__assert_func>
 8003154:	4911      	ldr	r1, [pc, #68]	; (800319c <rand+0x68>)
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <rand+0x6c>)
 8003158:	e9c0 1300 	strd	r1, r3, [r0]
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <rand+0x70>)
 800315e:	2100      	movs	r1, #0
 8003160:	6083      	str	r3, [r0, #8]
 8003162:	230b      	movs	r3, #11
 8003164:	8183      	strh	r3, [r0, #12]
 8003166:	2001      	movs	r0, #1
 8003168:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800316c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800316e:	480e      	ldr	r0, [pc, #56]	; (80031a8 <rand+0x74>)
 8003170:	690b      	ldr	r3, [r1, #16]
 8003172:	694c      	ldr	r4, [r1, #20]
 8003174:	4358      	muls	r0, r3
 8003176:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <rand+0x78>)
 8003178:	fb02 0004 	mla	r0, r2, r4, r0
 800317c:	fba3 3202 	umull	r3, r2, r3, r2
 8003180:	3301      	adds	r3, #1
 8003182:	eb40 0002 	adc.w	r0, r0, r2
 8003186:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800318a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800318e:	bd10      	pop	{r4, pc}
 8003190:	20000070 	.word	0x20000070
 8003194:	08004152 	.word	0x08004152
 8003198:	08004169 	.word	0x08004169
 800319c:	abcd330e 	.word	0xabcd330e
 80031a0:	e66d1234 	.word	0xe66d1234
 80031a4:	0005deec 	.word	0x0005deec
 80031a8:	5851f42d 	.word	0x5851f42d
 80031ac:	4c957f2d 	.word	0x4c957f2d

080031b0 <std>:
 80031b0:	2300      	movs	r3, #0
 80031b2:	b510      	push	{r4, lr}
 80031b4:	4604      	mov	r4, r0
 80031b6:	e9c0 3300 	strd	r3, r3, [r0]
 80031ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031be:	6083      	str	r3, [r0, #8]
 80031c0:	8181      	strh	r1, [r0, #12]
 80031c2:	6643      	str	r3, [r0, #100]	; 0x64
 80031c4:	81c2      	strh	r2, [r0, #14]
 80031c6:	6183      	str	r3, [r0, #24]
 80031c8:	4619      	mov	r1, r3
 80031ca:	2208      	movs	r2, #8
 80031cc:	305c      	adds	r0, #92	; 0x5c
 80031ce:	f000 f8f4 	bl	80033ba <memset>
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <std+0x58>)
 80031d4:	6224      	str	r4, [r4, #32]
 80031d6:	6263      	str	r3, [r4, #36]	; 0x24
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <std+0x5c>)
 80031da:	62a3      	str	r3, [r4, #40]	; 0x28
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <std+0x60>)
 80031de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <std+0x64>)
 80031e2:	6323      	str	r3, [r4, #48]	; 0x30
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <std+0x68>)
 80031e6:	429c      	cmp	r4, r3
 80031e8:	d006      	beq.n	80031f8 <std+0x48>
 80031ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80031ee:	4294      	cmp	r4, r2
 80031f0:	d002      	beq.n	80031f8 <std+0x48>
 80031f2:	33d0      	adds	r3, #208	; 0xd0
 80031f4:	429c      	cmp	r4, r3
 80031f6:	d105      	bne.n	8003204 <std+0x54>
 80031f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003200:	f000 b954 	b.w	80034ac <__retarget_lock_init_recursive>
 8003204:	bd10      	pop	{r4, pc}
 8003206:	bf00      	nop
 8003208:	08003335 	.word	0x08003335
 800320c:	08003357 	.word	0x08003357
 8003210:	0800338f 	.word	0x0800338f
 8003214:	080033b3 	.word	0x080033b3
 8003218:	200001dc 	.word	0x200001dc

0800321c <stdio_exit_handler>:
 800321c:	4a02      	ldr	r2, [pc, #8]	; (8003228 <stdio_exit_handler+0xc>)
 800321e:	4903      	ldr	r1, [pc, #12]	; (800322c <stdio_exit_handler+0x10>)
 8003220:	4803      	ldr	r0, [pc, #12]	; (8003230 <stdio_exit_handler+0x14>)
 8003222:	f000 b869 	b.w	80032f8 <_fwalk_sglue>
 8003226:	bf00      	nop
 8003228:	20000018 	.word	0x20000018
 800322c:	080037ed 	.word	0x080037ed
 8003230:	20000024 	.word	0x20000024

08003234 <cleanup_stdio>:
 8003234:	6841      	ldr	r1, [r0, #4]
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <cleanup_stdio+0x34>)
 8003238:	b510      	push	{r4, lr}
 800323a:	4299      	cmp	r1, r3
 800323c:	4604      	mov	r4, r0
 800323e:	d001      	beq.n	8003244 <cleanup_stdio+0x10>
 8003240:	f000 fad4 	bl	80037ec <_fflush_r>
 8003244:	68a1      	ldr	r1, [r4, #8]
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <cleanup_stdio+0x38>)
 8003248:	4299      	cmp	r1, r3
 800324a:	d002      	beq.n	8003252 <cleanup_stdio+0x1e>
 800324c:	4620      	mov	r0, r4
 800324e:	f000 facd 	bl	80037ec <_fflush_r>
 8003252:	68e1      	ldr	r1, [r4, #12]
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <cleanup_stdio+0x3c>)
 8003256:	4299      	cmp	r1, r3
 8003258:	d004      	beq.n	8003264 <cleanup_stdio+0x30>
 800325a:	4620      	mov	r0, r4
 800325c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003260:	f000 bac4 	b.w	80037ec <_fflush_r>
 8003264:	bd10      	pop	{r4, pc}
 8003266:	bf00      	nop
 8003268:	200001dc 	.word	0x200001dc
 800326c:	20000244 	.word	0x20000244
 8003270:	200002ac 	.word	0x200002ac

08003274 <global_stdio_init.part.0>:
 8003274:	b510      	push	{r4, lr}
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <global_stdio_init.part.0+0x30>)
 8003278:	4c0b      	ldr	r4, [pc, #44]	; (80032a8 <global_stdio_init.part.0+0x34>)
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <global_stdio_init.part.0+0x38>)
 800327c:	4620      	mov	r0, r4
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	2104      	movs	r1, #4
 8003282:	2200      	movs	r2, #0
 8003284:	f7ff ff94 	bl	80031b0 <std>
 8003288:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800328c:	2201      	movs	r2, #1
 800328e:	2109      	movs	r1, #9
 8003290:	f7ff ff8e 	bl	80031b0 <std>
 8003294:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003298:	2202      	movs	r2, #2
 800329a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800329e:	2112      	movs	r1, #18
 80032a0:	f7ff bf86 	b.w	80031b0 <std>
 80032a4:	20000314 	.word	0x20000314
 80032a8:	200001dc 	.word	0x200001dc
 80032ac:	0800321d 	.word	0x0800321d

080032b0 <__sfp_lock_acquire>:
 80032b0:	4801      	ldr	r0, [pc, #4]	; (80032b8 <__sfp_lock_acquire+0x8>)
 80032b2:	f000 b8fc 	b.w	80034ae <__retarget_lock_acquire_recursive>
 80032b6:	bf00      	nop
 80032b8:	2000031d 	.word	0x2000031d

080032bc <__sfp_lock_release>:
 80032bc:	4801      	ldr	r0, [pc, #4]	; (80032c4 <__sfp_lock_release+0x8>)
 80032be:	f000 b8f7 	b.w	80034b0 <__retarget_lock_release_recursive>
 80032c2:	bf00      	nop
 80032c4:	2000031d 	.word	0x2000031d

080032c8 <__sinit>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	4604      	mov	r4, r0
 80032cc:	f7ff fff0 	bl	80032b0 <__sfp_lock_acquire>
 80032d0:	6a23      	ldr	r3, [r4, #32]
 80032d2:	b11b      	cbz	r3, 80032dc <__sinit+0x14>
 80032d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032d8:	f7ff bff0 	b.w	80032bc <__sfp_lock_release>
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <__sinit+0x28>)
 80032de:	6223      	str	r3, [r4, #32]
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <__sinit+0x2c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f5      	bne.n	80032d4 <__sinit+0xc>
 80032e8:	f7ff ffc4 	bl	8003274 <global_stdio_init.part.0>
 80032ec:	e7f2      	b.n	80032d4 <__sinit+0xc>
 80032ee:	bf00      	nop
 80032f0:	08003235 	.word	0x08003235
 80032f4:	20000314 	.word	0x20000314

080032f8 <_fwalk_sglue>:
 80032f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032fc:	4607      	mov	r7, r0
 80032fe:	4688      	mov	r8, r1
 8003300:	4614      	mov	r4, r2
 8003302:	2600      	movs	r6, #0
 8003304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003308:	f1b9 0901 	subs.w	r9, r9, #1
 800330c:	d505      	bpl.n	800331a <_fwalk_sglue+0x22>
 800330e:	6824      	ldr	r4, [r4, #0]
 8003310:	2c00      	cmp	r4, #0
 8003312:	d1f7      	bne.n	8003304 <_fwalk_sglue+0xc>
 8003314:	4630      	mov	r0, r6
 8003316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800331a:	89ab      	ldrh	r3, [r5, #12]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d907      	bls.n	8003330 <_fwalk_sglue+0x38>
 8003320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003324:	3301      	adds	r3, #1
 8003326:	d003      	beq.n	8003330 <_fwalk_sglue+0x38>
 8003328:	4629      	mov	r1, r5
 800332a:	4638      	mov	r0, r7
 800332c:	47c0      	blx	r8
 800332e:	4306      	orrs	r6, r0
 8003330:	3568      	adds	r5, #104	; 0x68
 8003332:	e7e9      	b.n	8003308 <_fwalk_sglue+0x10>

08003334 <__sread>:
 8003334:	b510      	push	{r4, lr}
 8003336:	460c      	mov	r4, r1
 8003338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800333c:	f000 f868 	bl	8003410 <_read_r>
 8003340:	2800      	cmp	r0, #0
 8003342:	bfab      	itete	ge
 8003344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003346:	89a3      	ldrhlt	r3, [r4, #12]
 8003348:	181b      	addge	r3, r3, r0
 800334a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800334e:	bfac      	ite	ge
 8003350:	6563      	strge	r3, [r4, #84]	; 0x54
 8003352:	81a3      	strhlt	r3, [r4, #12]
 8003354:	bd10      	pop	{r4, pc}

08003356 <__swrite>:
 8003356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800335a:	461f      	mov	r7, r3
 800335c:	898b      	ldrh	r3, [r1, #12]
 800335e:	4605      	mov	r5, r0
 8003360:	05db      	lsls	r3, r3, #23
 8003362:	460c      	mov	r4, r1
 8003364:	4616      	mov	r6, r2
 8003366:	d505      	bpl.n	8003374 <__swrite+0x1e>
 8003368:	2302      	movs	r3, #2
 800336a:	2200      	movs	r2, #0
 800336c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003370:	f000 f83c 	bl	80033ec <_lseek_r>
 8003374:	89a3      	ldrh	r3, [r4, #12]
 8003376:	4632      	mov	r2, r6
 8003378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800337c:	81a3      	strh	r3, [r4, #12]
 800337e:	4628      	mov	r0, r5
 8003380:	463b      	mov	r3, r7
 8003382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800338a:	f000 b853 	b.w	8003434 <_write_r>

0800338e <__sseek>:
 800338e:	b510      	push	{r4, lr}
 8003390:	460c      	mov	r4, r1
 8003392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003396:	f000 f829 	bl	80033ec <_lseek_r>
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	bf15      	itete	ne
 80033a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80033a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033aa:	81a3      	strheq	r3, [r4, #12]
 80033ac:	bf18      	it	ne
 80033ae:	81a3      	strhne	r3, [r4, #12]
 80033b0:	bd10      	pop	{r4, pc}

080033b2 <__sclose>:
 80033b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b6:	f000 b809 	b.w	80033cc <_close_r>

080033ba <memset>:
 80033ba:	4603      	mov	r3, r0
 80033bc:	4402      	add	r2, r0
 80033be:	4293      	cmp	r3, r2
 80033c0:	d100      	bne.n	80033c4 <memset+0xa>
 80033c2:	4770      	bx	lr
 80033c4:	f803 1b01 	strb.w	r1, [r3], #1
 80033c8:	e7f9      	b.n	80033be <memset+0x4>
	...

080033cc <_close_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	2300      	movs	r3, #0
 80033d0:	4d05      	ldr	r5, [pc, #20]	; (80033e8 <_close_r+0x1c>)
 80033d2:	4604      	mov	r4, r0
 80033d4:	4608      	mov	r0, r1
 80033d6:	602b      	str	r3, [r5, #0]
 80033d8:	f7fd fba4 	bl	8000b24 <_close>
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	d102      	bne.n	80033e6 <_close_r+0x1a>
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	b103      	cbz	r3, 80033e6 <_close_r+0x1a>
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	bd38      	pop	{r3, r4, r5, pc}
 80033e8:	20000318 	.word	0x20000318

080033ec <_lseek_r>:
 80033ec:	b538      	push	{r3, r4, r5, lr}
 80033ee:	4604      	mov	r4, r0
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	2200      	movs	r2, #0
 80033f6:	4d05      	ldr	r5, [pc, #20]	; (800340c <_lseek_r+0x20>)
 80033f8:	602a      	str	r2, [r5, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f7fd fbb6 	bl	8000b6c <_lseek>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d102      	bne.n	800340a <_lseek_r+0x1e>
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	b103      	cbz	r3, 800340a <_lseek_r+0x1e>
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	bd38      	pop	{r3, r4, r5, pc}
 800340c:	20000318 	.word	0x20000318

08003410 <_read_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	4604      	mov	r4, r0
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	2200      	movs	r2, #0
 800341a:	4d05      	ldr	r5, [pc, #20]	; (8003430 <_read_r+0x20>)
 800341c:	602a      	str	r2, [r5, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	f7fd fb47 	bl	8000ab2 <_read>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	d102      	bne.n	800342e <_read_r+0x1e>
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	b103      	cbz	r3, 800342e <_read_r+0x1e>
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	bd38      	pop	{r3, r4, r5, pc}
 8003430:	20000318 	.word	0x20000318

08003434 <_write_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	4604      	mov	r4, r0
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	2200      	movs	r2, #0
 800343e:	4d05      	ldr	r5, [pc, #20]	; (8003454 <_write_r+0x20>)
 8003440:	602a      	str	r2, [r5, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	f7fd fb52 	bl	8000aec <_write>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d102      	bne.n	8003452 <_write_r+0x1e>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	b103      	cbz	r3, 8003452 <_write_r+0x1e>
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	20000318 	.word	0x20000318

08003458 <__errno>:
 8003458:	4b01      	ldr	r3, [pc, #4]	; (8003460 <__errno+0x8>)
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000070 	.word	0x20000070

08003464 <__libc_init_array>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	2600      	movs	r6, #0
 8003468:	4d0c      	ldr	r5, [pc, #48]	; (800349c <__libc_init_array+0x38>)
 800346a:	4c0d      	ldr	r4, [pc, #52]	; (80034a0 <__libc_init_array+0x3c>)
 800346c:	1b64      	subs	r4, r4, r5
 800346e:	10a4      	asrs	r4, r4, #2
 8003470:	42a6      	cmp	r6, r4
 8003472:	d109      	bne.n	8003488 <__libc_init_array+0x24>
 8003474:	f000 fe4c 	bl	8004110 <_init>
 8003478:	2600      	movs	r6, #0
 800347a:	4d0a      	ldr	r5, [pc, #40]	; (80034a4 <__libc_init_array+0x40>)
 800347c:	4c0a      	ldr	r4, [pc, #40]	; (80034a8 <__libc_init_array+0x44>)
 800347e:	1b64      	subs	r4, r4, r5
 8003480:	10a4      	asrs	r4, r4, #2
 8003482:	42a6      	cmp	r6, r4
 8003484:	d105      	bne.n	8003492 <__libc_init_array+0x2e>
 8003486:	bd70      	pop	{r4, r5, r6, pc}
 8003488:	f855 3b04 	ldr.w	r3, [r5], #4
 800348c:	4798      	blx	r3
 800348e:	3601      	adds	r6, #1
 8003490:	e7ee      	b.n	8003470 <__libc_init_array+0xc>
 8003492:	f855 3b04 	ldr.w	r3, [r5], #4
 8003496:	4798      	blx	r3
 8003498:	3601      	adds	r6, #1
 800349a:	e7f2      	b.n	8003482 <__libc_init_array+0x1e>
 800349c:	08004230 	.word	0x08004230
 80034a0:	08004230 	.word	0x08004230
 80034a4:	08004230 	.word	0x08004230
 80034a8:	08004234 	.word	0x08004234

080034ac <__retarget_lock_init_recursive>:
 80034ac:	4770      	bx	lr

080034ae <__retarget_lock_acquire_recursive>:
 80034ae:	4770      	bx	lr

080034b0 <__retarget_lock_release_recursive>:
 80034b0:	4770      	bx	lr
	...

080034b4 <__assert_func>:
 80034b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034b6:	4614      	mov	r4, r2
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <__assert_func+0x2c>)
 80034bc:	4605      	mov	r5, r0
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68d8      	ldr	r0, [r3, #12]
 80034c2:	b14c      	cbz	r4, 80034d8 <__assert_func+0x24>
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <__assert_func+0x30>)
 80034c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80034ca:	9100      	str	r1, [sp, #0]
 80034cc:	462b      	mov	r3, r5
 80034ce:	4906      	ldr	r1, [pc, #24]	; (80034e8 <__assert_func+0x34>)
 80034d0:	f000 f9b4 	bl	800383c <fiprintf>
 80034d4:	f000 f9d4 	bl	8003880 <abort>
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <__assert_func+0x38>)
 80034da:	461c      	mov	r4, r3
 80034dc:	e7f3      	b.n	80034c6 <__assert_func+0x12>
 80034de:	bf00      	nop
 80034e0:	20000070 	.word	0x20000070
 80034e4:	080041c1 	.word	0x080041c1
 80034e8:	080041ce 	.word	0x080041ce
 80034ec:	080041fc 	.word	0x080041fc

080034f0 <_free_r>:
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4605      	mov	r5, r0
 80034f4:	2900      	cmp	r1, #0
 80034f6:	d040      	beq.n	800357a <_free_r+0x8a>
 80034f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034fc:	1f0c      	subs	r4, r1, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bfb8      	it	lt
 8003502:	18e4      	addlt	r4, r4, r3
 8003504:	f000 f8e4 	bl	80036d0 <__malloc_lock>
 8003508:	4a1c      	ldr	r2, [pc, #112]	; (800357c <_free_r+0x8c>)
 800350a:	6813      	ldr	r3, [r2, #0]
 800350c:	b933      	cbnz	r3, 800351c <_free_r+0x2c>
 800350e:	6063      	str	r3, [r4, #4]
 8003510:	6014      	str	r4, [r2, #0]
 8003512:	4628      	mov	r0, r5
 8003514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003518:	f000 b8e0 	b.w	80036dc <__malloc_unlock>
 800351c:	42a3      	cmp	r3, r4
 800351e:	d908      	bls.n	8003532 <_free_r+0x42>
 8003520:	6820      	ldr	r0, [r4, #0]
 8003522:	1821      	adds	r1, r4, r0
 8003524:	428b      	cmp	r3, r1
 8003526:	bf01      	itttt	eq
 8003528:	6819      	ldreq	r1, [r3, #0]
 800352a:	685b      	ldreq	r3, [r3, #4]
 800352c:	1809      	addeq	r1, r1, r0
 800352e:	6021      	streq	r1, [r4, #0]
 8003530:	e7ed      	b.n	800350e <_free_r+0x1e>
 8003532:	461a      	mov	r2, r3
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	b10b      	cbz	r3, 800353c <_free_r+0x4c>
 8003538:	42a3      	cmp	r3, r4
 800353a:	d9fa      	bls.n	8003532 <_free_r+0x42>
 800353c:	6811      	ldr	r1, [r2, #0]
 800353e:	1850      	adds	r0, r2, r1
 8003540:	42a0      	cmp	r0, r4
 8003542:	d10b      	bne.n	800355c <_free_r+0x6c>
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	4401      	add	r1, r0
 8003548:	1850      	adds	r0, r2, r1
 800354a:	4283      	cmp	r3, r0
 800354c:	6011      	str	r1, [r2, #0]
 800354e:	d1e0      	bne.n	8003512 <_free_r+0x22>
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4408      	add	r0, r1
 8003556:	6010      	str	r0, [r2, #0]
 8003558:	6053      	str	r3, [r2, #4]
 800355a:	e7da      	b.n	8003512 <_free_r+0x22>
 800355c:	d902      	bls.n	8003564 <_free_r+0x74>
 800355e:	230c      	movs	r3, #12
 8003560:	602b      	str	r3, [r5, #0]
 8003562:	e7d6      	b.n	8003512 <_free_r+0x22>
 8003564:	6820      	ldr	r0, [r4, #0]
 8003566:	1821      	adds	r1, r4, r0
 8003568:	428b      	cmp	r3, r1
 800356a:	bf01      	itttt	eq
 800356c:	6819      	ldreq	r1, [r3, #0]
 800356e:	685b      	ldreq	r3, [r3, #4]
 8003570:	1809      	addeq	r1, r1, r0
 8003572:	6021      	streq	r1, [r4, #0]
 8003574:	6063      	str	r3, [r4, #4]
 8003576:	6054      	str	r4, [r2, #4]
 8003578:	e7cb      	b.n	8003512 <_free_r+0x22>
 800357a:	bd38      	pop	{r3, r4, r5, pc}
 800357c:	20000320 	.word	0x20000320

08003580 <malloc>:
 8003580:	4b02      	ldr	r3, [pc, #8]	; (800358c <malloc+0xc>)
 8003582:	4601      	mov	r1, r0
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	f000 b823 	b.w	80035d0 <_malloc_r>
 800358a:	bf00      	nop
 800358c:	20000070 	.word	0x20000070

08003590 <sbrk_aligned>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	4e0e      	ldr	r6, [pc, #56]	; (80035cc <sbrk_aligned+0x3c>)
 8003594:	460c      	mov	r4, r1
 8003596:	6831      	ldr	r1, [r6, #0]
 8003598:	4605      	mov	r5, r0
 800359a:	b911      	cbnz	r1, 80035a2 <sbrk_aligned+0x12>
 800359c:	f000 f960 	bl	8003860 <_sbrk_r>
 80035a0:	6030      	str	r0, [r6, #0]
 80035a2:	4621      	mov	r1, r4
 80035a4:	4628      	mov	r0, r5
 80035a6:	f000 f95b 	bl	8003860 <_sbrk_r>
 80035aa:	1c43      	adds	r3, r0, #1
 80035ac:	d00a      	beq.n	80035c4 <sbrk_aligned+0x34>
 80035ae:	1cc4      	adds	r4, r0, #3
 80035b0:	f024 0403 	bic.w	r4, r4, #3
 80035b4:	42a0      	cmp	r0, r4
 80035b6:	d007      	beq.n	80035c8 <sbrk_aligned+0x38>
 80035b8:	1a21      	subs	r1, r4, r0
 80035ba:	4628      	mov	r0, r5
 80035bc:	f000 f950 	bl	8003860 <_sbrk_r>
 80035c0:	3001      	adds	r0, #1
 80035c2:	d101      	bne.n	80035c8 <sbrk_aligned+0x38>
 80035c4:	f04f 34ff 	mov.w	r4, #4294967295
 80035c8:	4620      	mov	r0, r4
 80035ca:	bd70      	pop	{r4, r5, r6, pc}
 80035cc:	20000324 	.word	0x20000324

080035d0 <_malloc_r>:
 80035d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d4:	1ccd      	adds	r5, r1, #3
 80035d6:	f025 0503 	bic.w	r5, r5, #3
 80035da:	3508      	adds	r5, #8
 80035dc:	2d0c      	cmp	r5, #12
 80035de:	bf38      	it	cc
 80035e0:	250c      	movcc	r5, #12
 80035e2:	2d00      	cmp	r5, #0
 80035e4:	4607      	mov	r7, r0
 80035e6:	db01      	blt.n	80035ec <_malloc_r+0x1c>
 80035e8:	42a9      	cmp	r1, r5
 80035ea:	d905      	bls.n	80035f8 <_malloc_r+0x28>
 80035ec:	230c      	movs	r3, #12
 80035ee:	2600      	movs	r6, #0
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4630      	mov	r0, r6
 80035f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80036cc <_malloc_r+0xfc>
 80035fc:	f000 f868 	bl	80036d0 <__malloc_lock>
 8003600:	f8d8 3000 	ldr.w	r3, [r8]
 8003604:	461c      	mov	r4, r3
 8003606:	bb5c      	cbnz	r4, 8003660 <_malloc_r+0x90>
 8003608:	4629      	mov	r1, r5
 800360a:	4638      	mov	r0, r7
 800360c:	f7ff ffc0 	bl	8003590 <sbrk_aligned>
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	4604      	mov	r4, r0
 8003614:	d155      	bne.n	80036c2 <_malloc_r+0xf2>
 8003616:	f8d8 4000 	ldr.w	r4, [r8]
 800361a:	4626      	mov	r6, r4
 800361c:	2e00      	cmp	r6, #0
 800361e:	d145      	bne.n	80036ac <_malloc_r+0xdc>
 8003620:	2c00      	cmp	r4, #0
 8003622:	d048      	beq.n	80036b6 <_malloc_r+0xe6>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	4631      	mov	r1, r6
 8003628:	4638      	mov	r0, r7
 800362a:	eb04 0903 	add.w	r9, r4, r3
 800362e:	f000 f917 	bl	8003860 <_sbrk_r>
 8003632:	4581      	cmp	r9, r0
 8003634:	d13f      	bne.n	80036b6 <_malloc_r+0xe6>
 8003636:	6821      	ldr	r1, [r4, #0]
 8003638:	4638      	mov	r0, r7
 800363a:	1a6d      	subs	r5, r5, r1
 800363c:	4629      	mov	r1, r5
 800363e:	f7ff ffa7 	bl	8003590 <sbrk_aligned>
 8003642:	3001      	adds	r0, #1
 8003644:	d037      	beq.n	80036b6 <_malloc_r+0xe6>
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	442b      	add	r3, r5
 800364a:	6023      	str	r3, [r4, #0]
 800364c:	f8d8 3000 	ldr.w	r3, [r8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d038      	beq.n	80036c6 <_malloc_r+0xf6>
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	42a2      	cmp	r2, r4
 8003658:	d12b      	bne.n	80036b2 <_malloc_r+0xe2>
 800365a:	2200      	movs	r2, #0
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	e00f      	b.n	8003680 <_malloc_r+0xb0>
 8003660:	6822      	ldr	r2, [r4, #0]
 8003662:	1b52      	subs	r2, r2, r5
 8003664:	d41f      	bmi.n	80036a6 <_malloc_r+0xd6>
 8003666:	2a0b      	cmp	r2, #11
 8003668:	d917      	bls.n	800369a <_malloc_r+0xca>
 800366a:	1961      	adds	r1, r4, r5
 800366c:	42a3      	cmp	r3, r4
 800366e:	6025      	str	r5, [r4, #0]
 8003670:	bf18      	it	ne
 8003672:	6059      	strne	r1, [r3, #4]
 8003674:	6863      	ldr	r3, [r4, #4]
 8003676:	bf08      	it	eq
 8003678:	f8c8 1000 	streq.w	r1, [r8]
 800367c:	5162      	str	r2, [r4, r5]
 800367e:	604b      	str	r3, [r1, #4]
 8003680:	4638      	mov	r0, r7
 8003682:	f104 060b 	add.w	r6, r4, #11
 8003686:	f000 f829 	bl	80036dc <__malloc_unlock>
 800368a:	f026 0607 	bic.w	r6, r6, #7
 800368e:	1d23      	adds	r3, r4, #4
 8003690:	1af2      	subs	r2, r6, r3
 8003692:	d0ae      	beq.n	80035f2 <_malloc_r+0x22>
 8003694:	1b9b      	subs	r3, r3, r6
 8003696:	50a3      	str	r3, [r4, r2]
 8003698:	e7ab      	b.n	80035f2 <_malloc_r+0x22>
 800369a:	42a3      	cmp	r3, r4
 800369c:	6862      	ldr	r2, [r4, #4]
 800369e:	d1dd      	bne.n	800365c <_malloc_r+0x8c>
 80036a0:	f8c8 2000 	str.w	r2, [r8]
 80036a4:	e7ec      	b.n	8003680 <_malloc_r+0xb0>
 80036a6:	4623      	mov	r3, r4
 80036a8:	6864      	ldr	r4, [r4, #4]
 80036aa:	e7ac      	b.n	8003606 <_malloc_r+0x36>
 80036ac:	4634      	mov	r4, r6
 80036ae:	6876      	ldr	r6, [r6, #4]
 80036b0:	e7b4      	b.n	800361c <_malloc_r+0x4c>
 80036b2:	4613      	mov	r3, r2
 80036b4:	e7cc      	b.n	8003650 <_malloc_r+0x80>
 80036b6:	230c      	movs	r3, #12
 80036b8:	4638      	mov	r0, r7
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	f000 f80e 	bl	80036dc <__malloc_unlock>
 80036c0:	e797      	b.n	80035f2 <_malloc_r+0x22>
 80036c2:	6025      	str	r5, [r4, #0]
 80036c4:	e7dc      	b.n	8003680 <_malloc_r+0xb0>
 80036c6:	605b      	str	r3, [r3, #4]
 80036c8:	deff      	udf	#255	; 0xff
 80036ca:	bf00      	nop
 80036cc:	20000320 	.word	0x20000320

080036d0 <__malloc_lock>:
 80036d0:	4801      	ldr	r0, [pc, #4]	; (80036d8 <__malloc_lock+0x8>)
 80036d2:	f7ff beec 	b.w	80034ae <__retarget_lock_acquire_recursive>
 80036d6:	bf00      	nop
 80036d8:	2000031c 	.word	0x2000031c

080036dc <__malloc_unlock>:
 80036dc:	4801      	ldr	r0, [pc, #4]	; (80036e4 <__malloc_unlock+0x8>)
 80036de:	f7ff bee7 	b.w	80034b0 <__retarget_lock_release_recursive>
 80036e2:	bf00      	nop
 80036e4:	2000031c 	.word	0x2000031c

080036e8 <__sflush_r>:
 80036e8:	898a      	ldrh	r2, [r1, #12]
 80036ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ec:	4605      	mov	r5, r0
 80036ee:	0710      	lsls	r0, r2, #28
 80036f0:	460c      	mov	r4, r1
 80036f2:	d457      	bmi.n	80037a4 <__sflush_r+0xbc>
 80036f4:	684b      	ldr	r3, [r1, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	dc04      	bgt.n	8003704 <__sflush_r+0x1c>
 80036fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	dc01      	bgt.n	8003704 <__sflush_r+0x1c>
 8003700:	2000      	movs	r0, #0
 8003702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003706:	2e00      	cmp	r6, #0
 8003708:	d0fa      	beq.n	8003700 <__sflush_r+0x18>
 800370a:	2300      	movs	r3, #0
 800370c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003710:	682f      	ldr	r7, [r5, #0]
 8003712:	6a21      	ldr	r1, [r4, #32]
 8003714:	602b      	str	r3, [r5, #0]
 8003716:	d032      	beq.n	800377e <__sflush_r+0x96>
 8003718:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	075a      	lsls	r2, r3, #29
 800371e:	d505      	bpl.n	800372c <__sflush_r+0x44>
 8003720:	6863      	ldr	r3, [r4, #4]
 8003722:	1ac0      	subs	r0, r0, r3
 8003724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003726:	b10b      	cbz	r3, 800372c <__sflush_r+0x44>
 8003728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800372a:	1ac0      	subs	r0, r0, r3
 800372c:	2300      	movs	r3, #0
 800372e:	4602      	mov	r2, r0
 8003730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003732:	4628      	mov	r0, r5
 8003734:	6a21      	ldr	r1, [r4, #32]
 8003736:	47b0      	blx	r6
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	d106      	bne.n	800374c <__sflush_r+0x64>
 800373e:	6829      	ldr	r1, [r5, #0]
 8003740:	291d      	cmp	r1, #29
 8003742:	d82b      	bhi.n	800379c <__sflush_r+0xb4>
 8003744:	4a28      	ldr	r2, [pc, #160]	; (80037e8 <__sflush_r+0x100>)
 8003746:	410a      	asrs	r2, r1
 8003748:	07d6      	lsls	r6, r2, #31
 800374a:	d427      	bmi.n	800379c <__sflush_r+0xb4>
 800374c:	2200      	movs	r2, #0
 800374e:	6062      	str	r2, [r4, #4]
 8003750:	6922      	ldr	r2, [r4, #16]
 8003752:	04d9      	lsls	r1, r3, #19
 8003754:	6022      	str	r2, [r4, #0]
 8003756:	d504      	bpl.n	8003762 <__sflush_r+0x7a>
 8003758:	1c42      	adds	r2, r0, #1
 800375a:	d101      	bne.n	8003760 <__sflush_r+0x78>
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	b903      	cbnz	r3, 8003762 <__sflush_r+0x7a>
 8003760:	6560      	str	r0, [r4, #84]	; 0x54
 8003762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003764:	602f      	str	r7, [r5, #0]
 8003766:	2900      	cmp	r1, #0
 8003768:	d0ca      	beq.n	8003700 <__sflush_r+0x18>
 800376a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800376e:	4299      	cmp	r1, r3
 8003770:	d002      	beq.n	8003778 <__sflush_r+0x90>
 8003772:	4628      	mov	r0, r5
 8003774:	f7ff febc 	bl	80034f0 <_free_r>
 8003778:	2000      	movs	r0, #0
 800377a:	6360      	str	r0, [r4, #52]	; 0x34
 800377c:	e7c1      	b.n	8003702 <__sflush_r+0x1a>
 800377e:	2301      	movs	r3, #1
 8003780:	4628      	mov	r0, r5
 8003782:	47b0      	blx	r6
 8003784:	1c41      	adds	r1, r0, #1
 8003786:	d1c8      	bne.n	800371a <__sflush_r+0x32>
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0c5      	beq.n	800371a <__sflush_r+0x32>
 800378e:	2b1d      	cmp	r3, #29
 8003790:	d001      	beq.n	8003796 <__sflush_r+0xae>
 8003792:	2b16      	cmp	r3, #22
 8003794:	d101      	bne.n	800379a <__sflush_r+0xb2>
 8003796:	602f      	str	r7, [r5, #0]
 8003798:	e7b2      	b.n	8003700 <__sflush_r+0x18>
 800379a:	89a3      	ldrh	r3, [r4, #12]
 800379c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a0:	81a3      	strh	r3, [r4, #12]
 80037a2:	e7ae      	b.n	8003702 <__sflush_r+0x1a>
 80037a4:	690f      	ldr	r7, [r1, #16]
 80037a6:	2f00      	cmp	r7, #0
 80037a8:	d0aa      	beq.n	8003700 <__sflush_r+0x18>
 80037aa:	0793      	lsls	r3, r2, #30
 80037ac:	bf18      	it	ne
 80037ae:	2300      	movne	r3, #0
 80037b0:	680e      	ldr	r6, [r1, #0]
 80037b2:	bf08      	it	eq
 80037b4:	694b      	ldreq	r3, [r1, #20]
 80037b6:	1bf6      	subs	r6, r6, r7
 80037b8:	600f      	str	r7, [r1, #0]
 80037ba:	608b      	str	r3, [r1, #8]
 80037bc:	2e00      	cmp	r6, #0
 80037be:	dd9f      	ble.n	8003700 <__sflush_r+0x18>
 80037c0:	4633      	mov	r3, r6
 80037c2:	463a      	mov	r2, r7
 80037c4:	4628      	mov	r0, r5
 80037c6:	6a21      	ldr	r1, [r4, #32]
 80037c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80037cc:	47e0      	blx	ip
 80037ce:	2800      	cmp	r0, #0
 80037d0:	dc06      	bgt.n	80037e0 <__sflush_r+0xf8>
 80037d2:	89a3      	ldrh	r3, [r4, #12]
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037dc:	81a3      	strh	r3, [r4, #12]
 80037de:	e790      	b.n	8003702 <__sflush_r+0x1a>
 80037e0:	4407      	add	r7, r0
 80037e2:	1a36      	subs	r6, r6, r0
 80037e4:	e7ea      	b.n	80037bc <__sflush_r+0xd4>
 80037e6:	bf00      	nop
 80037e8:	dfbffffe 	.word	0xdfbffffe

080037ec <_fflush_r>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	690b      	ldr	r3, [r1, #16]
 80037f0:	4605      	mov	r5, r0
 80037f2:	460c      	mov	r4, r1
 80037f4:	b913      	cbnz	r3, 80037fc <_fflush_r+0x10>
 80037f6:	2500      	movs	r5, #0
 80037f8:	4628      	mov	r0, r5
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	b118      	cbz	r0, 8003806 <_fflush_r+0x1a>
 80037fe:	6a03      	ldr	r3, [r0, #32]
 8003800:	b90b      	cbnz	r3, 8003806 <_fflush_r+0x1a>
 8003802:	f7ff fd61 	bl	80032c8 <__sinit>
 8003806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f3      	beq.n	80037f6 <_fflush_r+0xa>
 800380e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003810:	07d0      	lsls	r0, r2, #31
 8003812:	d404      	bmi.n	800381e <_fflush_r+0x32>
 8003814:	0599      	lsls	r1, r3, #22
 8003816:	d402      	bmi.n	800381e <_fflush_r+0x32>
 8003818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800381a:	f7ff fe48 	bl	80034ae <__retarget_lock_acquire_recursive>
 800381e:	4628      	mov	r0, r5
 8003820:	4621      	mov	r1, r4
 8003822:	f7ff ff61 	bl	80036e8 <__sflush_r>
 8003826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003828:	4605      	mov	r5, r0
 800382a:	07da      	lsls	r2, r3, #31
 800382c:	d4e4      	bmi.n	80037f8 <_fflush_r+0xc>
 800382e:	89a3      	ldrh	r3, [r4, #12]
 8003830:	059b      	lsls	r3, r3, #22
 8003832:	d4e1      	bmi.n	80037f8 <_fflush_r+0xc>
 8003834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003836:	f7ff fe3b 	bl	80034b0 <__retarget_lock_release_recursive>
 800383a:	e7dd      	b.n	80037f8 <_fflush_r+0xc>

0800383c <fiprintf>:
 800383c:	b40e      	push	{r1, r2, r3}
 800383e:	b503      	push	{r0, r1, lr}
 8003840:	4601      	mov	r1, r0
 8003842:	ab03      	add	r3, sp, #12
 8003844:	4805      	ldr	r0, [pc, #20]	; (800385c <fiprintf+0x20>)
 8003846:	f853 2b04 	ldr.w	r2, [r3], #4
 800384a:	6800      	ldr	r0, [r0, #0]
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	f000 f845 	bl	80038dc <_vfiprintf_r>
 8003852:	b002      	add	sp, #8
 8003854:	f85d eb04 	ldr.w	lr, [sp], #4
 8003858:	b003      	add	sp, #12
 800385a:	4770      	bx	lr
 800385c:	20000070 	.word	0x20000070

08003860 <_sbrk_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	2300      	movs	r3, #0
 8003864:	4d05      	ldr	r5, [pc, #20]	; (800387c <_sbrk_r+0x1c>)
 8003866:	4604      	mov	r4, r0
 8003868:	4608      	mov	r0, r1
 800386a:	602b      	str	r3, [r5, #0]
 800386c:	f7fd f98a 	bl	8000b84 <_sbrk>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_sbrk_r+0x1a>
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	b103      	cbz	r3, 800387a <_sbrk_r+0x1a>
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	20000318 	.word	0x20000318

08003880 <abort>:
 8003880:	2006      	movs	r0, #6
 8003882:	b508      	push	{r3, lr}
 8003884:	f000 fb96 	bl	8003fb4 <raise>
 8003888:	2001      	movs	r0, #1
 800388a:	f7fd f908 	bl	8000a9e <_exit>

0800388e <__sfputc_r>:
 800388e:	6893      	ldr	r3, [r2, #8]
 8003890:	b410      	push	{r4}
 8003892:	3b01      	subs	r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	6093      	str	r3, [r2, #8]
 8003898:	da07      	bge.n	80038aa <__sfputc_r+0x1c>
 800389a:	6994      	ldr	r4, [r2, #24]
 800389c:	42a3      	cmp	r3, r4
 800389e:	db01      	blt.n	80038a4 <__sfputc_r+0x16>
 80038a0:	290a      	cmp	r1, #10
 80038a2:	d102      	bne.n	80038aa <__sfputc_r+0x1c>
 80038a4:	bc10      	pop	{r4}
 80038a6:	f000 bac7 	b.w	8003e38 <__swbuf_r>
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	1c58      	adds	r0, r3, #1
 80038ae:	6010      	str	r0, [r2, #0]
 80038b0:	7019      	strb	r1, [r3, #0]
 80038b2:	4608      	mov	r0, r1
 80038b4:	bc10      	pop	{r4}
 80038b6:	4770      	bx	lr

080038b8 <__sfputs_r>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	4606      	mov	r6, r0
 80038bc:	460f      	mov	r7, r1
 80038be:	4614      	mov	r4, r2
 80038c0:	18d5      	adds	r5, r2, r3
 80038c2:	42ac      	cmp	r4, r5
 80038c4:	d101      	bne.n	80038ca <__sfputs_r+0x12>
 80038c6:	2000      	movs	r0, #0
 80038c8:	e007      	b.n	80038da <__sfputs_r+0x22>
 80038ca:	463a      	mov	r2, r7
 80038cc:	4630      	mov	r0, r6
 80038ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d2:	f7ff ffdc 	bl	800388e <__sfputc_r>
 80038d6:	1c43      	adds	r3, r0, #1
 80038d8:	d1f3      	bne.n	80038c2 <__sfputs_r+0xa>
 80038da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080038dc <_vfiprintf_r>:
 80038dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	460d      	mov	r5, r1
 80038e2:	4614      	mov	r4, r2
 80038e4:	4698      	mov	r8, r3
 80038e6:	4606      	mov	r6, r0
 80038e8:	b09d      	sub	sp, #116	; 0x74
 80038ea:	b118      	cbz	r0, 80038f4 <_vfiprintf_r+0x18>
 80038ec:	6a03      	ldr	r3, [r0, #32]
 80038ee:	b90b      	cbnz	r3, 80038f4 <_vfiprintf_r+0x18>
 80038f0:	f7ff fcea 	bl	80032c8 <__sinit>
 80038f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038f6:	07d9      	lsls	r1, r3, #31
 80038f8:	d405      	bmi.n	8003906 <_vfiprintf_r+0x2a>
 80038fa:	89ab      	ldrh	r3, [r5, #12]
 80038fc:	059a      	lsls	r2, r3, #22
 80038fe:	d402      	bmi.n	8003906 <_vfiprintf_r+0x2a>
 8003900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003902:	f7ff fdd4 	bl	80034ae <__retarget_lock_acquire_recursive>
 8003906:	89ab      	ldrh	r3, [r5, #12]
 8003908:	071b      	lsls	r3, r3, #28
 800390a:	d501      	bpl.n	8003910 <_vfiprintf_r+0x34>
 800390c:	692b      	ldr	r3, [r5, #16]
 800390e:	b99b      	cbnz	r3, 8003938 <_vfiprintf_r+0x5c>
 8003910:	4629      	mov	r1, r5
 8003912:	4630      	mov	r0, r6
 8003914:	f000 face 	bl	8003eb4 <__swsetup_r>
 8003918:	b170      	cbz	r0, 8003938 <_vfiprintf_r+0x5c>
 800391a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800391c:	07dc      	lsls	r4, r3, #31
 800391e:	d504      	bpl.n	800392a <_vfiprintf_r+0x4e>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	b01d      	add	sp, #116	; 0x74
 8003926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392a:	89ab      	ldrh	r3, [r5, #12]
 800392c:	0598      	lsls	r0, r3, #22
 800392e:	d4f7      	bmi.n	8003920 <_vfiprintf_r+0x44>
 8003930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003932:	f7ff fdbd 	bl	80034b0 <__retarget_lock_release_recursive>
 8003936:	e7f3      	b.n	8003920 <_vfiprintf_r+0x44>
 8003938:	2300      	movs	r3, #0
 800393a:	9309      	str	r3, [sp, #36]	; 0x24
 800393c:	2320      	movs	r3, #32
 800393e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003942:	2330      	movs	r3, #48	; 0x30
 8003944:	f04f 0901 	mov.w	r9, #1
 8003948:	f8cd 800c 	str.w	r8, [sp, #12]
 800394c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003afc <_vfiprintf_r+0x220>
 8003950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003954:	4623      	mov	r3, r4
 8003956:	469a      	mov	sl, r3
 8003958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800395c:	b10a      	cbz	r2, 8003962 <_vfiprintf_r+0x86>
 800395e:	2a25      	cmp	r2, #37	; 0x25
 8003960:	d1f9      	bne.n	8003956 <_vfiprintf_r+0x7a>
 8003962:	ebba 0b04 	subs.w	fp, sl, r4
 8003966:	d00b      	beq.n	8003980 <_vfiprintf_r+0xa4>
 8003968:	465b      	mov	r3, fp
 800396a:	4622      	mov	r2, r4
 800396c:	4629      	mov	r1, r5
 800396e:	4630      	mov	r0, r6
 8003970:	f7ff ffa2 	bl	80038b8 <__sfputs_r>
 8003974:	3001      	adds	r0, #1
 8003976:	f000 80a9 	beq.w	8003acc <_vfiprintf_r+0x1f0>
 800397a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800397c:	445a      	add	r2, fp
 800397e:	9209      	str	r2, [sp, #36]	; 0x24
 8003980:	f89a 3000 	ldrb.w	r3, [sl]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80a1 	beq.w	8003acc <_vfiprintf_r+0x1f0>
 800398a:	2300      	movs	r3, #0
 800398c:	f04f 32ff 	mov.w	r2, #4294967295
 8003990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003994:	f10a 0a01 	add.w	sl, sl, #1
 8003998:	9304      	str	r3, [sp, #16]
 800399a:	9307      	str	r3, [sp, #28]
 800399c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039a0:	931a      	str	r3, [sp, #104]	; 0x68
 80039a2:	4654      	mov	r4, sl
 80039a4:	2205      	movs	r2, #5
 80039a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039aa:	4854      	ldr	r0, [pc, #336]	; (8003afc <_vfiprintf_r+0x220>)
 80039ac:	f000 fb1e 	bl	8003fec <memchr>
 80039b0:	9a04      	ldr	r2, [sp, #16]
 80039b2:	b9d8      	cbnz	r0, 80039ec <_vfiprintf_r+0x110>
 80039b4:	06d1      	lsls	r1, r2, #27
 80039b6:	bf44      	itt	mi
 80039b8:	2320      	movmi	r3, #32
 80039ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039be:	0713      	lsls	r3, r2, #28
 80039c0:	bf44      	itt	mi
 80039c2:	232b      	movmi	r3, #43	; 0x2b
 80039c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039c8:	f89a 3000 	ldrb.w	r3, [sl]
 80039cc:	2b2a      	cmp	r3, #42	; 0x2a
 80039ce:	d015      	beq.n	80039fc <_vfiprintf_r+0x120>
 80039d0:	4654      	mov	r4, sl
 80039d2:	2000      	movs	r0, #0
 80039d4:	f04f 0c0a 	mov.w	ip, #10
 80039d8:	9a07      	ldr	r2, [sp, #28]
 80039da:	4621      	mov	r1, r4
 80039dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039e0:	3b30      	subs	r3, #48	; 0x30
 80039e2:	2b09      	cmp	r3, #9
 80039e4:	d94d      	bls.n	8003a82 <_vfiprintf_r+0x1a6>
 80039e6:	b1b0      	cbz	r0, 8003a16 <_vfiprintf_r+0x13a>
 80039e8:	9207      	str	r2, [sp, #28]
 80039ea:	e014      	b.n	8003a16 <_vfiprintf_r+0x13a>
 80039ec:	eba0 0308 	sub.w	r3, r0, r8
 80039f0:	fa09 f303 	lsl.w	r3, r9, r3
 80039f4:	4313      	orrs	r3, r2
 80039f6:	46a2      	mov	sl, r4
 80039f8:	9304      	str	r3, [sp, #16]
 80039fa:	e7d2      	b.n	80039a2 <_vfiprintf_r+0xc6>
 80039fc:	9b03      	ldr	r3, [sp, #12]
 80039fe:	1d19      	adds	r1, r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	9103      	str	r1, [sp, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bfbb      	ittet	lt
 8003a08:	425b      	neglt	r3, r3
 8003a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a0e:	9307      	strge	r3, [sp, #28]
 8003a10:	9307      	strlt	r3, [sp, #28]
 8003a12:	bfb8      	it	lt
 8003a14:	9204      	strlt	r2, [sp, #16]
 8003a16:	7823      	ldrb	r3, [r4, #0]
 8003a18:	2b2e      	cmp	r3, #46	; 0x2e
 8003a1a:	d10c      	bne.n	8003a36 <_vfiprintf_r+0x15a>
 8003a1c:	7863      	ldrb	r3, [r4, #1]
 8003a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a20:	d134      	bne.n	8003a8c <_vfiprintf_r+0x1b0>
 8003a22:	9b03      	ldr	r3, [sp, #12]
 8003a24:	3402      	adds	r4, #2
 8003a26:	1d1a      	adds	r2, r3, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	9203      	str	r2, [sp, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bfb8      	it	lt
 8003a30:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a34:	9305      	str	r3, [sp, #20]
 8003a36:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b00 <_vfiprintf_r+0x224>
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	7821      	ldrb	r1, [r4, #0]
 8003a40:	f000 fad4 	bl	8003fec <memchr>
 8003a44:	b138      	cbz	r0, 8003a56 <_vfiprintf_r+0x17a>
 8003a46:	2240      	movs	r2, #64	; 0x40
 8003a48:	9b04      	ldr	r3, [sp, #16]
 8003a4a:	eba0 000a 	sub.w	r0, r0, sl
 8003a4e:	4082      	lsls	r2, r0
 8003a50:	4313      	orrs	r3, r2
 8003a52:	3401      	adds	r4, #1
 8003a54:	9304      	str	r3, [sp, #16]
 8003a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a5a:	2206      	movs	r2, #6
 8003a5c:	4829      	ldr	r0, [pc, #164]	; (8003b04 <_vfiprintf_r+0x228>)
 8003a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a62:	f000 fac3 	bl	8003fec <memchr>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d03f      	beq.n	8003aea <_vfiprintf_r+0x20e>
 8003a6a:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <_vfiprintf_r+0x22c>)
 8003a6c:	bb1b      	cbnz	r3, 8003ab6 <_vfiprintf_r+0x1da>
 8003a6e:	9b03      	ldr	r3, [sp, #12]
 8003a70:	3307      	adds	r3, #7
 8003a72:	f023 0307 	bic.w	r3, r3, #7
 8003a76:	3308      	adds	r3, #8
 8003a78:	9303      	str	r3, [sp, #12]
 8003a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7c:	443b      	add	r3, r7
 8003a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a80:	e768      	b.n	8003954 <_vfiprintf_r+0x78>
 8003a82:	460c      	mov	r4, r1
 8003a84:	2001      	movs	r0, #1
 8003a86:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a8a:	e7a6      	b.n	80039da <_vfiprintf_r+0xfe>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f04f 0c0a 	mov.w	ip, #10
 8003a92:	4619      	mov	r1, r3
 8003a94:	3401      	adds	r4, #1
 8003a96:	9305      	str	r3, [sp, #20]
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a9e:	3a30      	subs	r2, #48	; 0x30
 8003aa0:	2a09      	cmp	r2, #9
 8003aa2:	d903      	bls.n	8003aac <_vfiprintf_r+0x1d0>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0c6      	beq.n	8003a36 <_vfiprintf_r+0x15a>
 8003aa8:	9105      	str	r1, [sp, #20]
 8003aaa:	e7c4      	b.n	8003a36 <_vfiprintf_r+0x15a>
 8003aac:	4604      	mov	r4, r0
 8003aae:	2301      	movs	r3, #1
 8003ab0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ab4:	e7f0      	b.n	8003a98 <_vfiprintf_r+0x1bc>
 8003ab6:	ab03      	add	r3, sp, #12
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	462a      	mov	r2, r5
 8003abc:	4630      	mov	r0, r6
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <_vfiprintf_r+0x230>)
 8003ac0:	a904      	add	r1, sp, #16
 8003ac2:	f3af 8000 	nop.w
 8003ac6:	4607      	mov	r7, r0
 8003ac8:	1c78      	adds	r0, r7, #1
 8003aca:	d1d6      	bne.n	8003a7a <_vfiprintf_r+0x19e>
 8003acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ace:	07d9      	lsls	r1, r3, #31
 8003ad0:	d405      	bmi.n	8003ade <_vfiprintf_r+0x202>
 8003ad2:	89ab      	ldrh	r3, [r5, #12]
 8003ad4:	059a      	lsls	r2, r3, #22
 8003ad6:	d402      	bmi.n	8003ade <_vfiprintf_r+0x202>
 8003ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ada:	f7ff fce9 	bl	80034b0 <__retarget_lock_release_recursive>
 8003ade:	89ab      	ldrh	r3, [r5, #12]
 8003ae0:	065b      	lsls	r3, r3, #25
 8003ae2:	f53f af1d 	bmi.w	8003920 <_vfiprintf_r+0x44>
 8003ae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ae8:	e71c      	b.n	8003924 <_vfiprintf_r+0x48>
 8003aea:	ab03      	add	r3, sp, #12
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	462a      	mov	r2, r5
 8003af0:	4630      	mov	r0, r6
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <_vfiprintf_r+0x230>)
 8003af4:	a904      	add	r1, sp, #16
 8003af6:	f000 f87d 	bl	8003bf4 <_printf_i>
 8003afa:	e7e4      	b.n	8003ac6 <_vfiprintf_r+0x1ea>
 8003afc:	080041fd 	.word	0x080041fd
 8003b00:	08004203 	.word	0x08004203
 8003b04:	08004207 	.word	0x08004207
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	080038b9 	.word	0x080038b9

08003b10 <_printf_common>:
 8003b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b14:	4616      	mov	r6, r2
 8003b16:	4699      	mov	r9, r3
 8003b18:	688a      	ldr	r2, [r1, #8]
 8003b1a:	690b      	ldr	r3, [r1, #16]
 8003b1c:	4607      	mov	r7, r0
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	bfb8      	it	lt
 8003b22:	4613      	movlt	r3, r2
 8003b24:	6033      	str	r3, [r6, #0]
 8003b26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b30:	b10a      	cbz	r2, 8003b36 <_printf_common+0x26>
 8003b32:	3301      	adds	r3, #1
 8003b34:	6033      	str	r3, [r6, #0]
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	0699      	lsls	r1, r3, #26
 8003b3a:	bf42      	ittt	mi
 8003b3c:	6833      	ldrmi	r3, [r6, #0]
 8003b3e:	3302      	addmi	r3, #2
 8003b40:	6033      	strmi	r3, [r6, #0]
 8003b42:	6825      	ldr	r5, [r4, #0]
 8003b44:	f015 0506 	ands.w	r5, r5, #6
 8003b48:	d106      	bne.n	8003b58 <_printf_common+0x48>
 8003b4a:	f104 0a19 	add.w	sl, r4, #25
 8003b4e:	68e3      	ldr	r3, [r4, #12]
 8003b50:	6832      	ldr	r2, [r6, #0]
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	42ab      	cmp	r3, r5
 8003b56:	dc2b      	bgt.n	8003bb0 <_printf_common+0xa0>
 8003b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b5c:	1e13      	subs	r3, r2, #0
 8003b5e:	6822      	ldr	r2, [r4, #0]
 8003b60:	bf18      	it	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	0692      	lsls	r2, r2, #26
 8003b66:	d430      	bmi.n	8003bca <_printf_common+0xba>
 8003b68:	4649      	mov	r1, r9
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b70:	47c0      	blx	r8
 8003b72:	3001      	adds	r0, #1
 8003b74:	d023      	beq.n	8003bbe <_printf_common+0xae>
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	6922      	ldr	r2, [r4, #16]
 8003b7a:	f003 0306 	and.w	r3, r3, #6
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	bf14      	ite	ne
 8003b82:	2500      	movne	r5, #0
 8003b84:	6833      	ldreq	r3, [r6, #0]
 8003b86:	f04f 0600 	mov.w	r6, #0
 8003b8a:	bf08      	it	eq
 8003b8c:	68e5      	ldreq	r5, [r4, #12]
 8003b8e:	f104 041a 	add.w	r4, r4, #26
 8003b92:	bf08      	it	eq
 8003b94:	1aed      	subeq	r5, r5, r3
 8003b96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b9a:	bf08      	it	eq
 8003b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	bfc4      	itt	gt
 8003ba4:	1a9b      	subgt	r3, r3, r2
 8003ba6:	18ed      	addgt	r5, r5, r3
 8003ba8:	42b5      	cmp	r5, r6
 8003baa:	d11a      	bne.n	8003be2 <_printf_common+0xd2>
 8003bac:	2000      	movs	r0, #0
 8003bae:	e008      	b.n	8003bc2 <_printf_common+0xb2>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	4652      	mov	r2, sl
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	47c0      	blx	r8
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d103      	bne.n	8003bc6 <_printf_common+0xb6>
 8003bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc6:	3501      	adds	r5, #1
 8003bc8:	e7c1      	b.n	8003b4e <_printf_common+0x3e>
 8003bca:	2030      	movs	r0, #48	; 0x30
 8003bcc:	18e1      	adds	r1, r4, r3
 8003bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bd8:	4422      	add	r2, r4
 8003bda:	3302      	adds	r3, #2
 8003bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003be0:	e7c2      	b.n	8003b68 <_printf_common+0x58>
 8003be2:	2301      	movs	r3, #1
 8003be4:	4622      	mov	r2, r4
 8003be6:	4649      	mov	r1, r9
 8003be8:	4638      	mov	r0, r7
 8003bea:	47c0      	blx	r8
 8003bec:	3001      	adds	r0, #1
 8003bee:	d0e6      	beq.n	8003bbe <_printf_common+0xae>
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7d9      	b.n	8003ba8 <_printf_common+0x98>

08003bf4 <_printf_i>:
 8003bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf8:	7e0f      	ldrb	r7, [r1, #24]
 8003bfa:	4691      	mov	r9, r2
 8003bfc:	2f78      	cmp	r7, #120	; 0x78
 8003bfe:	4680      	mov	r8, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	469a      	mov	sl, r3
 8003c04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c0a:	d807      	bhi.n	8003c1c <_printf_i+0x28>
 8003c0c:	2f62      	cmp	r7, #98	; 0x62
 8003c0e:	d80a      	bhi.n	8003c26 <_printf_i+0x32>
 8003c10:	2f00      	cmp	r7, #0
 8003c12:	f000 80d5 	beq.w	8003dc0 <_printf_i+0x1cc>
 8003c16:	2f58      	cmp	r7, #88	; 0x58
 8003c18:	f000 80c1 	beq.w	8003d9e <_printf_i+0x1aa>
 8003c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c24:	e03a      	b.n	8003c9c <_printf_i+0xa8>
 8003c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c2a:	2b15      	cmp	r3, #21
 8003c2c:	d8f6      	bhi.n	8003c1c <_printf_i+0x28>
 8003c2e:	a101      	add	r1, pc, #4	; (adr r1, 8003c34 <_printf_i+0x40>)
 8003c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c34:	08003c8d 	.word	0x08003c8d
 8003c38:	08003ca1 	.word	0x08003ca1
 8003c3c:	08003c1d 	.word	0x08003c1d
 8003c40:	08003c1d 	.word	0x08003c1d
 8003c44:	08003c1d 	.word	0x08003c1d
 8003c48:	08003c1d 	.word	0x08003c1d
 8003c4c:	08003ca1 	.word	0x08003ca1
 8003c50:	08003c1d 	.word	0x08003c1d
 8003c54:	08003c1d 	.word	0x08003c1d
 8003c58:	08003c1d 	.word	0x08003c1d
 8003c5c:	08003c1d 	.word	0x08003c1d
 8003c60:	08003da7 	.word	0x08003da7
 8003c64:	08003ccd 	.word	0x08003ccd
 8003c68:	08003d61 	.word	0x08003d61
 8003c6c:	08003c1d 	.word	0x08003c1d
 8003c70:	08003c1d 	.word	0x08003c1d
 8003c74:	08003dc9 	.word	0x08003dc9
 8003c78:	08003c1d 	.word	0x08003c1d
 8003c7c:	08003ccd 	.word	0x08003ccd
 8003c80:	08003c1d 	.word	0x08003c1d
 8003c84:	08003c1d 	.word	0x08003c1d
 8003c88:	08003d69 	.word	0x08003d69
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	602a      	str	r2, [r5, #0]
 8003c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0a0      	b.n	8003de2 <_printf_i+0x1ee>
 8003ca0:	6820      	ldr	r0, [r4, #0]
 8003ca2:	682b      	ldr	r3, [r5, #0]
 8003ca4:	0607      	lsls	r7, r0, #24
 8003ca6:	f103 0104 	add.w	r1, r3, #4
 8003caa:	6029      	str	r1, [r5, #0]
 8003cac:	d501      	bpl.n	8003cb2 <_printf_i+0xbe>
 8003cae:	681e      	ldr	r6, [r3, #0]
 8003cb0:	e003      	b.n	8003cba <_printf_i+0xc6>
 8003cb2:	0646      	lsls	r6, r0, #25
 8003cb4:	d5fb      	bpl.n	8003cae <_printf_i+0xba>
 8003cb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003cba:	2e00      	cmp	r6, #0
 8003cbc:	da03      	bge.n	8003cc6 <_printf_i+0xd2>
 8003cbe:	232d      	movs	r3, #45	; 0x2d
 8003cc0:	4276      	negs	r6, r6
 8003cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	4859      	ldr	r0, [pc, #356]	; (8003e30 <_printf_i+0x23c>)
 8003cca:	e012      	b.n	8003cf2 <_printf_i+0xfe>
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	6820      	ldr	r0, [r4, #0]
 8003cd0:	1d19      	adds	r1, r3, #4
 8003cd2:	6029      	str	r1, [r5, #0]
 8003cd4:	0605      	lsls	r5, r0, #24
 8003cd6:	d501      	bpl.n	8003cdc <_printf_i+0xe8>
 8003cd8:	681e      	ldr	r6, [r3, #0]
 8003cda:	e002      	b.n	8003ce2 <_printf_i+0xee>
 8003cdc:	0641      	lsls	r1, r0, #25
 8003cde:	d5fb      	bpl.n	8003cd8 <_printf_i+0xe4>
 8003ce0:	881e      	ldrh	r6, [r3, #0]
 8003ce2:	2f6f      	cmp	r7, #111	; 0x6f
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2308      	moveq	r3, #8
 8003ce8:	230a      	movne	r3, #10
 8003cea:	4851      	ldr	r0, [pc, #324]	; (8003e30 <_printf_i+0x23c>)
 8003cec:	2100      	movs	r1, #0
 8003cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cf2:	6865      	ldr	r5, [r4, #4]
 8003cf4:	2d00      	cmp	r5, #0
 8003cf6:	bfa8      	it	ge
 8003cf8:	6821      	ldrge	r1, [r4, #0]
 8003cfa:	60a5      	str	r5, [r4, #8]
 8003cfc:	bfa4      	itt	ge
 8003cfe:	f021 0104 	bicge.w	r1, r1, #4
 8003d02:	6021      	strge	r1, [r4, #0]
 8003d04:	b90e      	cbnz	r6, 8003d0a <_printf_i+0x116>
 8003d06:	2d00      	cmp	r5, #0
 8003d08:	d04b      	beq.n	8003da2 <_printf_i+0x1ae>
 8003d0a:	4615      	mov	r5, r2
 8003d0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d10:	fb03 6711 	mls	r7, r3, r1, r6
 8003d14:	5dc7      	ldrb	r7, [r0, r7]
 8003d16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d1a:	4637      	mov	r7, r6
 8003d1c:	42bb      	cmp	r3, r7
 8003d1e:	460e      	mov	r6, r1
 8003d20:	d9f4      	bls.n	8003d0c <_printf_i+0x118>
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d10b      	bne.n	8003d3e <_printf_i+0x14a>
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	07de      	lsls	r6, r3, #31
 8003d2a:	d508      	bpl.n	8003d3e <_printf_i+0x14a>
 8003d2c:	6923      	ldr	r3, [r4, #16]
 8003d2e:	6861      	ldr	r1, [r4, #4]
 8003d30:	4299      	cmp	r1, r3
 8003d32:	bfde      	ittt	le
 8003d34:	2330      	movle	r3, #48	; 0x30
 8003d36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d3e:	1b52      	subs	r2, r2, r5
 8003d40:	6122      	str	r2, [r4, #16]
 8003d42:	464b      	mov	r3, r9
 8003d44:	4621      	mov	r1, r4
 8003d46:	4640      	mov	r0, r8
 8003d48:	f8cd a000 	str.w	sl, [sp]
 8003d4c:	aa03      	add	r2, sp, #12
 8003d4e:	f7ff fedf 	bl	8003b10 <_printf_common>
 8003d52:	3001      	adds	r0, #1
 8003d54:	d14a      	bne.n	8003dec <_printf_i+0x1f8>
 8003d56:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5a:	b004      	add	sp, #16
 8003d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	f043 0320 	orr.w	r3, r3, #32
 8003d66:	6023      	str	r3, [r4, #0]
 8003d68:	2778      	movs	r7, #120	; 0x78
 8003d6a:	4832      	ldr	r0, [pc, #200]	; (8003e34 <_printf_i+0x240>)
 8003d6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	6829      	ldr	r1, [r5, #0]
 8003d74:	061f      	lsls	r7, r3, #24
 8003d76:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d7a:	d402      	bmi.n	8003d82 <_printf_i+0x18e>
 8003d7c:	065f      	lsls	r7, r3, #25
 8003d7e:	bf48      	it	mi
 8003d80:	b2b6      	uxthmi	r6, r6
 8003d82:	07df      	lsls	r7, r3, #31
 8003d84:	bf48      	it	mi
 8003d86:	f043 0320 	orrmi.w	r3, r3, #32
 8003d8a:	6029      	str	r1, [r5, #0]
 8003d8c:	bf48      	it	mi
 8003d8e:	6023      	strmi	r3, [r4, #0]
 8003d90:	b91e      	cbnz	r6, 8003d9a <_printf_i+0x1a6>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	f023 0320 	bic.w	r3, r3, #32
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	2310      	movs	r3, #16
 8003d9c:	e7a6      	b.n	8003cec <_printf_i+0xf8>
 8003d9e:	4824      	ldr	r0, [pc, #144]	; (8003e30 <_printf_i+0x23c>)
 8003da0:	e7e4      	b.n	8003d6c <_printf_i+0x178>
 8003da2:	4615      	mov	r5, r2
 8003da4:	e7bd      	b.n	8003d22 <_printf_i+0x12e>
 8003da6:	682b      	ldr	r3, [r5, #0]
 8003da8:	6826      	ldr	r6, [r4, #0]
 8003daa:	1d18      	adds	r0, r3, #4
 8003dac:	6961      	ldr	r1, [r4, #20]
 8003dae:	6028      	str	r0, [r5, #0]
 8003db0:	0635      	lsls	r5, r6, #24
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	d501      	bpl.n	8003dba <_printf_i+0x1c6>
 8003db6:	6019      	str	r1, [r3, #0]
 8003db8:	e002      	b.n	8003dc0 <_printf_i+0x1cc>
 8003dba:	0670      	lsls	r0, r6, #25
 8003dbc:	d5fb      	bpl.n	8003db6 <_printf_i+0x1c2>
 8003dbe:	8019      	strh	r1, [r3, #0]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4615      	mov	r5, r2
 8003dc4:	6123      	str	r3, [r4, #16]
 8003dc6:	e7bc      	b.n	8003d42 <_printf_i+0x14e>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	2100      	movs	r1, #0
 8003dcc:	1d1a      	adds	r2, r3, #4
 8003dce:	602a      	str	r2, [r5, #0]
 8003dd0:	681d      	ldr	r5, [r3, #0]
 8003dd2:	6862      	ldr	r2, [r4, #4]
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	f000 f909 	bl	8003fec <memchr>
 8003dda:	b108      	cbz	r0, 8003de0 <_printf_i+0x1ec>
 8003ddc:	1b40      	subs	r0, r0, r5
 8003dde:	6060      	str	r0, [r4, #4]
 8003de0:	6863      	ldr	r3, [r4, #4]
 8003de2:	6123      	str	r3, [r4, #16]
 8003de4:	2300      	movs	r3, #0
 8003de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dea:	e7aa      	b.n	8003d42 <_printf_i+0x14e>
 8003dec:	462a      	mov	r2, r5
 8003dee:	4649      	mov	r1, r9
 8003df0:	4640      	mov	r0, r8
 8003df2:	6923      	ldr	r3, [r4, #16]
 8003df4:	47d0      	blx	sl
 8003df6:	3001      	adds	r0, #1
 8003df8:	d0ad      	beq.n	8003d56 <_printf_i+0x162>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	079b      	lsls	r3, r3, #30
 8003dfe:	d413      	bmi.n	8003e28 <_printf_i+0x234>
 8003e00:	68e0      	ldr	r0, [r4, #12]
 8003e02:	9b03      	ldr	r3, [sp, #12]
 8003e04:	4298      	cmp	r0, r3
 8003e06:	bfb8      	it	lt
 8003e08:	4618      	movlt	r0, r3
 8003e0a:	e7a6      	b.n	8003d5a <_printf_i+0x166>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	4632      	mov	r2, r6
 8003e10:	4649      	mov	r1, r9
 8003e12:	4640      	mov	r0, r8
 8003e14:	47d0      	blx	sl
 8003e16:	3001      	adds	r0, #1
 8003e18:	d09d      	beq.n	8003d56 <_printf_i+0x162>
 8003e1a:	3501      	adds	r5, #1
 8003e1c:	68e3      	ldr	r3, [r4, #12]
 8003e1e:	9903      	ldr	r1, [sp, #12]
 8003e20:	1a5b      	subs	r3, r3, r1
 8003e22:	42ab      	cmp	r3, r5
 8003e24:	dcf2      	bgt.n	8003e0c <_printf_i+0x218>
 8003e26:	e7eb      	b.n	8003e00 <_printf_i+0x20c>
 8003e28:	2500      	movs	r5, #0
 8003e2a:	f104 0619 	add.w	r6, r4, #25
 8003e2e:	e7f5      	b.n	8003e1c <_printf_i+0x228>
 8003e30:	0800420e 	.word	0x0800420e
 8003e34:	0800421f 	.word	0x0800421f

08003e38 <__swbuf_r>:
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3a:	460e      	mov	r6, r1
 8003e3c:	4614      	mov	r4, r2
 8003e3e:	4605      	mov	r5, r0
 8003e40:	b118      	cbz	r0, 8003e4a <__swbuf_r+0x12>
 8003e42:	6a03      	ldr	r3, [r0, #32]
 8003e44:	b90b      	cbnz	r3, 8003e4a <__swbuf_r+0x12>
 8003e46:	f7ff fa3f 	bl	80032c8 <__sinit>
 8003e4a:	69a3      	ldr	r3, [r4, #24]
 8003e4c:	60a3      	str	r3, [r4, #8]
 8003e4e:	89a3      	ldrh	r3, [r4, #12]
 8003e50:	071a      	lsls	r2, r3, #28
 8003e52:	d525      	bpl.n	8003ea0 <__swbuf_r+0x68>
 8003e54:	6923      	ldr	r3, [r4, #16]
 8003e56:	b31b      	cbz	r3, 8003ea0 <__swbuf_r+0x68>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	6922      	ldr	r2, [r4, #16]
 8003e5c:	b2f6      	uxtb	r6, r6
 8003e5e:	1a98      	subs	r0, r3, r2
 8003e60:	6963      	ldr	r3, [r4, #20]
 8003e62:	4637      	mov	r7, r6
 8003e64:	4283      	cmp	r3, r0
 8003e66:	dc04      	bgt.n	8003e72 <__swbuf_r+0x3a>
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f7ff fcbe 	bl	80037ec <_fflush_r>
 8003e70:	b9e0      	cbnz	r0, 8003eac <__swbuf_r+0x74>
 8003e72:	68a3      	ldr	r3, [r4, #8]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	60a3      	str	r3, [r4, #8]
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	6022      	str	r2, [r4, #0]
 8003e7e:	701e      	strb	r6, [r3, #0]
 8003e80:	6962      	ldr	r2, [r4, #20]
 8003e82:	1c43      	adds	r3, r0, #1
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d004      	beq.n	8003e92 <__swbuf_r+0x5a>
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	07db      	lsls	r3, r3, #31
 8003e8c:	d506      	bpl.n	8003e9c <__swbuf_r+0x64>
 8003e8e:	2e0a      	cmp	r6, #10
 8003e90:	d104      	bne.n	8003e9c <__swbuf_r+0x64>
 8003e92:	4621      	mov	r1, r4
 8003e94:	4628      	mov	r0, r5
 8003e96:	f7ff fca9 	bl	80037ec <_fflush_r>
 8003e9a:	b938      	cbnz	r0, 8003eac <__swbuf_r+0x74>
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f000 f806 	bl	8003eb4 <__swsetup_r>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d0d5      	beq.n	8003e58 <__swbuf_r+0x20>
 8003eac:	f04f 37ff 	mov.w	r7, #4294967295
 8003eb0:	e7f4      	b.n	8003e9c <__swbuf_r+0x64>
	...

08003eb4 <__swsetup_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4b2a      	ldr	r3, [pc, #168]	; (8003f60 <__swsetup_r+0xac>)
 8003eb8:	4605      	mov	r5, r0
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	b118      	cbz	r0, 8003ec8 <__swsetup_r+0x14>
 8003ec0:	6a03      	ldr	r3, [r0, #32]
 8003ec2:	b90b      	cbnz	r3, 8003ec8 <__swsetup_r+0x14>
 8003ec4:	f7ff fa00 	bl	80032c8 <__sinit>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ece:	0718      	lsls	r0, r3, #28
 8003ed0:	d422      	bmi.n	8003f18 <__swsetup_r+0x64>
 8003ed2:	06d9      	lsls	r1, r3, #27
 8003ed4:	d407      	bmi.n	8003ee6 <__swsetup_r+0x32>
 8003ed6:	2309      	movs	r3, #9
 8003ed8:	602b      	str	r3, [r5, #0]
 8003eda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ede:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee2:	81a3      	strh	r3, [r4, #12]
 8003ee4:	e034      	b.n	8003f50 <__swsetup_r+0x9c>
 8003ee6:	0758      	lsls	r0, r3, #29
 8003ee8:	d512      	bpl.n	8003f10 <__swsetup_r+0x5c>
 8003eea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eec:	b141      	cbz	r1, 8003f00 <__swsetup_r+0x4c>
 8003eee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ef2:	4299      	cmp	r1, r3
 8003ef4:	d002      	beq.n	8003efc <__swsetup_r+0x48>
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7ff fafa 	bl	80034f0 <_free_r>
 8003efc:	2300      	movs	r3, #0
 8003efe:	6363      	str	r3, [r4, #52]	; 0x34
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	6063      	str	r3, [r4, #4]
 8003f0c:	6923      	ldr	r3, [r4, #16]
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	f043 0308 	orr.w	r3, r3, #8
 8003f16:	81a3      	strh	r3, [r4, #12]
 8003f18:	6923      	ldr	r3, [r4, #16]
 8003f1a:	b94b      	cbnz	r3, 8003f30 <__swsetup_r+0x7c>
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f26:	d003      	beq.n	8003f30 <__swsetup_r+0x7c>
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f891 	bl	8004052 <__smakebuf_r>
 8003f30:	89a0      	ldrh	r0, [r4, #12]
 8003f32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f36:	f010 0301 	ands.w	r3, r0, #1
 8003f3a:	d00a      	beq.n	8003f52 <__swsetup_r+0x9e>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60a3      	str	r3, [r4, #8]
 8003f40:	6963      	ldr	r3, [r4, #20]
 8003f42:	425b      	negs	r3, r3
 8003f44:	61a3      	str	r3, [r4, #24]
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	b943      	cbnz	r3, 8003f5c <__swsetup_r+0xa8>
 8003f4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f4e:	d1c4      	bne.n	8003eda <__swsetup_r+0x26>
 8003f50:	bd38      	pop	{r3, r4, r5, pc}
 8003f52:	0781      	lsls	r1, r0, #30
 8003f54:	bf58      	it	pl
 8003f56:	6963      	ldrpl	r3, [r4, #20]
 8003f58:	60a3      	str	r3, [r4, #8]
 8003f5a:	e7f4      	b.n	8003f46 <__swsetup_r+0x92>
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	e7f7      	b.n	8003f50 <__swsetup_r+0x9c>
 8003f60:	20000070 	.word	0x20000070

08003f64 <_raise_r>:
 8003f64:	291f      	cmp	r1, #31
 8003f66:	b538      	push	{r3, r4, r5, lr}
 8003f68:	4604      	mov	r4, r0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	d904      	bls.n	8003f78 <_raise_r+0x14>
 8003f6e:	2316      	movs	r3, #22
 8003f70:	6003      	str	r3, [r0, #0]
 8003f72:	f04f 30ff 	mov.w	r0, #4294967295
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003f7a:	b112      	cbz	r2, 8003f82 <_raise_r+0x1e>
 8003f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003f80:	b94b      	cbnz	r3, 8003f96 <_raise_r+0x32>
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 f830 	bl	8003fe8 <_getpid_r>
 8003f88:	462a      	mov	r2, r5
 8003f8a:	4601      	mov	r1, r0
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f92:	f000 b817 	b.w	8003fc4 <_kill_r>
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d00a      	beq.n	8003fb0 <_raise_r+0x4c>
 8003f9a:	1c59      	adds	r1, r3, #1
 8003f9c:	d103      	bne.n	8003fa6 <_raise_r+0x42>
 8003f9e:	2316      	movs	r3, #22
 8003fa0:	6003      	str	r3, [r0, #0]
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	e7e7      	b.n	8003f76 <_raise_r+0x12>
 8003fa6:	2400      	movs	r4, #0
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003fae:	4798      	blx	r3
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e7e0      	b.n	8003f76 <_raise_r+0x12>

08003fb4 <raise>:
 8003fb4:	4b02      	ldr	r3, [pc, #8]	; (8003fc0 <raise+0xc>)
 8003fb6:	4601      	mov	r1, r0
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	f7ff bfd3 	b.w	8003f64 <_raise_r>
 8003fbe:	bf00      	nop
 8003fc0:	20000070 	.word	0x20000070

08003fc4 <_kill_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	4d06      	ldr	r5, [pc, #24]	; (8003fe4 <_kill_r+0x20>)
 8003fca:	4604      	mov	r4, r0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	4611      	mov	r1, r2
 8003fd0:	602b      	str	r3, [r5, #0]
 8003fd2:	f7fc fd54 	bl	8000a7e <_kill>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	d102      	bne.n	8003fe0 <_kill_r+0x1c>
 8003fda:	682b      	ldr	r3, [r5, #0]
 8003fdc:	b103      	cbz	r3, 8003fe0 <_kill_r+0x1c>
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	bd38      	pop	{r3, r4, r5, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000318 	.word	0x20000318

08003fe8 <_getpid_r>:
 8003fe8:	f7fc bd42 	b.w	8000a70 <_getpid>

08003fec <memchr>:
 8003fec:	4603      	mov	r3, r0
 8003fee:	b510      	push	{r4, lr}
 8003ff0:	b2c9      	uxtb	r1, r1
 8003ff2:	4402      	add	r2, r0
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	d101      	bne.n	8003ffe <memchr+0x12>
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	e003      	b.n	8004006 <memchr+0x1a>
 8003ffe:	7804      	ldrb	r4, [r0, #0]
 8004000:	3301      	adds	r3, #1
 8004002:	428c      	cmp	r4, r1
 8004004:	d1f6      	bne.n	8003ff4 <memchr+0x8>
 8004006:	bd10      	pop	{r4, pc}

08004008 <__swhatbuf_r>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	460c      	mov	r4, r1
 800400c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004010:	4615      	mov	r5, r2
 8004012:	2900      	cmp	r1, #0
 8004014:	461e      	mov	r6, r3
 8004016:	b096      	sub	sp, #88	; 0x58
 8004018:	da0c      	bge.n	8004034 <__swhatbuf_r+0x2c>
 800401a:	89a3      	ldrh	r3, [r4, #12]
 800401c:	2100      	movs	r1, #0
 800401e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004022:	bf0c      	ite	eq
 8004024:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004028:	2340      	movne	r3, #64	; 0x40
 800402a:	2000      	movs	r0, #0
 800402c:	6031      	str	r1, [r6, #0]
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	b016      	add	sp, #88	; 0x58
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	466a      	mov	r2, sp
 8004036:	f000 f849 	bl	80040cc <_fstat_r>
 800403a:	2800      	cmp	r0, #0
 800403c:	dbed      	blt.n	800401a <__swhatbuf_r+0x12>
 800403e:	9901      	ldr	r1, [sp, #4]
 8004040:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004044:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004048:	4259      	negs	r1, r3
 800404a:	4159      	adcs	r1, r3
 800404c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004050:	e7eb      	b.n	800402a <__swhatbuf_r+0x22>

08004052 <__smakebuf_r>:
 8004052:	898b      	ldrh	r3, [r1, #12]
 8004054:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004056:	079d      	lsls	r5, r3, #30
 8004058:	4606      	mov	r6, r0
 800405a:	460c      	mov	r4, r1
 800405c:	d507      	bpl.n	800406e <__smakebuf_r+0x1c>
 800405e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004062:	6023      	str	r3, [r4, #0]
 8004064:	6123      	str	r3, [r4, #16]
 8004066:	2301      	movs	r3, #1
 8004068:	6163      	str	r3, [r4, #20]
 800406a:	b002      	add	sp, #8
 800406c:	bd70      	pop	{r4, r5, r6, pc}
 800406e:	466a      	mov	r2, sp
 8004070:	ab01      	add	r3, sp, #4
 8004072:	f7ff ffc9 	bl	8004008 <__swhatbuf_r>
 8004076:	9900      	ldr	r1, [sp, #0]
 8004078:	4605      	mov	r5, r0
 800407a:	4630      	mov	r0, r6
 800407c:	f7ff faa8 	bl	80035d0 <_malloc_r>
 8004080:	b948      	cbnz	r0, 8004096 <__smakebuf_r+0x44>
 8004082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004086:	059a      	lsls	r2, r3, #22
 8004088:	d4ef      	bmi.n	800406a <__smakebuf_r+0x18>
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	f043 0302 	orr.w	r3, r3, #2
 8004092:	81a3      	strh	r3, [r4, #12]
 8004094:	e7e3      	b.n	800405e <__smakebuf_r+0xc>
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	6020      	str	r0, [r4, #0]
 800409a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409e:	81a3      	strh	r3, [r4, #12]
 80040a0:	9b00      	ldr	r3, [sp, #0]
 80040a2:	6120      	str	r0, [r4, #16]
 80040a4:	6163      	str	r3, [r4, #20]
 80040a6:	9b01      	ldr	r3, [sp, #4]
 80040a8:	b15b      	cbz	r3, 80040c2 <__smakebuf_r+0x70>
 80040aa:	4630      	mov	r0, r6
 80040ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040b0:	f000 f81e 	bl	80040f0 <_isatty_r>
 80040b4:	b128      	cbz	r0, 80040c2 <__smakebuf_r+0x70>
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	f023 0303 	bic.w	r3, r3, #3
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	81a3      	strh	r3, [r4, #12]
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	431d      	orrs	r5, r3
 80040c6:	81a5      	strh	r5, [r4, #12]
 80040c8:	e7cf      	b.n	800406a <__smakebuf_r+0x18>
	...

080040cc <_fstat_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	2300      	movs	r3, #0
 80040d0:	4d06      	ldr	r5, [pc, #24]	; (80040ec <_fstat_r+0x20>)
 80040d2:	4604      	mov	r4, r0
 80040d4:	4608      	mov	r0, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	602b      	str	r3, [r5, #0]
 80040da:	f7fc fd2e 	bl	8000b3a <_fstat>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	d102      	bne.n	80040e8 <_fstat_r+0x1c>
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	b103      	cbz	r3, 80040e8 <_fstat_r+0x1c>
 80040e6:	6023      	str	r3, [r4, #0]
 80040e8:	bd38      	pop	{r3, r4, r5, pc}
 80040ea:	bf00      	nop
 80040ec:	20000318 	.word	0x20000318

080040f0 <_isatty_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	2300      	movs	r3, #0
 80040f4:	4d05      	ldr	r5, [pc, #20]	; (800410c <_isatty_r+0x1c>)
 80040f6:	4604      	mov	r4, r0
 80040f8:	4608      	mov	r0, r1
 80040fa:	602b      	str	r3, [r5, #0]
 80040fc:	f7fc fd2c 	bl	8000b58 <_isatty>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_isatty_r+0x1a>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_isatty_r+0x1a>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	20000318 	.word	0x20000318

08004110 <_init>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr

0800411c <_fini>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr
