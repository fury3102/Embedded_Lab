
lab5_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800ab14  0800ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab9c  0800ab9c  00020320  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab9c  0800ab9c  00020320  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab9c  0800ab9c  00020320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab9c  0800ab9c  0001ab9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aba0  0800aba0  0001aba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000320  20000000  0800aba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000320  0800aec4  00020320  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  0800aec4  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020349  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a3b  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c9  00000000  00000000  00034dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00037490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c87  00000000  00000000  000384a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d96  00000000  00000000  0003912f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000133cb  00000000  00000000  00051ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ddb8  00000000  00000000  00065290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004994  00000000  00000000  000f3048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f79dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000320 	.word	0x20000320
 8000128:	00000000 	.word	0x00000000
 800012c:	0800aafc 	.word	0x0800aafc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000324 	.word	0x20000324
 8000148:	0800aafc 	.word	0x0800aafc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fccf 	bl	8000af4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f931 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa23 	bl	80005a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 f9f7 	bl	8000550 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8000162:	f000 f971 	bl	8000448 <MX_CAN_Init>
  MX_I2C1_Init();
 8000166:	f000 f9c5 	bl	80004f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  Lsensor->I2cHandle = &hi2c1;
 800016a:	4b85      	ldr	r3, [pc, #532]	; (8000380 <main+0x234>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a85      	ldr	r2, [pc, #532]	; (8000384 <main+0x238>)
 8000170:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Lsensor->I2cDevAddr = 0x30;
 8000174:	4b82      	ldr	r3, [pc, #520]	; (8000380 <main+0x234>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2230      	movs	r2, #48	; 0x30
 800017a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  Rsensor->I2cHandle = &hi2c1;
 800017e:	4b82      	ldr	r3, [pc, #520]	; (8000388 <main+0x23c>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4a80      	ldr	r2, [pc, #512]	; (8000384 <main+0x238>)
 8000184:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Rsensor->I2cDevAddr = 0x31;
 8000188:	4b7f      	ldr	r3, [pc, #508]	; (8000388 <main+0x23c>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2231      	movs	r2, #49	; 0x31
 800018e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000192:	2201      	movs	r2, #1
 8000194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000198:	487c      	ldr	r0, [pc, #496]	; (800038c <main+0x240>)
 800019a:	f001 fd09 	bl	8001bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a4:	487a      	ldr	r0, [pc, #488]	; (8000390 <main+0x244>)
 80001a6:	f001 fd03 	bl	8001bb0 <HAL_GPIO_WritePin>
//------------------------------------------
  	  	VL53L0X_WaitDeviceBooted(Lsensor);
 80001aa:	4b75      	ldr	r3, [pc, #468]	; (8000380 <main+0x234>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4618      	mov	r0, r3
 80001b0:	f005 faf6 	bl	80057a0 <VL53L0X_WaitDeviceBooted>
  	  	VL53L0X_DataInit(Lsensor);
 80001b4:	4b72      	ldr	r3, [pc, #456]	; (8000380 <main+0x234>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4618      	mov	r0, r3
 80001ba:	f005 f80b 	bl	80051d4 <VL53L0X_DataInit>
  	  	VL53L0X_StaticInit(Lsensor);
 80001be:	4b70      	ldr	r3, [pc, #448]	; (8000380 <main+0x234>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f005 f96a 	bl	800549c <VL53L0X_StaticInit>
  	  	VL53L0X_PerformRefCalibration(Lsensor, &VhvSettings, &PhaseCal);
 80001c8:	4b6d      	ldr	r3, [pc, #436]	; (8000380 <main+0x234>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	1c7a      	adds	r2, r7, #1
 80001ce:	1cb9      	adds	r1, r7, #2
 80001d0:	4618      	mov	r0, r3
 80001d2:	f005 ffff 	bl	80061d4 <VL53L0X_PerformRefCalibration>
   	   	VL53L0X_PerformRefSpadManagement(Lsensor, &refSpadCount, &isApertureSpads);
 80001d6:	4b6a      	ldr	r3, [pc, #424]	; (8000380 <main+0x234>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	1cfa      	adds	r2, r7, #3
 80001dc:	1d39      	adds	r1, r7, #4
 80001de:	4618      	mov	r0, r3
 80001e0:	f006 fc84 	bl	8006aec <VL53L0X_PerformRefSpadManagement>
   	   	VL53L0X_SetDeviceMode(Lsensor, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80001e4:	4b66      	ldr	r3, [pc, #408]	; (8000380 <main+0x234>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f005 fb76 	bl	80058dc <VL53L0X_SetDeviceMode>

   // Enable/Disable Sigma and Signal check
    	VL53L0X_SetLimitCheckEnable(Lsensor, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80001f0:	4b63      	ldr	r3, [pc, #396]	; (8000380 <main+0x234>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2201      	movs	r2, #1
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f005 fde7 	bl	8005dcc <VL53L0X_SetLimitCheckEnable>
     	VL53L0X_SetLimitCheckEnable(Lsensor, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80001fe:	4b60      	ldr	r3, [pc, #384]	; (8000380 <main+0x234>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2201      	movs	r2, #1
 8000204:	2101      	movs	r1, #1
 8000206:	4618      	mov	r0, r3
 8000208:	f005 fde0 	bl	8005dcc <VL53L0X_SetLimitCheckEnable>
     	VL53L0X_SetLimitCheckValue(Lsensor, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800020c:	4b5c      	ldr	r3, [pc, #368]	; (8000380 <main+0x234>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f641 1299 	movw	r2, #6553	; 0x1999
 8000214:	2101      	movs	r1, #1
 8000216:	4618      	mov	r0, r3
 8000218:	f005 fe86 	bl	8005f28 <VL53L0X_SetLimitCheckValue>
     	VL53L0X_SetLimitCheckValue(Lsensor, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800021c:	4b58      	ldr	r3, [pc, #352]	; (8000380 <main+0x234>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f005 fe7e 	bl	8005f28 <VL53L0X_SetLimitCheckValue>
     	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Lsensor, 33000);
 800022c:	4b54      	ldr	r3, [pc, #336]	; (8000380 <main+0x234>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000234:	4618      	mov	r0, r3
 8000236:	f005 fbae 	bl	8005996 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
     	VL53L0X_SetVcselPulsePeriod(Lsensor, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800023a:	4b51      	ldr	r3, [pc, #324]	; (8000380 <main+0x234>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2212      	movs	r2, #18
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f005 fbcd 	bl	80059e2 <VL53L0X_SetVcselPulsePeriod>
     	VL53L0X_SetVcselPulsePeriod(Lsensor, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000248:	4b4d      	ldr	r3, [pc, #308]	; (8000380 <main+0x234>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	220e      	movs	r2, #14
 800024e:	2101      	movs	r1, #1
 8000250:	4618      	mov	r0, r3
 8000252:	f005 fbc6 	bl	80059e2 <VL53L0X_SetVcselPulsePeriod>

//-----------------------------------------------
     	VL53L0X_WaitDeviceBooted(Rsensor);
 8000256:	4b4c      	ldr	r3, [pc, #304]	; (8000388 <main+0x23c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4618      	mov	r0, r3
 800025c:	f005 faa0 	bl	80057a0 <VL53L0X_WaitDeviceBooted>
     	VL53L0X_DataInit(Rsensor);
 8000260:	4b49      	ldr	r3, [pc, #292]	; (8000388 <main+0x23c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4618      	mov	r0, r3
 8000266:	f004 ffb5 	bl	80051d4 <VL53L0X_DataInit>
     	VL53L0X_StaticInit(Rsensor);
 800026a:	4b47      	ldr	r3, [pc, #284]	; (8000388 <main+0x23c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4618      	mov	r0, r3
 8000270:	f005 f914 	bl	800549c <VL53L0X_StaticInit>
     	VL53L0X_PerformRefCalibration(Rsensor, &VhvSettings, &PhaseCal);
 8000274:	4b44      	ldr	r3, [pc, #272]	; (8000388 <main+0x23c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	1c7a      	adds	r2, r7, #1
 800027a:	1cb9      	adds	r1, r7, #2
 800027c:	4618      	mov	r0, r3
 800027e:	f005 ffa9 	bl	80061d4 <VL53L0X_PerformRefCalibration>
     	VL53L0X_PerformRefSpadManagement(Rsensor, &refSpadCount, &isApertureSpads);
 8000282:	4b41      	ldr	r3, [pc, #260]	; (8000388 <main+0x23c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	1cfa      	adds	r2, r7, #3
 8000288:	1d39      	adds	r1, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f006 fc2e 	bl	8006aec <VL53L0X_PerformRefSpadManagement>
     	VL53L0X_SetDeviceMode(Rsensor, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000290:	4b3d      	ldr	r3, [pc, #244]	; (8000388 <main+0x23c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f005 fb20 	bl	80058dc <VL53L0X_SetDeviceMode>

     // Enable/Disable Sigma and Signal check
     	VL53L0X_SetLimitCheckEnable(Rsensor, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800029c:	4b3a      	ldr	r3, [pc, #232]	; (8000388 <main+0x23c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2201      	movs	r2, #1
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f005 fd91 	bl	8005dcc <VL53L0X_SetLimitCheckEnable>
     	VL53L0X_SetLimitCheckEnable(Rsensor, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80002aa:	4b37      	ldr	r3, [pc, #220]	; (8000388 <main+0x23c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2201      	movs	r2, #1
 80002b0:	2101      	movs	r1, #1
 80002b2:	4618      	mov	r0, r3
 80002b4:	f005 fd8a 	bl	8005dcc <VL53L0X_SetLimitCheckEnable>
     	VL53L0X_SetLimitCheckValue(Rsensor, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80002b8:	4b33      	ldr	r3, [pc, #204]	; (8000388 <main+0x23c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f641 1299 	movw	r2, #6553	; 0x1999
 80002c0:	2101      	movs	r1, #1
 80002c2:	4618      	mov	r0, r3
 80002c4:	f005 fe30 	bl	8005f28 <VL53L0X_SetLimitCheckValue>
     	VL53L0X_SetLimitCheckValue(Rsensor, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80002c8:	4b2f      	ldr	r3, [pc, #188]	; (8000388 <main+0x23c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f005 fe28 	bl	8005f28 <VL53L0X_SetLimitCheckValue>
     	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&R_sensor, 33000);
 80002d8:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80002dc:	482d      	ldr	r0, [pc, #180]	; (8000394 <main+0x248>)
 80002de:	f005 fb5a 	bl	8005996 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
     	VL53L0X_SetVcselPulsePeriod(Rsensor, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80002e2:	4b29      	ldr	r3, [pc, #164]	; (8000388 <main+0x23c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2212      	movs	r2, #18
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f005 fb79 	bl	80059e2 <VL53L0X_SetVcselPulsePeriod>
     	VL53L0X_SetVcselPulsePeriod(Rsensor, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <main+0x23c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	220e      	movs	r2, #14
 80002f6:	2101      	movs	r1, #1
 80002f8:	4618      	mov	r0, r3
 80002fa:	f005 fb72 	bl	80059e2 <VL53L0X_SetVcselPulsePeriod>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  VL53L0X_PerformSingleRangingMeasurement(Lsensor, &L_measurement);
 80002fe:	4b20      	ldr	r3, [pc, #128]	; (8000380 <main+0x234>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4925      	ldr	r1, [pc, #148]	; (8000398 <main+0x24c>)
 8000304:	4618      	mov	r0, r3
 8000306:	f006 fa07 	bl	8006718 <VL53L0X_PerformSingleRangingMeasurement>
		  VL53L0X_PerformSingleRangingMeasurement(Rsensor, &R_measurement);
 800030a:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <main+0x23c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4923      	ldr	r1, [pc, #140]	; (800039c <main+0x250>)
 8000310:	4618      	mov	r0, r3
 8000312:	f006 fa01 	bl	8006718 <VL53L0X_PerformSingleRangingMeasurement>
		  MessageLen = sprintf((char*)Message, "Ldistance: %i\n\r", L_measurement.RangeMilliMeter);
 8000316:	4b20      	ldr	r3, [pc, #128]	; (8000398 <main+0x24c>)
 8000318:	891b      	ldrh	r3, [r3, #8]
 800031a:	461a      	mov	r2, r3
 800031c:	4920      	ldr	r1, [pc, #128]	; (80003a0 <main+0x254>)
 800031e:	4821      	ldr	r0, [pc, #132]	; (80003a4 <main+0x258>)
 8000320:	f009 ff32 	bl	800a188 <siprintf>
 8000324:	4603      	mov	r3, r0
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <main+0x25c>)
 800032a:	701a      	strb	r2, [r3, #0]
		  MessageLen = sprintf((char*)Message, "Rdistance: %i\n\r", R_measurement.RangeMilliMeter);
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <main+0x250>)
 800032e:	891b      	ldrh	r3, [r3, #8]
 8000330:	461a      	mov	r2, r3
 8000332:	491e      	ldr	r1, [pc, #120]	; (80003ac <main+0x260>)
 8000334:	481b      	ldr	r0, [pc, #108]	; (80003a4 <main+0x258>)
 8000336:	f009 ff27 	bl	800a188 <siprintf>
 800033a:	4603      	mov	r3, r0
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <main+0x25c>)
 8000340:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <main+0x25c>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	b29a      	uxth	r2, r3
 8000348:	2364      	movs	r3, #100	; 0x64
 800034a:	4916      	ldr	r1, [pc, #88]	; (80003a4 <main+0x258>)
 800034c:	4818      	ldr	r0, [pc, #96]	; (80003b0 <main+0x264>)
 800034e:	f004 fdad 	bl	8004eac <HAL_UART_Transmit>
		  LsensorValue = (uint8_t)L_measurement.RangeMilliMeter;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <main+0x24c>)
 8000354:	891b      	ldrh	r3, [r3, #8]
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <main+0x268>)
 800035a:	701a      	strb	r2, [r3, #0]
		  RsensorValue = (uint8_t)R_measurement.RangeMilliMeter;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <main+0x250>)
 800035e:	891b      	ldrh	r3, [r3, #8]
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <main+0x26c>)
 8000364:	701a      	strb	r2, [r3, #0]
		  sendCanData(LsensorValue, RsensorValue);
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <main+0x268>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	4a13      	ldr	r2, [pc, #76]	; (80003b8 <main+0x26c>)
 800036c:	7812      	ldrb	r2, [r2, #0]
 800036e:	4611      	mov	r1, r2
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f9ad 	bl	80006d0 <sendCanData>
		  HAL_Delay(1000);
 8000376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037a:	f000 fc1d 	bl	8000bb8 <HAL_Delay>
	  VL53L0X_PerformSingleRangingMeasurement(Lsensor, &L_measurement);
 800037e:	e7be      	b.n	80002fe <main+0x1b2>
 8000380:	20000000 	.word	0x20000000
 8000384:	20000364 	.word	0x20000364
 8000388:	20000004 	.word	0x20000004
 800038c:	40011000 	.word	0x40011000
 8000390:	40010c00 	.word	0x40010c00
 8000394:	200005d4 	.word	0x200005d4
 8000398:	20000764 	.word	0x20000764
 800039c:	20000780 	.word	0x20000780
 80003a0:	0800ab14 	.word	0x0800ab14
 80003a4:	20000400 	.word	0x20000400
 80003a8:	20000440 	.word	0x20000440
 80003ac:	0800ab24 	.word	0x0800ab24
 80003b0:	200003b8 	.word	0x200003b8
 80003b4:	20000441 	.word	0x20000441
 80003b8:	20000442 	.word	0x20000442

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b090      	sub	sp, #64	; 0x40
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0318 	add.w	r3, r7, #24
 80003c6:	2228      	movs	r2, #40	; 0x28
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f009 fefc 	bl	800a1c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003de:	2301      	movs	r3, #1
 80003e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ec:	2301      	movs	r3, #1
 80003ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f0:	2302      	movs	r3, #2
 80003f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000400:	f107 0318 	add.w	r3, r7, #24
 8000404:	4618      	mov	r0, r3
 8000406:	f004 f8f1 	bl	80045ec <HAL_RCC_OscConfig>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000410:	f000 f9a0 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000414:	230f      	movs	r3, #15
 8000416:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000418:	2302      	movs	r3, #2
 800041a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2102      	movs	r1, #2
 800042e:	4618      	mov	r0, r3
 8000430:	f004 fb5e 	bl	8004af0 <HAL_RCC_ClockConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800043a:	f000 f98b 	bl	8000754 <Error_Handler>
  }
}
 800043e:	bf00      	nop
 8000440:	3740      	adds	r7, #64	; 0x40
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	; 0x28
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800044e:	4b27      	ldr	r3, [pc, #156]	; (80004ec <MX_CAN_Init+0xa4>)
 8000450:	4a27      	ldr	r2, [pc, #156]	; (80004f0 <MX_CAN_Init+0xa8>)
 8000452:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000454:	4b25      	ldr	r3, [pc, #148]	; (80004ec <MX_CAN_Init+0xa4>)
 8000456:	2204      	movs	r2, #4
 8000458:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800045a:	4b24      	ldr	r3, [pc, #144]	; (80004ec <MX_CAN_Init+0xa4>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000460:	4b22      	ldr	r3, [pc, #136]	; (80004ec <MX_CAN_Init+0xa4>)
 8000462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000466:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <MX_CAN_Init+0xa4>)
 800046a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800046e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <MX_CAN_Init+0xa4>)
 8000472:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000476:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <MX_CAN_Init+0xa4>)
 800047a:	2200      	movs	r2, #0
 800047c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800047e:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_CAN_Init+0xa4>)
 8000480:	2200      	movs	r2, #0
 8000482:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000484:	4b19      	ldr	r3, [pc, #100]	; (80004ec <MX_CAN_Init+0xa4>)
 8000486:	2200      	movs	r2, #0
 8000488:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_CAN_Init+0xa4>)
 800048c:	2200      	movs	r2, #0
 800048e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <MX_CAN_Init+0xa4>)
 8000492:	2200      	movs	r2, #0
 8000494:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <MX_CAN_Init+0xa4>)
 8000498:	2200      	movs	r2, #0
 800049a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800049c:	4813      	ldr	r0, [pc, #76]	; (80004ec <MX_CAN_Init+0xa4>)
 800049e:	f000 fbaf 	bl	8000c00 <HAL_CAN_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_CAN_Init+0x64>
  {
    Error_Handler();
 80004a8:	f000 f954 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80004ac:	2301      	movs	r3, #1
 80004ae:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 12;  // which filter bank to use from the assigned ones
 80004b0:	230c      	movs	r3, #12
 80004b2:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80004b4:	2301      	movs	r3, #1
 80004b6:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x0a2<<5;
 80004b8:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80004bc:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0a2<<5;
 80004c2:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80004c6:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 13;  // how many filters to assign to the CAN1 (master can)
 80004d4:	230d      	movs	r3, #13
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80004d8:	463b      	mov	r3, r7
 80004da:	4619      	mov	r1, r3
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <MX_CAN_Init+0xa4>)
 80004de:	f000 fc8a 	bl	8000df6 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	3728      	adds	r7, #40	; 0x28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000033c 	.word	0x2000033c
 80004f0:	40006400 	.word	0x40006400

080004f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_I2C1_Init+0x50>)
 80004fa:	4a13      	ldr	r2, [pc, #76]	; (8000548 <MX_I2C1_Init+0x54>)
 80004fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_I2C1_Init+0x50>)
 8000500:	4a12      	ldr	r2, [pc, #72]	; (800054c <MX_I2C1_Init+0x58>)
 8000502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_I2C1_Init+0x50>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_I2C1_Init+0x50>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <MX_I2C1_Init+0x50>)
 8000512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000516:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <MX_I2C1_Init+0x50>)
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_I2C1_Init+0x50>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <MX_I2C1_Init+0x50>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <MX_I2C1_Init+0x50>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <MX_I2C1_Init+0x50>)
 8000532:	f001 fb55 	bl	8001be0 <HAL_I2C_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800053c:	f000 f90a 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000364 	.word	0x20000364
 8000548:	40005400 	.word	0x40005400
 800054c:	000186a0 	.word	0x000186a0

08000550 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000556:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <MX_USART1_UART_Init+0x50>)
 8000558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_USART1_UART_Init+0x4c>)
 800055c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_USART1_UART_Init+0x4c>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000576:	220c      	movs	r2, #12
 8000578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_USART1_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_USART1_UART_Init+0x4c>)
 8000588:	f004 fc40 	bl	8004e0c <HAL_UART_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000592:	f000 f8df 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200003b8 	.word	0x200003b8
 80005a0:	40013800 	.word	0x40013800

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b8:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <MX_GPIO_Init+0x120>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a41      	ldr	r2, [pc, #260]	; (80006c4 <MX_GPIO_Init+0x120>)
 80005be:	f043 0310 	orr.w	r3, r3, #16
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b3f      	ldr	r3, [pc, #252]	; (80006c4 <MX_GPIO_Init+0x120>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0310 	and.w	r3, r3, #16
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d0:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <MX_GPIO_Init+0x120>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a3b      	ldr	r2, [pc, #236]	; (80006c4 <MX_GPIO_Init+0x120>)
 80005d6:	f043 0320 	orr.w	r3, r3, #32
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b39      	ldr	r3, [pc, #228]	; (80006c4 <MX_GPIO_Init+0x120>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	4b36      	ldr	r3, [pc, #216]	; (80006c4 <MX_GPIO_Init+0x120>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a35      	ldr	r2, [pc, #212]	; (80006c4 <MX_GPIO_Init+0x120>)
 80005ee:	f043 0308 	orr.w	r3, r3, #8
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <MX_GPIO_Init+0x120>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <MX_GPIO_Init+0x120>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a2f      	ldr	r2, [pc, #188]	; (80006c4 <MX_GPIO_Init+0x120>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MX_GPIO_Init+0x120>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061e:	482a      	ldr	r0, [pc, #168]	; (80006c8 <MX_GPIO_Init+0x124>)
 8000620:	f001 fac6 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_MCU2_Pin|LEDG_MCU2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 718c 	mov.w	r1, #280	; 0x118
 800062a:	4828      	ldr	r0, [pc, #160]	; (80006cc <MX_GPIO_Init+0x128>)
 800062c:	f001 fac0 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	4820      	ldr	r0, [pc, #128]	; (80006c8 <MX_GPIO_Init+0x124>)
 8000646:	f001 f92f 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800064a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2302      	movs	r3, #2
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4819      	ldr	r0, [pc, #100]	; (80006c8 <MX_GPIO_Init+0x124>)
 8000664:	f001 f920 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin PB9 */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|GPIO_PIN_9;
 8000668:	f240 2303 	movw	r3, #515	; 0x203
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_GPIO_Init+0x128>)
 800067e:	f001 f913 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_MCU2_Pin LEDG_MCU2_Pin */
  GPIO_InitStruct.Pin = LEDR_MCU2_Pin|LEDG_MCU2_Pin;
 8000682:	2318      	movs	r3, #24
 8000684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <MX_GPIO_Init+0x128>)
 800069a:	f001 f905 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800069e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_GPIO_Init+0x128>)
 80006b8:	f001 f8f6 	bl	80018a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40011000 	.word	0x40011000
 80006cc:	40010c00 	.word	0x40010c00

080006d0 <sendCanData>:

/* USER CODE BEGIN 4 */
void sendCanData(uint8_t LsensorValue, uint8_t RsensorValue)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t sendData[8] = {0,0,0,0,0,0,0,0};
 80006e0:	4a1a      	ldr	r2, [pc, #104]	; (800074c <sendCanData+0x7c>)
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ea:	e883 0003 	stmia.w	r3, {r0, r1}

    if (LsensorValue < 100)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b63      	cmp	r3, #99	; 0x63
 80006f2:	d802      	bhi.n	80006fa <sendCanData+0x2a>
    {
        sendData[0] = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	723b      	strb	r3, [r7, #8]
 80006f8:	e014      	b.n	8000724 <sendCanData+0x54>
    }
    else if (LsensorValue > 100){
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b64      	cmp	r3, #100	; 0x64
 80006fe:	d904      	bls.n	800070a <sendCanData+0x3a>
    	sendData[0] = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	723b      	strb	r3, [r7, #8]
    	sendData[1] = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	727b      	strb	r3, [r7, #9]
 8000708:	e00c      	b.n	8000724 <sendCanData+0x54>
    }

    else if (RsensorValue < 50)
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	2b31      	cmp	r3, #49	; 0x31
 800070e:	d802      	bhi.n	8000716 <sendCanData+0x46>
    {

        sendData[2] = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	72bb      	strb	r3, [r7, #10]
 8000714:	e006      	b.n	8000724 <sendCanData+0x54>
    }
    else if (RsensorValue > 100)
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	2b64      	cmp	r3, #100	; 0x64
 800071a:	d903      	bls.n	8000724 <sendCanData+0x54>
       {
           sendData[2] = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	72bb      	strb	r3, [r7, #10]
           sendData[3] = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	72fb      	strb	r3, [r7, #11]
       }
    txHeader.StdId = 0x012;
 8000724:	2312      	movs	r3, #18
 8000726:	613b      	str	r3, [r7, #16]
    txHeader.IDE = CAN_ID_STD;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
    txHeader.RTR = CAN_RTR_DATA;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
    txHeader.DLC = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	623b      	str	r3, [r7, #32]
    HAL_CAN_AddTxMessage(&hcan, &txHeader, sendData, NULL);
 8000734:	f107 0208 	add.w	r2, r7, #8
 8000738:	f107 0110 	add.w	r1, r7, #16
 800073c:	2300      	movs	r3, #0
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <sendCanData+0x80>)
 8000740:	f000 fc22 	bl	8000f88 <HAL_CAN_AddTxMessage>
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	0800ab34 	.word	0x0800ab34
 8000750:	2000033c 	.word	0x2000033c

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  /* USER CODE END Error_Handler_Debug */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_MspInit+0x5c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <HAL_MspInit+0x5c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_MspInit+0x5c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x5c>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x5c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x5c>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_MspInit+0x60>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_MspInit+0x60>)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010000 	.word	0x40010000

080007c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <HAL_CAN_MspInit+0x9c>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d139      	bne.n	800085c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <HAL_CAN_MspInit+0xa0>)
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <HAL_CAN_MspInit+0xa0>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	61d3      	str	r3, [r2, #28]
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <HAL_CAN_MspInit+0xa0>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_CAN_MspInit+0xa0>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a18      	ldr	r2, [pc, #96]	; (8000868 <HAL_CAN_MspInit+0xa0>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <HAL_CAN_MspInit+0xa0>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800081c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	4619      	mov	r1, r3
 800082c:	480f      	ldr	r0, [pc, #60]	; (800086c <HAL_CAN_MspInit+0xa4>)
 800082e:	f001 f83b 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <HAL_CAN_MspInit+0xa4>)
 8000848:	f001 f82e 	bl	80018a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2014      	movs	r0, #20
 8000852:	f000 ff6c 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000856:	2014      	movs	r0, #20
 8000858:	f000 ff85 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40006400 	.word	0x40006400
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800

08000870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <HAL_I2C_MspInit+0x90>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d133      	bne.n	80008f8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <HAL_I2C_MspInit+0x94>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <HAL_I2C_MspInit+0x94>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_I2C_MspInit+0x94>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008a8:	23c0      	movs	r3, #192	; 0xc0
 80008aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ac:	2312      	movs	r3, #18
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	4813      	ldr	r0, [pc, #76]	; (8000908 <HAL_I2C_MspInit+0x98>)
 80008bc:	f000 fff4 	bl	80018a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_I2C_MspInit+0x94>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <HAL_I2C_MspInit+0x94>)
 80008c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ca:	61d3      	str	r3, [r2, #28]
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_I2C_MspInit+0x94>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	201f      	movs	r0, #31
 80008de:	f000 ff26 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008e2:	201f      	movs	r0, #31
 80008e4:	f000 ff3f 	bl	8001766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2020      	movs	r0, #32
 80008ee:	f000 ff1e 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008f2:	2020      	movs	r0, #32
 80008f4:	f000 ff37 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40005400 	.word	0x40005400
 8000904:	40021000 	.word	0x40021000
 8000908:	40010c00 	.word	0x40010c00

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <HAL_UART_MspInit+0x8c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d131      	bne.n	8000990 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <HAL_UART_MspInit+0x90>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a1a      	ldr	r2, [pc, #104]	; (800099c <HAL_UART_MspInit+0x90>)
 8000932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_UART_MspInit+0x90>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_UART_MspInit+0x90>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <HAL_UART_MspInit+0x90>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_UART_MspInit+0x90>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800095c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <HAL_UART_MspInit+0x94>)
 8000972:	f000 ff99 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <HAL_UART_MspInit+0x94>)
 800098c:	f000 ff8c 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40013800 	.word	0x40013800
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010800 	.word	0x40010800

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ea:	f000 f8c9 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009fa:	f000 fb94 	bl	8001126 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000033c 	.word	0x2000033c

08000a08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <I2C1_EV_IRQHandler+0x10>)
 8000a0e:	f001 fda9 	bl	8002564 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000364 	.word	0x20000364

08000a1c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <I2C1_ER_IRQHandler+0x10>)
 8000a22:	f001 fef2 	bl	800280a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000364 	.word	0x20000364

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f009 fbba 	bl	800a1d8 <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <_sbrk+0x64>)
 8000a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20005000 	.word	0x20005000
 8000a90:	00000400 	.word	0x00000400
 8000a94:	2000079c 	.word	0x2000079c
 8000a98:	20000930 	.word	0x20000930

08000a9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff fff8 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aae:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ac4:	4c09      	ldr	r4, [pc, #36]	; (8000aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f009 fb87 	bl	800a1e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad6:	f7ff fb39 	bl	800014c <main>
  bx lr
 8000ada:	4770      	bx	lr
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 8000ae4:	0800aba4 	.word	0x0800aba4
  ldr r2, =_sbss
 8000ae8:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8000aec:	2000092c 	.word	0x2000092c

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x28>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 fe07 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe28 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fe1f 	bl	8001782 <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 fde7 	bl	800172e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000010 	.word	0x20000010
 8000b7c:	2000000c 	.word	0x2000000c

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	20000010 	.word	0x20000010
 8000ba0:	200007a0 	.word	0x200007a0

08000ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	200007a0 	.word	0x200007a0

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff0 	bl	8000ba4 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_Delay+0x44>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bde:	bf00      	nop
 8000be0:	f7ff ffe0 	bl	8000ba4 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000010 	.word	0x20000010

08000c00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e0ed      	b.n	8000dee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fdd2 	bl	80007c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f042 0201 	orr.w	r2, r2, #1
 8000c32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c34:	f7ff ffb6 	bl	8000ba4 <HAL_GetTick>
 8000c38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c3a:	e012      	b.n	8000c62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c3c:	f7ff ffb2 	bl	8000ba4 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b0a      	cmp	r3, #10
 8000c48:	d90b      	bls.n	8000c62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2205      	movs	r2, #5
 8000c5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e0c5      	b.n	8000dee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d0e5      	beq.n	8000c3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0202 	bic.w	r2, r2, #2
 8000c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c80:	f7ff ff90 	bl	8000ba4 <HAL_GetTick>
 8000c84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c86:	e012      	b.n	8000cae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c88:	f7ff ff8c 	bl	8000ba4 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b0a      	cmp	r3, #10
 8000c94:	d90b      	bls.n	8000cae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2205      	movs	r2, #5
 8000ca6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e09f      	b.n	8000dee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1e5      	bne.n	8000c88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	7e1b      	ldrb	r3, [r3, #24]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d108      	bne.n	8000cd6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	e007      	b.n	8000ce6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7e5b      	ldrb	r3, [r3, #25]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d108      	bne.n	8000d00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	e007      	b.n	8000d10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7e9b      	ldrb	r3, [r3, #26]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d108      	bne.n	8000d2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 0220 	orr.w	r2, r2, #32
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e007      	b.n	8000d3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f022 0220 	bic.w	r2, r2, #32
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7edb      	ldrb	r3, [r3, #27]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d108      	bne.n	8000d54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0210 	bic.w	r2, r2, #16
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	e007      	b.n	8000d64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 0210 	orr.w	r2, r2, #16
 8000d62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7f1b      	ldrb	r3, [r3, #28]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d108      	bne.n	8000d7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0208 	orr.w	r2, r2, #8
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	e007      	b.n	8000d8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 0208 	bic.w	r2, r2, #8
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7f5b      	ldrb	r3, [r3, #29]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d108      	bne.n	8000da8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f042 0204 	orr.w	r2, r2, #4
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e007      	b.n	8000db8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0204 	bic.w	r2, r2, #4
 8000db6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	ea42 0103 	orr.w	r1, r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b087      	sub	sp, #28
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e0c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e0e:	7cfb      	ldrb	r3, [r7, #19]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d003      	beq.n	8000e1c <HAL_CAN_ConfigFilter+0x26>
 8000e14:	7cfb      	ldrb	r3, [r7, #19]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	f040 80aa 	bne.w	8000f70 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e22:	f043 0201 	orr.w	r2, r3, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	2201      	movs	r2, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d123      	bne.n	8000e9e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	401a      	ands	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e78:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3248      	adds	r2, #72	; 0x48
 8000e7e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e92:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e94:	6979      	ldr	r1, [r7, #20]
 8000e96:	3348      	adds	r3, #72	; 0x48
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d122      	bne.n	8000eec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ec6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3248      	adds	r2, #72	; 0x48
 8000ecc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ee0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ee2:	6979      	ldr	r1, [r7, #20]
 8000ee4:	3348      	adds	r3, #72	; 0x48
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d109      	bne.n	8000f08 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f06:	e007      	b.n	8000f18 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	431a      	orrs	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f32:	e007      	b.n	8000f44 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d107      	bne.n	8000f5c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f62:	f023 0201 	bic.w	r2, r3, #1
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e006      	b.n	8000f7e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
  }
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fa6:	7ffb      	ldrb	r3, [r7, #31]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d003      	beq.n	8000fb4 <HAL_CAN_AddTxMessage+0x2c>
 8000fac:	7ffb      	ldrb	r3, [r7, #31]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	f040 80ad 	bne.w	800110e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10a      	bne.n	8000fd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d105      	bne.n	8000fd4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8095 	beq.w	80010fe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	0e1b      	lsrs	r3, r3, #24
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10d      	bne.n	800100c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ffa:	68f9      	ldr	r1, [r7, #12]
 8000ffc:	6809      	ldr	r1, [r1, #0]
 8000ffe:	431a      	orrs	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3318      	adds	r3, #24
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	440b      	add	r3, r1
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e00f      	b.n	800102c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001016:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800101c:	68f9      	ldr	r1, [r7, #12]
 800101e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001020:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3318      	adds	r3, #24
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	440b      	add	r3, r1
 800102a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6819      	ldr	r1, [r3, #0]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3318      	adds	r3, #24
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	440b      	add	r3, r1
 800103c:	3304      	adds	r3, #4
 800103e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	7d1b      	ldrb	r3, [r3, #20]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d111      	bne.n	800106c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3318      	adds	r3, #24
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	4413      	add	r3, r2
 8001054:	3304      	adds	r3, #4
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	6811      	ldr	r1, [r2, #0]
 800105c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3318      	adds	r3, #24
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	440b      	add	r3, r1
 8001068:	3304      	adds	r3, #4
 800106a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3307      	adds	r3, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	061a      	lsls	r2, r3, #24
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3306      	adds	r3, #6
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	041b      	lsls	r3, r3, #16
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3305      	adds	r3, #5
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	4313      	orrs	r3, r2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	3204      	adds	r2, #4
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	4610      	mov	r0, r2
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	6811      	ldr	r1, [r2, #0]
 8001094:	ea43 0200 	orr.w	r2, r3, r0
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	440b      	add	r3, r1
 800109e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80010a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3303      	adds	r3, #3
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	061a      	lsls	r2, r3, #24
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3302      	adds	r3, #2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3301      	adds	r3, #1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	4313      	orrs	r3, r2
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	4610      	mov	r0, r2
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	6811      	ldr	r1, [r2, #0]
 80010ca:	ea43 0200 	orr.w	r2, r3, r0
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	440b      	add	r3, r1
 80010d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80010d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3318      	adds	r3, #24
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	4413      	add	r3, r2
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	6811      	ldr	r1, [r2, #0]
 80010ec:	f043 0201 	orr.w	r2, r3, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3318      	adds	r3, #24
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	440b      	add	r3, r1
 80010f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e00e      	b.n	800111c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e006      	b.n	800111c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	3724      	adds	r7, #36	; 0x24
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b08a      	sub	sp, #40	; 0x28
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d07c      	beq.n	8001266 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d023      	beq.n	80011be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2201      	movs	r2, #1
 800117c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f983 	bl	8001494 <HAL_CAN_TxMailbox0CompleteCallback>
 800118e:	e016      	b.n	80011be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
 80011a2:	e00c      	b.n	80011be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
 80011b6:	e002      	b.n	80011be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f986 	bl	80014ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d024      	beq.n	8001212 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f962 	bl	80014a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80011e2:	e016      	b.n	8001212 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	e00c      	b.n	8001212 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	e002      	b.n	8001212 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f965 	bl	80014dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d024      	beq.n	8001266 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001224:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f941 	bl	80014b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001236:	e016      	b.n	8001266 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
 800124a:	e00c      	b.n	8001266 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
 800125e:	e002      	b.n	8001266 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f944 	bl	80014ee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00c      	beq.n	800128a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001280:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2210      	movs	r2, #16
 8001288:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00b      	beq.n	80012ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2208      	movs	r2, #8
 80012a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f933 	bl	8001512 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f91b 	bl	8001500 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00c      	beq.n	80012ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2210      	movs	r2, #16
 80012ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2208      	movs	r2, #8
 8001308:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f913 	bl	8001536 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f8fb 	bl	8001524 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00b      	beq.n	8001350 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2210      	movs	r2, #16
 8001348:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f8fc 	bl	8001548 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2208      	movs	r2, #8
 800136a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f8f4 	bl	800155a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d07b      	beq.n	8001474 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d072      	beq.n	800146c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d043      	beq.n	800146c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d03e      	beq.n	800146c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80013f4:	2b60      	cmp	r3, #96	; 0x60
 80013f6:	d02b      	beq.n	8001450 <HAL_CAN_IRQHandler+0x32a>
 80013f8:	2b60      	cmp	r3, #96	; 0x60
 80013fa:	d82e      	bhi.n	800145a <HAL_CAN_IRQHandler+0x334>
 80013fc:	2b50      	cmp	r3, #80	; 0x50
 80013fe:	d022      	beq.n	8001446 <HAL_CAN_IRQHandler+0x320>
 8001400:	2b50      	cmp	r3, #80	; 0x50
 8001402:	d82a      	bhi.n	800145a <HAL_CAN_IRQHandler+0x334>
 8001404:	2b40      	cmp	r3, #64	; 0x40
 8001406:	d019      	beq.n	800143c <HAL_CAN_IRQHandler+0x316>
 8001408:	2b40      	cmp	r3, #64	; 0x40
 800140a:	d826      	bhi.n	800145a <HAL_CAN_IRQHandler+0x334>
 800140c:	2b30      	cmp	r3, #48	; 0x30
 800140e:	d010      	beq.n	8001432 <HAL_CAN_IRQHandler+0x30c>
 8001410:	2b30      	cmp	r3, #48	; 0x30
 8001412:	d822      	bhi.n	800145a <HAL_CAN_IRQHandler+0x334>
 8001414:	2b10      	cmp	r3, #16
 8001416:	d002      	beq.n	800141e <HAL_CAN_IRQHandler+0x2f8>
 8001418:	2b20      	cmp	r3, #32
 800141a:	d005      	beq.n	8001428 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800141c:	e01d      	b.n	800145a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001426:	e019      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001430:	e014      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	f043 0320 	orr.w	r3, r3, #32
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800143a:	e00f      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001444:	e00a      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800144e:	e005      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001458:	e000      	b.n	800145c <HAL_CAN_IRQHandler+0x336>
            break;
 800145a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800146a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2204      	movs	r2, #4
 8001472:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f870 	bl	800156c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
	...

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	60d3      	str	r3, [r2, #12]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	db0b      	blt.n	800160e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 021f 	and.w	r2, r3, #31
 80015fc:	4906      	ldr	r1, [pc, #24]	; (8001618 <__NVIC_EnableIRQ+0x34>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2001      	movs	r0, #1
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d301      	bcc.n	80016ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00f      	b.n	800170a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <SysTick_Config+0x40>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f2:	210f      	movs	r1, #15
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f7ff ff90 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <SysTick_Config+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SysTick_Config+0x40>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff2d 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001740:	f7ff ff42 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 8001744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f7ff ff90 	bl	8001670 <NVIC_EncodePriority>
 8001750:	4602      	mov	r2, r0
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff5f 	bl	800161c <__NVIC_SetPriority>
}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff35 	bl	80015e4 <__NVIC_EnableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffa2 	bl	80016d4 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d005      	beq.n	80017c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2204      	movs	r2, #4
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e051      	b.n	8001864 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 020e 	bic.w	r2, r2, #14
 80017ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a22      	ldr	r2, [pc, #136]	; (8001870 <HAL_DMA_Abort_IT+0xd4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d029      	beq.n	800183e <HAL_DMA_Abort_IT+0xa2>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_DMA_Abort_IT+0xd8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d022      	beq.n	800183a <HAL_DMA_Abort_IT+0x9e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_DMA_Abort_IT+0xdc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d01a      	beq.n	8001834 <HAL_DMA_Abort_IT+0x98>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <HAL_DMA_Abort_IT+0xe0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d012      	beq.n	800182e <HAL_DMA_Abort_IT+0x92>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <HAL_DMA_Abort_IT+0xe4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d00a      	beq.n	8001828 <HAL_DMA_Abort_IT+0x8c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <HAL_DMA_Abort_IT+0xe8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d102      	bne.n	8001822 <HAL_DMA_Abort_IT+0x86>
 800181c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001820:	e00e      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 8001822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001826:	e00b      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 8001828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182c:	e008      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 800182e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001832:	e005      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 8001834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001838:	e002      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 800183a:	2310      	movs	r3, #16
 800183c:	e000      	b.n	8001840 <HAL_DMA_Abort_IT+0xa4>
 800183e:	2301      	movs	r3, #1
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_DMA_Abort_IT+0xec>)
 8001842:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
    } 
  }
  return status;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40020008 	.word	0x40020008
 8001874:	4002001c 	.word	0x4002001c
 8001878:	40020030 	.word	0x40020030
 800187c:	40020044 	.word	0x40020044
 8001880:	40020058 	.word	0x40020058
 8001884:	4002006c 	.word	0x4002006c
 8001888:	40020000 	.word	0x40020000

0800188c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800189a:	b2db      	uxtb	r3, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b08b      	sub	sp, #44	; 0x2c
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	e169      	b.n	8001b90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018bc:	2201      	movs	r2, #1
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 8158 	bne.w	8001b8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a9a      	ldr	r2, [pc, #616]	; (8001b48 <HAL_GPIO_Init+0x2a0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d05e      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 80018e4:	4a98      	ldr	r2, [pc, #608]	; (8001b48 <HAL_GPIO_Init+0x2a0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d875      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 80018ea:	4a98      	ldr	r2, [pc, #608]	; (8001b4c <HAL_GPIO_Init+0x2a4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d058      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 80018f0:	4a96      	ldr	r2, [pc, #600]	; (8001b4c <HAL_GPIO_Init+0x2a4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d86f      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 80018f6:	4a96      	ldr	r2, [pc, #600]	; (8001b50 <HAL_GPIO_Init+0x2a8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d052      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 80018fc:	4a94      	ldr	r2, [pc, #592]	; (8001b50 <HAL_GPIO_Init+0x2a8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d869      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 8001902:	4a94      	ldr	r2, [pc, #592]	; (8001b54 <HAL_GPIO_Init+0x2ac>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d04c      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 8001908:	4a92      	ldr	r2, [pc, #584]	; (8001b54 <HAL_GPIO_Init+0x2ac>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d863      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 800190e:	4a92      	ldr	r2, [pc, #584]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d046      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
 8001914:	4a90      	ldr	r2, [pc, #576]	; (8001b58 <HAL_GPIO_Init+0x2b0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d85d      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 800191a:	2b12      	cmp	r3, #18
 800191c:	d82a      	bhi.n	8001974 <HAL_GPIO_Init+0xcc>
 800191e:	2b12      	cmp	r3, #18
 8001920:	d859      	bhi.n	80019d6 <HAL_GPIO_Init+0x12e>
 8001922:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <HAL_GPIO_Init+0x80>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	080019a3 	.word	0x080019a3
 800192c:	0800197d 	.word	0x0800197d
 8001930:	0800198f 	.word	0x0800198f
 8001934:	080019d1 	.word	0x080019d1
 8001938:	080019d7 	.word	0x080019d7
 800193c:	080019d7 	.word	0x080019d7
 8001940:	080019d7 	.word	0x080019d7
 8001944:	080019d7 	.word	0x080019d7
 8001948:	080019d7 	.word	0x080019d7
 800194c:	080019d7 	.word	0x080019d7
 8001950:	080019d7 	.word	0x080019d7
 8001954:	080019d7 	.word	0x080019d7
 8001958:	080019d7 	.word	0x080019d7
 800195c:	080019d7 	.word	0x080019d7
 8001960:	080019d7 	.word	0x080019d7
 8001964:	080019d7 	.word	0x080019d7
 8001968:	080019d7 	.word	0x080019d7
 800196c:	08001985 	.word	0x08001985
 8001970:	08001999 	.word	0x08001999
 8001974:	4a79      	ldr	r2, [pc, #484]	; (8001b5c <HAL_GPIO_Init+0x2b4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d013      	beq.n	80019a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800197a:	e02c      	b.n	80019d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e029      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	3304      	adds	r3, #4
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e024      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	3308      	adds	r3, #8
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e01f      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	330c      	adds	r3, #12
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e01a      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019aa:	2304      	movs	r3, #4
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e013      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d105      	bne.n	80019c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b8:	2308      	movs	r3, #8
 80019ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	611a      	str	r2, [r3, #16]
          break;
 80019c2:	e009      	b.n	80019d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c4:	2308      	movs	r3, #8
 80019c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	615a      	str	r2, [r3, #20]
          break;
 80019ce:	e003      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x130>
          break;
 80019d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2bff      	cmp	r3, #255	; 0xff
 80019dc:	d801      	bhi.n	80019e2 <HAL_GPIO_Init+0x13a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	e001      	b.n	80019e6 <HAL_GPIO_Init+0x13e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3304      	adds	r3, #4
 80019e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2bff      	cmp	r3, #255	; 0xff
 80019ec:	d802      	bhi.n	80019f4 <HAL_GPIO_Init+0x14c>
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	e002      	b.n	80019fa <HAL_GPIO_Init+0x152>
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	3b08      	subs	r3, #8
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	210f      	movs	r1, #15
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	6a39      	ldr	r1, [r7, #32]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	431a      	orrs	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80b1 	beq.w	8001b8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a40:	4a48      	ldr	r2, [pc, #288]	; (8001b64 <HAL_GPIO_Init+0x2bc>)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d013      	beq.n	8001a94 <HAL_GPIO_Init+0x1ec>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a3f      	ldr	r2, [pc, #252]	; (8001b6c <HAL_GPIO_Init+0x2c4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00d      	beq.n	8001a90 <HAL_GPIO_Init+0x1e8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a3e      	ldr	r2, [pc, #248]	; (8001b70 <HAL_GPIO_Init+0x2c8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d007      	beq.n	8001a8c <HAL_GPIO_Init+0x1e4>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3d      	ldr	r2, [pc, #244]	; (8001b74 <HAL_GPIO_Init+0x2cc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_GPIO_Init+0x1e0>
 8001a84:	2303      	movs	r3, #3
 8001a86:	e006      	b.n	8001a96 <HAL_GPIO_Init+0x1ee>
 8001a88:	2304      	movs	r3, #4
 8001a8a:	e004      	b.n	8001a96 <HAL_GPIO_Init+0x1ee>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e002      	b.n	8001a96 <HAL_GPIO_Init+0x1ee>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_GPIO_Init+0x1ee>
 8001a94:	2300      	movs	r3, #0
 8001a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a98:	f002 0203 	and.w	r2, r2, #3
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	4093      	lsls	r3, r2
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aa6:	492f      	ldr	r1, [pc, #188]	; (8001b64 <HAL_GPIO_Init+0x2bc>)
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	492c      	ldr	r1, [pc, #176]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	4928      	ldr	r1, [pc, #160]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	4922      	ldr	r1, [pc, #136]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60cb      	str	r3, [r1, #12]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	491e      	ldr	r1, [pc, #120]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	4918      	ldr	r1, [pc, #96]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	4914      	ldr	r1, [pc, #80]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d021      	beq.n	8001b7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	490e      	ldr	r1, [pc, #56]	; (8001b78 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
 8001b44:	e021      	b.n	8001b8a <HAL_GPIO_Init+0x2e2>
 8001b46:	bf00      	nop
 8001b48:	10320000 	.word	0x10320000
 8001b4c:	10310000 	.word	0x10310000
 8001b50:	10220000 	.word	0x10220000
 8001b54:	10210000 	.word	0x10210000
 8001b58:	10120000 	.word	0x10120000
 8001b5c:	10110000 	.word	0x10110000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010000 	.word	0x40010000
 8001b68:	40010800 	.word	0x40010800
 8001b6c:	40010c00 	.word	0x40010c00
 8001b70:	40011000 	.word	0x40011000
 8001b74:	40011400 	.word	0x40011400
 8001b78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	4909      	ldr	r1, [pc, #36]	; (8001bac <HAL_GPIO_Init+0x304>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f47f ae8e 	bne.w	80018bc <HAL_GPIO_Init+0x14>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	372c      	adds	r7, #44	; 0x2c
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	40010400 	.word	0x40010400

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e12b      	b.n	8001e4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7fe fe32 	bl	8000870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2224      	movs	r2, #36	; 0x24
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c44:	f003 f89c 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 8001c48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4a81      	ldr	r2, [pc, #516]	; (8001e54 <HAL_I2C_Init+0x274>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d807      	bhi.n	8001c64 <HAL_I2C_Init+0x84>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a80      	ldr	r2, [pc, #512]	; (8001e58 <HAL_I2C_Init+0x278>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	bf94      	ite	ls
 8001c5c:	2301      	movls	r3, #1
 8001c5e:	2300      	movhi	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	e006      	b.n	8001c72 <HAL_I2C_Init+0x92>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a7d      	ldr	r2, [pc, #500]	; (8001e5c <HAL_I2C_Init+0x27c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	bf94      	ite	ls
 8001c6c:	2301      	movls	r3, #1
 8001c6e:	2300      	movhi	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0e7      	b.n	8001e4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4a78      	ldr	r2, [pc, #480]	; (8001e60 <HAL_I2C_Init+0x280>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0c9b      	lsrs	r3, r3, #18
 8001c84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	; (8001e54 <HAL_I2C_Init+0x274>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d802      	bhi.n	8001cb4 <HAL_I2C_Init+0xd4>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	e009      	b.n	8001cc8 <HAL_I2C_Init+0xe8>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	4a69      	ldr	r2, [pc, #420]	; (8001e64 <HAL_I2C_Init+0x284>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	495c      	ldr	r1, [pc, #368]	; (8001e54 <HAL_I2C_Init+0x274>)
 8001ce4:	428b      	cmp	r3, r1
 8001ce6:	d819      	bhi.n	8001d1c <HAL_I2C_Init+0x13c>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1e59      	subs	r1, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf6:	1c59      	adds	r1, r3, #1
 8001cf8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cfc:	400b      	ands	r3, r1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_I2C_Init+0x138>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1e59      	subs	r1, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d10:	3301      	adds	r3, #1
 8001d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d16:	e051      	b.n	8001dbc <HAL_I2C_Init+0x1dc>
 8001d18:	2304      	movs	r3, #4
 8001d1a:	e04f      	b.n	8001dbc <HAL_I2C_Init+0x1dc>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d111      	bne.n	8001d48 <HAL_I2C_Init+0x168>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1e58      	subs	r0, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	440b      	add	r3, r1
 8001d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e012      	b.n	8001d6e <HAL_I2C_Init+0x18e>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1e58      	subs	r0, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	0099      	lsls	r1, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Init+0x196>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e022      	b.n	8001dbc <HAL_I2C_Init+0x1dc>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10e      	bne.n	8001d9c <HAL_I2C_Init+0x1bc>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1e58      	subs	r0, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6859      	ldr	r1, [r3, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	440b      	add	r3, r1
 8001d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d90:	3301      	adds	r3, #1
 8001d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9a:	e00f      	b.n	8001dbc <HAL_I2C_Init+0x1dc>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1e58      	subs	r0, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	0099      	lsls	r1, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	6809      	ldr	r1, [r1, #0]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6911      	ldr	r1, [r2, #16]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68d2      	ldr	r2, [r2, #12]
 8001df6:	4311      	orrs	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	000186a0 	.word	0x000186a0
 8001e58:	001e847f 	.word	0x001e847f
 8001e5c:	003d08ff 	.word	0x003d08ff
 8001e60:	431bde83 	.word	0x431bde83
 8001e64:	10624dd3 	.word	0x10624dd3

08001e68 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	2b80      	cmp	r3, #128	; 0x80
 8001e7c:	d103      	bne.n	8001e86 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	817b      	strh	r3, [r7, #10]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7fe fe7e 	bl	8000ba4 <HAL_GetTick>
 8001ea8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	f040 80e0 	bne.w	8002078 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2319      	movs	r3, #25
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4970      	ldr	r1, [pc, #448]	; (8002084 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f002 f910 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e0d3      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_I2C_Master_Transmit+0x50>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e0cc      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d007      	beq.n	8001f06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2221      	movs	r2, #33	; 0x21
 8001f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2210      	movs	r2, #16
 8001f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	893a      	ldrh	r2, [r7, #8]
 8001f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4a50      	ldr	r2, [pc, #320]	; (8002088 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	6a3a      	ldr	r2, [r7, #32]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f001 fed2 	bl	8003cf8 <I2C_MasterRequestWrite>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e08d      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f74:	e066      	b.n	8002044 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f002 f9ce 	bl	800431c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00d      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d107      	bne.n	8001f9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06b      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	781a      	ldrb	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d11b      	bne.n	8002018 <HAL_I2C_Master_Transmit+0x188>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d017      	beq.n	8002018 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	6a39      	ldr	r1, [r7, #32]
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f002 f9c5 	bl	80043ac <I2C_WaitOnBTFFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	2b04      	cmp	r3, #4
 800202e:	d107      	bne.n	8002040 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e01a      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	d194      	bne.n	8001f76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	00100002 	.word	0x00100002
 8002088:	ffff0000 	.word	0xffff0000

0800208c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	; 0x30
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	461a      	mov	r2, r3
 8002098:	460b      	mov	r3, r1
 800209a:	817b      	strh	r3, [r7, #10]
 800209c:	4613      	mov	r3, r2
 800209e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7fe fd7e 	bl	8000ba4 <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	f040 824b 	bne.w	800254e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2319      	movs	r3, #25
 80020be:	2201      	movs	r2, #1
 80020c0:	497f      	ldr	r1, [pc, #508]	; (80022c0 <HAL_I2C_Master_Receive+0x234>)
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f002 f810 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80020ce:	2302      	movs	r3, #2
 80020d0:	e23e      	b.n	8002550 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2C_Master_Receive+0x54>
 80020dc:	2302      	movs	r3, #2
 80020de:	e237      	b.n	8002550 <HAL_I2C_Master_Receive+0x4c4>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d007      	beq.n	8002106 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002114:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2222      	movs	r2, #34	; 0x22
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2210      	movs	r2, #16
 8002122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	893a      	ldrh	r2, [r7, #8]
 8002136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a5f      	ldr	r2, [pc, #380]	; (80022c4 <HAL_I2C_Master_Receive+0x238>)
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002148:	8979      	ldrh	r1, [r7, #10]
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f001 fe54 	bl	8003dfc <I2C_MasterRequestRead>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1f8      	b.n	8002550 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	2b00      	cmp	r3, #0
 8002164:	d113      	bne.n	800218e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e1cc      	b.n	8002528 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	2b01      	cmp	r3, #1
 8002194:	d11e      	bne.n	80021d4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021a6:	b672      	cpsid	i
}
 80021a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021d0:	b662      	cpsie	i
}
 80021d2:	e035      	b.n	8002240 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d11e      	bne.n	800221a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021ec:	b672      	cpsid	i
}
 80021ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002214:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002216:	b662      	cpsie	i
}
 8002218:	e012      	b.n	8002240 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002228:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002240:	e172      	b.n	8002528 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	2b03      	cmp	r3, #3
 8002248:	f200 811f 	bhi.w	800248a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	2b01      	cmp	r3, #1
 8002252:	d123      	bne.n	800229c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f002 f921 	bl	80044a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e173      	b.n	8002550 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	855a      	strh	r2, [r3, #42]	; 0x2a
 800229a:	e145      	b.n	8002528 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d152      	bne.n	800234a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	2200      	movs	r2, #0
 80022ac:	4906      	ldr	r1, [pc, #24]	; (80022c8 <HAL_I2C_Master_Receive+0x23c>)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f001 ff1a 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e148      	b.n	8002550 <HAL_I2C_Master_Receive+0x4c4>
 80022be:	bf00      	nop
 80022c0:	00100002 	.word	0x00100002
 80022c4:	ffff0000 	.word	0xffff0000
 80022c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80022cc:	b672      	cpsid	i
}
 80022ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002312:	b662      	cpsie	i
}
 8002314:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002348:	e0ee      	b.n	8002528 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	2200      	movs	r2, #0
 8002352:	4981      	ldr	r1, [pc, #516]	; (8002558 <HAL_I2C_Master_Receive+0x4cc>)
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f001 fec7 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0f5      	b.n	8002550 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002372:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023aa:	4b6c      	ldr	r3, [pc, #432]	; (800255c <HAL_I2C_Master_Receive+0x4d0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	08db      	lsrs	r3, r3, #3
 80023b0:	4a6b      	ldr	r2, [pc, #428]	; (8002560 <HAL_I2C_Master_Receive+0x4d4>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	0a1a      	lsrs	r2, r3, #8
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00da      	lsls	r2, r3, #3
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d118      	bne.n	8002402 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f043 0220 	orr.w	r2, r3, #32
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80023f2:	b662      	cpsie	i
}
 80023f4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0a6      	b.n	8002550 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b04      	cmp	r3, #4
 800240e:	d1d9      	bne.n	80023c4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002452:	b662      	cpsie	i
}
 8002454:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002488:	e04e      	b.n	8002528 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f002 f806 	bl	80044a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e058      	b.n	8002550 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d124      	bne.n	8002528 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d107      	bne.n	80024f6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	f47f ae88 	bne.w	8002242 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3728      	adds	r7, #40	; 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	00010004 	.word	0x00010004
 800255c:	20000008 	.word	0x20000008
 8002560:	14f8b589 	.word	0x14f8b589

08002564 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002584:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b10      	cmp	r3, #16
 8002592:	d003      	beq.n	800259c <HAL_I2C_EV_IRQHandler+0x38>
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b40      	cmp	r3, #64	; 0x40
 8002598:	f040 80b1 	bne.w	80026fe <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80025bc:	d003      	beq.n	80025c6 <HAL_I2C_EV_IRQHandler+0x62>
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_EV_IRQHandler+0x66>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_I2C_EV_IRQHandler+0x68>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	f000 8114 	beq.w	80027fa <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <HAL_I2C_EV_IRQHandler+0x90>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f001 ffe5 	bl	80045b6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fd60 	bl	80030b2 <I2C_Master_SB>
 80025f2:	e083      	b.n	80026fc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_I2C_EV_IRQHandler+0xac>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fdd7 	bl	80031bc <I2C_Master_ADD10>
 800260e:	e075      	b.n	80026fc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_I2C_EV_IRQHandler+0xc8>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fdf2 	bl	800320e <I2C_Master_ADDR>
 800262a:	e067      	b.n	80026fc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d036      	beq.n	80026a4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002644:	f000 80db 	beq.w	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00d      	beq.n	800266e <HAL_I2C_EV_IRQHandler+0x10a>
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_I2C_EV_IRQHandler+0x10a>
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f9d4 	bl	8002a14 <I2C_MasterTransmit_TXE>
 800266c:	e046      	b.n	80026fc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80c2 	beq.w	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80bc 	beq.w	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002686:	7bbb      	ldrb	r3, [r7, #14]
 8002688:	2b21      	cmp	r3, #33	; 0x21
 800268a:	d103      	bne.n	8002694 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fa5d 	bl	8002b4c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002692:	e0b4      	b.n	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	f040 80b1 	bne.w	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 facb 	bl	8002c38 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a2:	e0ac      	b.n	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026b2:	f000 80a4 	beq.w	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_I2C_EV_IRQHandler+0x178>
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_I2C_EV_IRQHandler+0x178>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fb47 	bl	8002d68 <I2C_MasterReceive_RXNE>
 80026da:	e00f      	b.n	80026fc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 808b 	beq.w	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8085 	beq.w	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fbf2 	bl	8002ede <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026fa:	e080      	b.n	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
 80026fc:	e07f      	b.n	80027fe <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e007      	b.n	8002720 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d011      	beq.n	800274e <HAL_I2C_EV_IRQHandler+0x1ea>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00c      	beq.n	800274e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 ffb8 	bl	80036bc <I2C_Slave_ADDR>
 800274c:	e05a      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_I2C_EV_IRQHandler+0x206>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fff2 	bl	800374c <I2C_Slave_STOPF>
 8002768:	e04c      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800276a:	7bbb      	ldrb	r3, [r7, #14]
 800276c:	2b21      	cmp	r3, #33	; 0x21
 800276e:	d002      	beq.n	8002776 <HAL_I2C_EV_IRQHandler+0x212>
 8002770:	7bbb      	ldrb	r3, [r7, #14]
 8002772:	2b29      	cmp	r3, #41	; 0x29
 8002774:	d120      	bne.n	80027b8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <HAL_I2C_EV_IRQHandler+0x238>
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_I2C_EV_IRQHandler+0x238>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fed5 	bl	8003544 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800279a:	e032      	b.n	8002802 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d02d      	beq.n	8002802 <HAL_I2C_EV_IRQHandler+0x29e>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d028      	beq.n	8002802 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 ff04 	bl	80035be <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027b6:	e024      	b.n	8002802 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_I2C_EV_IRQHandler+0x27a>
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_I2C_EV_IRQHandler+0x27a>
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 ff11 	bl	80035fe <I2C_SlaveReceive_RXNE>
 80027dc:	e012      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00d      	beq.n	8002804 <HAL_I2C_EV_IRQHandler+0x2a0>
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 ff41 	bl	800367a <I2C_SlaveReceive_BTF>
 80027f8:	e004      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80027fa:	bf00      	nop
 80027fc:	e002      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027fe:	bf00      	nop
 8002800:	e000      	b.n	8002804 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002802:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b08a      	sub	sp, #40	; 0x28
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800282c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <HAL_I2C_ER_IRQHandler+0x5a>
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d010      	beq.n	8002864 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002852:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002862:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00d      	beq.n	800288a <HAL_I2C_ER_IRQHandler+0x80>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f043 0302 	orr.w	r3, r3, #2
 800287e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002888:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d03e      	beq.n	8002912 <HAL_I2C_ER_IRQHandler+0x108>
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d039      	beq.n	8002912 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800289e:	7efb      	ldrb	r3, [r7, #27]
 80028a0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80028b8:	7ebb      	ldrb	r3, [r7, #26]
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d112      	bne.n	80028e4 <HAL_I2C_ER_IRQHandler+0xda>
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10f      	bne.n	80028e4 <HAL_I2C_ER_IRQHandler+0xda>
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	2b21      	cmp	r3, #33	; 0x21
 80028c8:	d008      	beq.n	80028dc <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80028ca:	7cfb      	ldrb	r3, [r7, #19]
 80028cc:	2b29      	cmp	r3, #41	; 0x29
 80028ce:	d005      	beq.n	80028dc <HAL_I2C_ER_IRQHandler+0xd2>
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	2b28      	cmp	r3, #40	; 0x28
 80028d4:	d106      	bne.n	80028e4 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b21      	cmp	r3, #33	; 0x21
 80028da:	d103      	bne.n	80028e4 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f001 f865 	bl	80039ac <I2C_Slave_AF>
 80028e2:	e016      	b.n	8002912 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028f6:	7efb      	ldrb	r3, [r7, #27]
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d002      	beq.n	8002902 <HAL_I2C_ER_IRQHandler+0xf8>
 80028fc:	7efb      	ldrb	r3, [r7, #27]
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d107      	bne.n	8002912 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002910:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <HAL_I2C_ER_IRQHandler+0x12e>
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	f043 0308 	orr.w	r3, r3, #8
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002936:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f001 f8a2 	bl	8003a94 <I2C_ITError>
  }
}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
 80029ac:	4613      	mov	r3, r2
 80029ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d150      	bne.n	8002adc <I2C_MasterTransmit_TXE+0xc8>
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	2b21      	cmp	r3, #33	; 0x21
 8002a3e:	d14d      	bne.n	8002adc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d01d      	beq.n	8002a82 <I2C_MasterTransmit_TXE+0x6e>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d01a      	beq.n	8002a82 <I2C_MasterTransmit_TXE+0x6e>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a52:	d016      	beq.n	8002a82 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a62:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2211      	movs	r2, #17
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ff6c 	bl	8002958 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a80:	e060      	b.n	8002b44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a90:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	d107      	bne.n	8002acc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff81 	bl	80029cc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002aca:	e03b      	b.n	8002b44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff3f 	bl	8002958 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ada:	e033      	b.n	8002b44 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b21      	cmp	r3, #33	; 0x21
 8002ae0:	d005      	beq.n	8002aee <I2C_MasterTransmit_TXE+0xda>
 8002ae2:	7bbb      	ldrb	r3, [r7, #14]
 8002ae4:	2b40      	cmp	r3, #64	; 0x40
 8002ae6:	d12d      	bne.n	8002b44 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b22      	cmp	r3, #34	; 0x22
 8002aec:	d12a      	bne.n	8002b44 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d108      	bne.n	8002b0a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b08:	e01c      	b.n	8002b44 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d103      	bne.n	8002b1e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f88e 	bl	8002c38 <I2C_MemoryTransmit_TXE_BTF>
}
 8002b1c:	e012      	b.n	8002b44 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b42:	e7ff      	b.n	8002b44 <I2C_MasterTransmit_TXE+0x130>
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b21      	cmp	r3, #33	; 0x21
 8002b64:	d164      	bne.n	8002c30 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d012      	beq.n	8002b96 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002b94:	e04c      	b.n	8002c30 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d01d      	beq.n	8002bd8 <I2C_MasterTransmit_BTF+0x8c>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	d01a      	beq.n	8002bd8 <I2C_MasterTransmit_BTF+0x8c>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ba8:	d016      	beq.n	8002bd8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bb8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2211      	movs	r2, #17
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fec1 	bl	8002958 <HAL_I2C_MasterTxCpltCallback>
}
 8002bd6:	e02b      	b.n	8002c30 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002be6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d107      	bne.n	8002c22 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff fed6 	bl	80029cc <HAL_I2C_MemTxCpltCallback>
}
 8002c20:	e006      	b.n	8002c30 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff fe94 	bl	8002958 <HAL_I2C_MasterTxCpltCallback>
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d11d      	bne.n	8002c8c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d10b      	bne.n	8002c70 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c68:	1c9a      	adds	r2, r3, #2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002c6e:	e077      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	121b      	asrs	r3, r3, #8
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c8a:	e069      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d10b      	bne.n	8002cac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002caa:	e059      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d152      	bne.n	8002d5a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b22      	cmp	r3, #34	; 0x22
 8002cb8:	d10d      	bne.n	8002cd6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cd4:	e044      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d015      	beq.n	8002d0c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b21      	cmp	r3, #33	; 0x21
 8002ce4:	d112      	bne.n	8002d0c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d0a:	e029      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d124      	bne.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	2b21      	cmp	r3, #33	; 0x21
 8002d1a:	d121      	bne.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d2a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fe3a 	bl	80029cc <HAL_I2C_MemTxCpltCallback>
}
 8002d58:	e002      	b.n	8002d60 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff f884 	bl	8001e68 <I2C_Flush_DR>
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b22      	cmp	r3, #34	; 0x22
 8002d7a:	f040 80ac 	bne.w	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d921      	bls.n	8002dd0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	f040 808c 	bne.w	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dcc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002dce:	e082      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d075      	beq.n	8002ec4 <I2C_MasterReceive_RXNE+0x15c>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d002      	beq.n	8002de4 <I2C_MasterReceive_RXNE+0x7c>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d16f      	bne.n	8002ec4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f001 fb29 	bl	800443c <I2C_WaitOnSTOPRequestThroughIT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d142      	bne.n	8002e76 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d10a      	bne.n	8002e60 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fdc0 	bl	80029de <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e5e:	e03a      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2212      	movs	r2, #18
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fd7b 	bl	800296a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e74:	e02f      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e84:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fd97 	bl	80029f0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ec2:	e008      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed2:	605a      	str	r2, [r3, #4]
}
 8002ed4:	e7ff      	b.n	8002ed6 <I2C_MasterReceive_RXNE+0x16e>
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d11b      	bne.n	8002f2e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f04:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002f2c:	e0bd      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d129      	bne.n	8002f8c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f46:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d00a      	beq.n	8002f64 <I2C_MasterReceive_BTF+0x86>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d007      	beq.n	8002f64 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f8a:	e08e      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d176      	bne.n	8003084 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d002      	beq.n	8002fa2 <I2C_MasterReceive_BTF+0xc4>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d108      	bne.n	8002fb4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e019      	b.n	8002fe8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d002      	beq.n	8002fc0 <I2C_MasterReceive_BTF+0xe2>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d108      	bne.n	8002fd2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e00a      	b.n	8002fe8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d007      	beq.n	8002fe8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003042:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d10a      	bne.n	800306e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fcb9 	bl	80029de <HAL_I2C_MemRxCpltCallback>
}
 800306c:	e01d      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2212      	movs	r2, #18
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff fc74 	bl	800296a <HAL_I2C_MasterRxCpltCallback>
}
 8003082:	e012      	b.n	80030aa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d117      	bne.n	80030f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80030e0:	e067      	b.n	80031b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]
}
 80030f4:	e05d      	b.n	80031b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030fe:	d133      	bne.n	8003168 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b21      	cmp	r3, #33	; 0x21
 800310a:	d109      	bne.n	8003120 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e008      	b.n	8003132 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <I2C_Master_SB+0x92>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d108      	bne.n	8003156 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	d032      	beq.n	80031b2 <I2C_Master_SB+0x100>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	d02d      	beq.n	80031b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003164:	605a      	str	r2, [r3, #4]
}
 8003166:	e024      	b.n	80031b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10e      	bne.n	800318e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	b29b      	uxth	r3, r3
 8003176:	11db      	asrs	r3, r3, #7
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f003 0306 	and.w	r3, r3, #6
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f063 030f 	orn	r3, r3, #15
 8003184:	b2da      	uxtb	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	611a      	str	r2, [r3, #16]
}
 800318c:	e011      	b.n	80031b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10d      	bne.n	80031b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	b29b      	uxth	r3, r3
 800319c:	11db      	asrs	r3, r3, #7
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f003 0306 	and.w	r3, r3, #6
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f063 030e 	orn	r3, r3, #14
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <I2C_Master_ADD10+0x26>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d108      	bne.n	80031f4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <I2C_Master_ADD10+0x48>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003202:	605a      	str	r2, [r3, #4]
  }
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800320e:	b480      	push	{r7}
 8003210:	b091      	sub	sp, #68	; 0x44
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800321c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b22      	cmp	r3, #34	; 0x22
 8003236:	f040 8174 	bne.w	8003522 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10f      	bne.n	8003262 <I2C_Master_ADDR+0x54>
 8003242:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d10b      	bne.n	8003262 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324a:	2300      	movs	r3, #0
 800324c:	633b      	str	r3, [r7, #48]	; 0x30
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	e16b      	b.n	800353a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11d      	bne.n	80032a6 <I2C_Master_ADDR+0x98>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003272:	d118      	bne.n	80032a6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003298:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	651a      	str	r2, [r3, #80]	; 0x50
 80032a4:	e149      	b.n	800353a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d113      	bne.n	80032d8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b0:	2300      	movs	r3, #0
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e120      	b.n	800351a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	f040 808a 	bne.w	80033f8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ea:	d137      	bne.n	800335c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330a:	d113      	bne.n	8003334 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	e0f2      	b.n	800351a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003334:	2300      	movs	r3, #0
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	623b      	str	r3, [r7, #32]
 8003348:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e0de      	b.n	800351a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	2b08      	cmp	r3, #8
 8003360:	d02e      	beq.n	80033c0 <I2C_Master_ADDR+0x1b2>
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	2b20      	cmp	r3, #32
 8003366:	d02b      	beq.n	80033c0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	2b12      	cmp	r3, #18
 800336c:	d102      	bne.n	8003374 <I2C_Master_ADDR+0x166>
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	2b01      	cmp	r3, #1
 8003372:	d125      	bne.n	80033c0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	2b04      	cmp	r3, #4
 8003378:	d00e      	beq.n	8003398 <I2C_Master_ADDR+0x18a>
 800337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337c:	2b02      	cmp	r3, #2
 800337e:	d00b      	beq.n	8003398 <I2C_Master_ADDR+0x18a>
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	2b10      	cmp	r3, #16
 8003384:	d008      	beq.n	8003398 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e007      	b.n	80033a8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033a6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	e0ac      	b.n	800351a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e090      	b.n	800351a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d158      	bne.n	80034b4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	2b04      	cmp	r3, #4
 8003406:	d021      	beq.n	800344c <I2C_Master_ADDR+0x23e>
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	2b02      	cmp	r3, #2
 800340c:	d01e      	beq.n	800344c <I2C_Master_ADDR+0x23e>
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	2b10      	cmp	r3, #16
 8003412:	d01b      	beq.n	800344c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003422:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e012      	b.n	8003472 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800345a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003480:	d14b      	bne.n	800351a <I2C_Master_ADDR+0x30c>
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003488:	d00b      	beq.n	80034a2 <I2C_Master_ADDR+0x294>
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	2b01      	cmp	r3, #1
 800348e:	d008      	beq.n	80034a2 <I2C_Master_ADDR+0x294>
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	2b08      	cmp	r3, #8
 8003494:	d005      	beq.n	80034a2 <I2C_Master_ADDR+0x294>
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	2b10      	cmp	r3, #16
 800349a:	d002      	beq.n	80034a2 <I2C_Master_ADDR+0x294>
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d13b      	bne.n	800351a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	e032      	b.n	800351a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034c2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d2:	d117      	bne.n	8003504 <I2C_Master_ADDR+0x2f6>
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034da:	d00b      	beq.n	80034f4 <I2C_Master_ADDR+0x2e6>
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d008      	beq.n	80034f4 <I2C_Master_ADDR+0x2e6>
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d005      	beq.n	80034f4 <I2C_Master_ADDR+0x2e6>
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d002      	beq.n	80034f4 <I2C_Master_ADDR+0x2e6>
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d107      	bne.n	8003504 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003502:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003520:	e00b      	b.n	800353a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	68bb      	ldr	r3, [r7, #8]
}
 8003538:	e7ff      	b.n	800353a <I2C_Master_ADDR+0x32c>
 800353a:	bf00      	nop
 800353c:	3744      	adds	r7, #68	; 0x44
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d02b      	beq.n	80035b6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d114      	bne.n	80035b6 <I2C_SlaveTransmit_TXE+0x72>
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b29      	cmp	r3, #41	; 0x29
 8003590:	d111      	bne.n	80035b6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2221      	movs	r2, #33	; 0x21
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2228      	movs	r2, #40	; 0x28
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff f9e3 	bl	800297c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d011      	beq.n	80035f4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d02c      	beq.n	8003672 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d114      	bne.n	8003672 <I2C_SlaveReceive_RXNE+0x74>
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b2a      	cmp	r3, #42	; 0x2a
 800364c:	d111      	bne.n	8003672 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2222      	movs	r2, #34	; 0x22
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2228      	movs	r2, #40	; 0x28
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff f98e 	bl	800298e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036d6:	2b28      	cmp	r3, #40	; 0x28
 80036d8:	d125      	bne.n	8003726 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	81bb      	strh	r3, [r7, #12]
 8003708:	e002      	b.n	8003710 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003718:	89ba      	ldrh	r2, [r7, #12]
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	4619      	mov	r1, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff f93e 	bl	80029a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003724:	e00e      	b.n	8003744 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800376a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003798:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a8:	d172      	bne.n	8003890 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b22      	cmp	r3, #34	; 0x22
 80037ae:	d002      	beq.n	80037b6 <I2C_Slave_STOPF+0x6a>
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b2a      	cmp	r3, #42	; 0x2a
 80037b4:	d135      	bne.n	8003822 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f043 0204 	orr.w	r2, r3, #4
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe f84c 	bl	800188c <HAL_DMA_GetState>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d049      	beq.n	800388e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	4a69      	ldr	r2, [pc, #420]	; (80039a4 <I2C_Slave_STOPF+0x258>)
 8003800:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd ffc8 	bl	800179c <HAL_DMA_Abort_IT>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03d      	beq.n	800388e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800381c:	4610      	mov	r0, r2
 800381e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003820:	e035      	b.n	800388e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0204 	orr.w	r2, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003854:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe f816 	bl	800188c <HAL_DMA_GetState>
 8003860:	4603      	mov	r3, r0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d014      	beq.n	8003890 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386a:	4a4e      	ldr	r2, [pc, #312]	; (80039a4 <I2C_Slave_STOPF+0x258>)
 800386c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd ff92 	bl	800179c <HAL_DMA_Abort_IT>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003888:	4610      	mov	r0, r2
 800388a:	4798      	blx	r3
 800388c:	e000      	b.n	8003890 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800388e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d03e      	beq.n	8003918 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d112      	bne.n	80038ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d112      	bne.n	8003902 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f043 0204 	orr.w	r2, r3, #4
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f8b7 	bl	8003a94 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003926:	e039      	b.n	800399c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b2a      	cmp	r3, #42	; 0x2a
 800392c:	d109      	bne.n	8003942 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2228      	movs	r2, #40	; 0x28
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff f826 	bl	800298e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b28      	cmp	r3, #40	; 0x28
 800394c:	d111      	bne.n	8003972 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <I2C_Slave_STOPF+0x25c>)
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff f825 	bl	80029ba <HAL_I2C_ListenCpltCallback>
}
 8003970:	e014      	b.n	800399c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	2b22      	cmp	r3, #34	; 0x22
 8003978:	d002      	beq.n	8003980 <I2C_Slave_STOPF+0x234>
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b22      	cmp	r3, #34	; 0x22
 800397e:	d10d      	bne.n	800399c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fe fff9 	bl	800298e <HAL_I2C_SlaveRxCpltCallback>
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	08003f99 	.word	0x08003f99
 80039a8:	ffff0000 	.word	0xffff0000

080039ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d002      	beq.n	80039ce <I2C_Slave_AF+0x22>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d129      	bne.n	8003a22 <I2C_Slave_AF+0x76>
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b28      	cmp	r3, #40	; 0x28
 80039d2:	d126      	bne.n	8003a22 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a2e      	ldr	r2, [pc, #184]	; (8003a90 <I2C_Slave_AF+0xe4>)
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a02:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe ffcd 	bl	80029ba <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003a20:	e031      	b.n	8003a86 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b21      	cmp	r3, #33	; 0x21
 8003a26:	d129      	bne.n	8003a7c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <I2C_Slave_AF+0xe4>)
 8003a2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2221      	movs	r2, #33	; 0x21
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a52:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a5c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fe f9fa 	bl	8001e68 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fe ff81 	bl	800297c <HAL_I2C_SlaveTxCpltCallback>
}
 8003a7a:	e004      	b.n	8003a86 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a84:	615a      	str	r2, [r3, #20]
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	ffff0000 	.word	0xffff0000

08003a94 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aaa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003aac:	7bbb      	ldrb	r3, [r7, #14]
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d002      	beq.n	8003ab8 <I2C_ITError+0x24>
 8003ab2:	7bbb      	ldrb	r3, [r7, #14]
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d10a      	bne.n	8003ace <I2C_ITError+0x3a>
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b22      	cmp	r3, #34	; 0x22
 8003abc:	d107      	bne.n	8003ace <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003acc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ad4:	2b28      	cmp	r3, #40	; 0x28
 8003ad6:	d107      	bne.n	8003ae8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2228      	movs	r2, #40	; 0x28
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ae6:	e015      	b.n	8003b14 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af6:	d00a      	beq.n	8003b0e <I2C_ITError+0x7a>
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b60      	cmp	r3, #96	; 0x60
 8003afc:	d007      	beq.n	8003b0e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b22:	d162      	bne.n	8003bea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b32:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d020      	beq.n	8003b84 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	4a6a      	ldr	r2, [pc, #424]	; (8003cf0 <I2C_ITError+0x25c>)
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd fe24 	bl	800179c <HAL_DMA_Abort_IT>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8089 	beq.w	8003c6e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4798      	blx	r3
 8003b82:	e074      	b.n	8003c6e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	4a59      	ldr	r2, [pc, #356]	; (8003cf0 <I2C_ITError+0x25c>)
 8003b8a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fd fe03 	bl	800179c <HAL_DMA_Abort_IT>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d068      	beq.n	8003c6e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d10b      	bne.n	8003bc2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003be4:	4610      	mov	r0, r2
 8003be6:	4798      	blx	r3
 8003be8:	e041      	b.n	8003c6e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b60      	cmp	r3, #96	; 0x60
 8003bf4:	d125      	bne.n	8003c42 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d10b      	bne.n	8003c2a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fe fee1 	bl	8002a02 <HAL_I2C_AbortCpltCallback>
 8003c40:	e015      	b.n	8003c6e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d10b      	bne.n	8003c68 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7fe fec1 	bl	80029f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10e      	bne.n	8003c9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003caa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d113      	bne.n	8003ce8 <I2C_ITError+0x254>
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b28      	cmp	r3, #40	; 0x28
 8003cc4:	d110      	bne.n	8003ce8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <I2C_ITError+0x260>)
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fe fe69 	bl	80029ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	08003f99 	.word	0x08003f99
 8003cf4:	ffff0000 	.word	0xffff0000

08003cf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	460b      	mov	r3, r1
 8003d06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d006      	beq.n	8003d22 <I2C_MasterRequestWrite+0x2a>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d003      	beq.n	8003d22 <I2C_MasterRequestWrite+0x2a>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d20:	d108      	bne.n	8003d34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e00b      	b.n	8003d4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	2b12      	cmp	r3, #18
 8003d3a:	d107      	bne.n	8003d4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f9c5 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00d      	beq.n	8003d80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d72:	d103      	bne.n	8003d7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e035      	b.n	8003dec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d88:	d108      	bne.n	8003d9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d98:	611a      	str	r2, [r3, #16]
 8003d9a:	e01b      	b.n	8003dd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d9c:	897b      	ldrh	r3, [r7, #10]
 8003d9e:	11db      	asrs	r3, r3, #7
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f003 0306 	and.w	r3, r3, #6
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f063 030f 	orn	r3, r3, #15
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	490e      	ldr	r1, [pc, #56]	; (8003df4 <I2C_MasterRequestWrite+0xfc>)
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fa0e 	bl	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e010      	b.n	8003dec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dca:	897b      	ldrh	r3, [r7, #10]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4907      	ldr	r1, [pc, #28]	; (8003df8 <I2C_MasterRequestWrite+0x100>)
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f9fe 	bl	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	00010008 	.word	0x00010008
 8003df8:	00010002 	.word	0x00010002

08003dfc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d006      	beq.n	8003e36 <I2C_MasterRequestRead+0x3a>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d003      	beq.n	8003e36 <I2C_MasterRequestRead+0x3a>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e34:	d108      	bne.n	8003e48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e00b      	b.n	8003e60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	2b11      	cmp	r3, #17
 8003e4e:	d107      	bne.n	8003e60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f93b 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e86:	d103      	bne.n	8003e90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e079      	b.n	8003f88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9c:	d108      	bne.n	8003eb0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e9e:	897b      	ldrh	r3, [r7, #10]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	611a      	str	r2, [r3, #16]
 8003eae:	e05f      	b.n	8003f70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003eb0:	897b      	ldrh	r3, [r7, #10]
 8003eb2:	11db      	asrs	r3, r3, #7
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f003 0306 	and.w	r3, r3, #6
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f063 030f 	orn	r3, r3, #15
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4930      	ldr	r1, [pc, #192]	; (8003f90 <I2C_MasterRequestRead+0x194>)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f984 	bl	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e054      	b.n	8003f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ede:	897b      	ldrh	r3, [r7, #10]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4929      	ldr	r1, [pc, #164]	; (8003f94 <I2C_MasterRequestRead+0x198>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f974 	bl	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e044      	b.n	8003f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f8d9 	bl	80040e8 <I2C_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4a:	d103      	bne.n	8003f54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e017      	b.n	8003f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003f58:	897b      	ldrh	r3, [r7, #10]
 8003f5a:	11db      	asrs	r3, r3, #7
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f003 0306 	and.w	r3, r3, #6
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f063 030e 	orn	r3, r3, #14
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4907      	ldr	r1, [pc, #28]	; (8003f94 <I2C_MasterRequestRead+0x198>)
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f930 	bl	80041dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	00010008 	.word	0x00010008
 8003f94:	00010002 	.word	0x00010002

08003f98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fb2:	4b4b      	ldr	r3, [pc, #300]	; (80040e0 <I2C_DMAAbort+0x148>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	08db      	lsrs	r3, r3, #3
 8003fb8:	4a4a      	ldr	r2, [pc, #296]	; (80040e4 <I2C_DMAAbort+0x14c>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	0a1a      	lsrs	r2, r3, #8
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00da      	lsls	r2, r3, #3
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f043 0220 	orr.w	r2, r3, #32
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003fde:	e00a      	b.n	8003ff6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d0ea      	beq.n	8003fcc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	2200      	movs	r2, #0
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	2200      	movs	r2, #0
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004024:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2200      	movs	r2, #0
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004038:	2200      	movs	r2, #0
 800403a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	2200      	movs	r2, #0
 800404a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b60      	cmp	r3, #96	; 0x60
 8004066:	d10e      	bne.n	8004086 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7fe fcbf 	bl	8002a02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004084:	e027      	b.n	80040d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800408c:	2b28      	cmp	r3, #40	; 0x28
 800408e:	d117      	bne.n	80040c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2228      	movs	r2, #40	; 0x28
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040be:	e007      	b.n	80040d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80040d0:	6978      	ldr	r0, [r7, #20]
 80040d2:	f7fe fc8d 	bl	80029f0 <HAL_I2C_ErrorCallback>
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000008 	.word	0x20000008
 80040e4:	14f8b589 	.word	0x14f8b589

080040e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f8:	e048      	b.n	800418c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d044      	beq.n	800418c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7fc fd4f 	bl	8000ba4 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d302      	bcc.n	8004118 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d139      	bne.n	800418c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	0c1b      	lsrs	r3, r3, #16
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b01      	cmp	r3, #1
 8004120:	d10d      	bne.n	800413e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	43da      	mvns	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4013      	ands	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	e00c      	b.n	8004158 <I2C_WaitOnFlagUntilTimeout+0x70>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	43da      	mvns	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	429a      	cmp	r2, r3
 800415c:	d116      	bne.n	800418c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e023      	b.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d10d      	bne.n	80041b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	43da      	mvns	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	e00c      	b.n	80041cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	43da      	mvns	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d093      	beq.n	80040fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ea:	e071      	b.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fa:	d123      	bne.n	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004214:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	f043 0204 	orr.w	r2, r3, #4
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e067      	b.n	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d041      	beq.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424c:	f7fc fcaa 	bl	8000ba4 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d136      	bne.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10c      	bne.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	43da      	mvns	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4013      	ands	r3, r2
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	e00b      	b.n	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	43da      	mvns	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e021      	b.n	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	0c1b      	lsrs	r3, r3, #16
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d10c      	bne.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	43da      	mvns	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4013      	ands	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e00b      	b.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	f47f af6d 	bne.w	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004328:	e034      	b.n	8004394 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f915 	bl	800455a <I2C_IsAcknowledgeFailed>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e034      	b.n	80043a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d028      	beq.n	8004394 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fc fc2f 	bl	8000ba4 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11d      	bne.n	8004394 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b80      	cmp	r3, #128	; 0x80
 8004364:	d016      	beq.n	8004394 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e007      	b.n	80043a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439e:	2b80      	cmp	r3, #128	; 0x80
 80043a0:	d1c3      	bne.n	800432a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043b8:	e034      	b.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8cd 	bl	800455a <I2C_IsAcknowledgeFailed>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e034      	b.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d028      	beq.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fc fbe7 	bl	8000ba4 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d11d      	bne.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d016      	beq.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e007      	b.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b04      	cmp	r3, #4
 8004430:	d1c3      	bne.n	80043ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	4a13      	ldr	r2, [pc, #76]	; (800449c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	0a1a      	lsrs	r2, r3, #8
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b01      	subs	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f043 0220 	orr.w	r2, r3, #32
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e008      	b.n	800448c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004488:	d0e9      	beq.n	800445e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000008 	.word	0x20000008
 800449c:	14f8b589 	.word	0x14f8b589

080044a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044ac:	e049      	b.n	8004542 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d119      	bne.n	80044f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0210 	mvn.w	r2, #16
 80044c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e030      	b.n	8004552 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f0:	f7fc fb58 	bl	8000ba4 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11d      	bne.n	8004542 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d016      	beq.n	8004542 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f043 0220 	orr.w	r2, r3, #32
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e007      	b.n	8004552 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	d1ae      	bne.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004570:	d11b      	bne.n	80045aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800457a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f043 0204 	orr.w	r2, r3, #4
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045c6:	d103      	bne.n	80045d0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80045ce:	e007      	b.n	80045e0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045d8:	d102      	bne.n	80045e0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2208      	movs	r2, #8
 80045de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
	...

080045ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e272      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8087 	beq.w	800471a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800460c:	4b92      	ldr	r3, [pc, #584]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 030c 	and.w	r3, r3, #12
 8004614:	2b04      	cmp	r3, #4
 8004616:	d00c      	beq.n	8004632 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004618:	4b8f      	ldr	r3, [pc, #572]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b08      	cmp	r3, #8
 8004622:	d112      	bne.n	800464a <HAL_RCC_OscConfig+0x5e>
 8004624:	4b8c      	ldr	r3, [pc, #560]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d10b      	bne.n	800464a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004632:	4b89      	ldr	r3, [pc, #548]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d06c      	beq.n	8004718 <HAL_RCC_OscConfig+0x12c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d168      	bne.n	8004718 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e24c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004652:	d106      	bne.n	8004662 <HAL_RCC_OscConfig+0x76>
 8004654:	4b80      	ldr	r3, [pc, #512]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a7f      	ldr	r2, [pc, #508]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800465a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	e02e      	b.n	80046c0 <HAL_RCC_OscConfig+0xd4>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10c      	bne.n	8004684 <HAL_RCC_OscConfig+0x98>
 800466a:	4b7b      	ldr	r3, [pc, #492]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a7a      	ldr	r2, [pc, #488]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b78      	ldr	r3, [pc, #480]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a77      	ldr	r2, [pc, #476]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800467c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e01d      	b.n	80046c0 <HAL_RCC_OscConfig+0xd4>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0xbc>
 800468e:	4b72      	ldr	r3, [pc, #456]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a71      	ldr	r2, [pc, #452]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b6f      	ldr	r3, [pc, #444]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6e      	ldr	r2, [pc, #440]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e00b      	b.n	80046c0 <HAL_RCC_OscConfig+0xd4>
 80046a8:	4b6b      	ldr	r3, [pc, #428]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a6a      	ldr	r2, [pc, #424]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b68      	ldr	r3, [pc, #416]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a67      	ldr	r2, [pc, #412]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d013      	beq.n	80046f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fc fa6c 	bl	8000ba4 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d0:	f7fc fa68 	bl	8000ba4 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	; 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e200      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	4b5d      	ldr	r3, [pc, #372]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0xe4>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fc fa58 	bl	8000ba4 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f8:	f7fc fa54 	bl	8000ba4 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	; 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1ec      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470a:	4b53      	ldr	r3, [pc, #332]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x10c>
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d063      	beq.n	80047ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004726:	4b4c      	ldr	r3, [pc, #304]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004732:	4b49      	ldr	r3, [pc, #292]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b08      	cmp	r3, #8
 800473c:	d11c      	bne.n	8004778 <HAL_RCC_OscConfig+0x18c>
 800473e:	4b46      	ldr	r3, [pc, #280]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d116      	bne.n	8004778 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474a:	4b43      	ldr	r3, [pc, #268]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_RCC_OscConfig+0x176>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d001      	beq.n	8004762 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e1c0      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004762:	4b3d      	ldr	r3, [pc, #244]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4939      	ldr	r1, [pc, #228]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004776:	e03a      	b.n	80047ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004780:	4b36      	ldr	r3, [pc, #216]	; (800485c <HAL_RCC_OscConfig+0x270>)
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004786:	f7fc fa0d 	bl	8000ba4 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478e:	f7fc fa09 	bl	8000ba4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e1a1      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ac:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4927      	ldr	r1, [pc, #156]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]
 80047c0:	e015      	b.n	80047ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c2:	4b26      	ldr	r3, [pc, #152]	; (800485c <HAL_RCC_OscConfig+0x270>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fc f9ec 	bl	8000ba4 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d0:	f7fc f9e8 	bl	8000ba4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e180      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d03a      	beq.n	8004870 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d019      	beq.n	8004836 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004802:	4b17      	ldr	r3, [pc, #92]	; (8004860 <HAL_RCC_OscConfig+0x274>)
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004808:	f7fc f9cc 	bl	8000ba4 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004810:	f7fc f9c8 	bl	8000ba4 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e160      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <HAL_RCC_OscConfig+0x26c>)
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800482e:	2001      	movs	r0, #1
 8004830:	f000 face 	bl	8004dd0 <RCC_Delay>
 8004834:	e01c      	b.n	8004870 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_RCC_OscConfig+0x274>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483c:	f7fc f9b2 	bl	8000ba4 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004842:	e00f      	b.n	8004864 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004844:	f7fc f9ae 	bl	8000ba4 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d908      	bls.n	8004864 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e146      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	42420000 	.word	0x42420000
 8004860:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004864:	4b92      	ldr	r3, [pc, #584]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e9      	bne.n	8004844 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80a6 	beq.w	80049ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004882:	4b8b      	ldr	r3, [pc, #556]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10d      	bne.n	80048aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800488e:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4a87      	ldr	r2, [pc, #540]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004898:	61d3      	str	r3, [r2, #28]
 800489a:	4b85      	ldr	r3, [pc, #532]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048aa:	4b82      	ldr	r3, [pc, #520]	; (8004ab4 <HAL_RCC_OscConfig+0x4c8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d118      	bne.n	80048e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b6:	4b7f      	ldr	r3, [pc, #508]	; (8004ab4 <HAL_RCC_OscConfig+0x4c8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a7e      	ldr	r2, [pc, #504]	; (8004ab4 <HAL_RCC_OscConfig+0x4c8>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c2:	f7fc f96f 	bl	8000ba4 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ca:	f7fc f96b 	bl	8000ba4 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b64      	cmp	r3, #100	; 0x64
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e103      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048dc:	4b75      	ldr	r3, [pc, #468]	; (8004ab4 <HAL_RCC_OscConfig+0x4c8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d106      	bne.n	80048fe <HAL_RCC_OscConfig+0x312>
 80048f0:	4b6f      	ldr	r3, [pc, #444]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4a6e      	ldr	r2, [pc, #440]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6213      	str	r3, [r2, #32]
 80048fc:	e02d      	b.n	800495a <HAL_RCC_OscConfig+0x36e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x334>
 8004906:	4b6a      	ldr	r3, [pc, #424]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	4a69      	ldr	r2, [pc, #420]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	f023 0301 	bic.w	r3, r3, #1
 8004910:	6213      	str	r3, [r2, #32]
 8004912:	4b67      	ldr	r3, [pc, #412]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4a66      	ldr	r2, [pc, #408]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	6213      	str	r3, [r2, #32]
 800491e:	e01c      	b.n	800495a <HAL_RCC_OscConfig+0x36e>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2b05      	cmp	r3, #5
 8004926:	d10c      	bne.n	8004942 <HAL_RCC_OscConfig+0x356>
 8004928:	4b61      	ldr	r3, [pc, #388]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	4a60      	ldr	r2, [pc, #384]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	f043 0304 	orr.w	r3, r3, #4
 8004932:	6213      	str	r3, [r2, #32]
 8004934:	4b5e      	ldr	r3, [pc, #376]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	4a5d      	ldr	r2, [pc, #372]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6213      	str	r3, [r2, #32]
 8004940:	e00b      	b.n	800495a <HAL_RCC_OscConfig+0x36e>
 8004942:	4b5b      	ldr	r3, [pc, #364]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	4a5a      	ldr	r2, [pc, #360]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	6213      	str	r3, [r2, #32]
 800494e:	4b58      	ldr	r3, [pc, #352]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4a57      	ldr	r2, [pc, #348]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	f023 0304 	bic.w	r3, r3, #4
 8004958:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d015      	beq.n	800498e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004962:	f7fc f91f 	bl	8000ba4 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004968:	e00a      	b.n	8004980 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496a:	f7fc f91b 	bl	8000ba4 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	4293      	cmp	r3, r2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e0b1      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004980:	4b4b      	ldr	r3, [pc, #300]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ee      	beq.n	800496a <HAL_RCC_OscConfig+0x37e>
 800498c:	e014      	b.n	80049b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498e:	f7fc f909 	bl	8000ba4 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004994:	e00a      	b.n	80049ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fc f905 	bl	8000ba4 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e09b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ac:	4b40      	ldr	r3, [pc, #256]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1ee      	bne.n	8004996 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d105      	bne.n	80049ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049be:	4b3c      	ldr	r3, [pc, #240]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80049c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8087 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049d4:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d061      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d146      	bne.n	8004a76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e8:	4b33      	ldr	r3, [pc, #204]	; (8004ab8 <HAL_RCC_OscConfig+0x4cc>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fc f8d9 	bl	8000ba4 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f6:	f7fc f8d5 	bl	8000ba4 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e06d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a08:	4b29      	ldr	r3, [pc, #164]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d108      	bne.n	8004a30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a1e:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	4921      	ldr	r1, [pc, #132]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a30:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a19      	ldr	r1, [r3, #32]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	430b      	orrs	r3, r1
 8004a42:	491b      	ldr	r1, [pc, #108]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a48:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_RCC_OscConfig+0x4cc>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fc f8a9 	bl	8000ba4 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a56:	f7fc f8a5 	bl	8000ba4 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e03d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x46a>
 8004a74:	e035      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <HAL_RCC_OscConfig+0x4cc>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7c:	f7fc f892 	bl	8000ba4 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fc f88e 	bl	8000ba4 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e026      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x498>
 8004aa2:	e01e      	b.n	8004ae2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e019      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCC_OscConfig+0x500>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d106      	bne.n	8004ade <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000

08004af0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0d0      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b04:	4b6a      	ldr	r3, [pc, #424]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d910      	bls.n	8004b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b12:	4b67      	ldr	r3, [pc, #412]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 0207 	bic.w	r2, r3, #7
 8004b1a:	4965      	ldr	r1, [pc, #404]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b22:	4b63      	ldr	r3, [pc, #396]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d001      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0b8      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d020      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b4c:	4b59      	ldr	r3, [pc, #356]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4a58      	ldr	r2, [pc, #352]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b64:	4b53      	ldr	r3, [pc, #332]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4a52      	ldr	r2, [pc, #328]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b70:	4b50      	ldr	r3, [pc, #320]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	494d      	ldr	r1, [pc, #308]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d040      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d107      	bne.n	8004ba6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b47      	ldr	r3, [pc, #284]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d115      	bne.n	8004bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e07f      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d107      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bae:	4b41      	ldr	r3, [pc, #260]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e073      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbe:	4b3d      	ldr	r3, [pc, #244]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e06b      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f023 0203 	bic.w	r2, r3, #3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4936      	ldr	r1, [pc, #216]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004be0:	f7fb ffe0 	bl	8000ba4 <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be8:	f7fb ffdc 	bl	8000ba4 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e053      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfe:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 020c 	and.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d1eb      	bne.n	8004be8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d210      	bcs.n	8004c40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1e:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 0207 	bic.w	r2, r3, #7
 8004c26:	4922      	ldr	r1, [pc, #136]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2e:	4b20      	ldr	r3, [pc, #128]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e032      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4916      	ldr	r1, [pc, #88]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	490e      	ldr	r1, [pc, #56]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c7e:	f000 f821 	bl	8004cc4 <HAL_RCC_GetSysClockFreq>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	490a      	ldr	r1, [pc, #40]	; (8004cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c90:	5ccb      	ldrb	r3, [r1, r3]
 8004c92:	fa22 f303 	lsr.w	r3, r2, r3
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <HAL_RCC_ClockConfig+0x1cc>)
 8004c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCC_ClockConfig+0x1d0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fb ff3e 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40022000 	.word	0x40022000
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	0800ab3c 	.word	0x0800ab3c
 8004cbc:	20000008 	.word	0x20000008
 8004cc0:	2000000c 	.word	0x2000000c

08004cc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cde:	4b1e      	ldr	r3, [pc, #120]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d002      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x30>
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d003      	beq.n	8004cfa <HAL_RCC_GetSysClockFreq+0x36>
 8004cf2:	e027      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cf4:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x98>)
 8004cf6:	613b      	str	r3, [r7, #16]
      break;
 8004cf8:	e027      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	0c9b      	lsrs	r3, r3, #18
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d04:	5cd3      	ldrb	r3, [r2, r3]
 8004d06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d010      	beq.n	8004d34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d12:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	0c5b      	lsrs	r3, r3, #17
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	4a11      	ldr	r2, [pc, #68]	; (8004d64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d1e:	5cd3      	ldrb	r3, [r2, r3]
 8004d20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a0d      	ldr	r2, [pc, #52]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d26:	fb03 f202 	mul.w	r2, r3, r2
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	e004      	b.n	8004d3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a0c      	ldr	r2, [pc, #48]	; (8004d68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d38:	fb02 f303 	mul.w	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	613b      	str	r3, [r7, #16]
      break;
 8004d42:	e002      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d46:	613b      	str	r3, [r7, #16]
      break;
 8004d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4a:	693b      	ldr	r3, [r7, #16]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	007a1200 	.word	0x007a1200
 8004d60:	0800ab54 	.word	0x0800ab54
 8004d64:	0800ab64 	.word	0x0800ab64
 8004d68:	003d0900 	.word	0x003d0900

08004d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d70:	4b02      	ldr	r3, [pc, #8]	; (8004d7c <HAL_RCC_GetHCLKFreq+0x10>)
 8004d72:	681b      	ldr	r3, [r3, #0]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr
 8004d7c:	20000008 	.word	0x20000008

08004d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d84:	f7ff fff2 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	0a1b      	lsrs	r3, r3, #8
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4903      	ldr	r1, [pc, #12]	; (8004da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	0800ab4c 	.word	0x0800ab4c

08004da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dac:	f7ff ffde 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	0adb      	lsrs	r3, r3, #11
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	4903      	ldr	r1, [pc, #12]	; (8004dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	0800ab4c 	.word	0x0800ab4c

08004dd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <RCC_Delay+0x34>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a0a      	ldr	r2, [pc, #40]	; (8004e08 <RCC_Delay+0x38>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	0a5b      	lsrs	r3, r3, #9
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004dec:	bf00      	nop
  }
  while (Delay --);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1e5a      	subs	r2, r3, #1
 8004df2:	60fa      	str	r2, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f9      	bne.n	8004dec <RCC_Delay+0x1c>
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr
 8004e04:	20000008 	.word	0x20000008
 8004e08:	10624dd3 	.word	0x10624dd3

08004e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e042      	b.n	8004ea4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fb fd6a 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	; 0x24
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f91d 	bl	8005090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d16d      	bne.n	8004fa8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_UART_Transmit+0x2c>
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e066      	b.n	8004faa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2221      	movs	r2, #33	; 0x21
 8004ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eea:	f7fb fe5b 	bl	8000ba4 <HAL_GetTick>
 8004eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f04:	d108      	bne.n	8004f18 <HAL_UART_Transmit+0x6c>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e003      	b.n	8004f20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f20:	e02a      	b.n	8004f78 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2180      	movs	r1, #128	; 0x80
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f840 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e036      	b.n	8004faa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	3302      	adds	r3, #2
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	e007      	b.n	8004f6a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3301      	adds	r3, #1
 8004f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1cf      	bne.n	8004f22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2140      	movs	r1, #64	; 0x40
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f810 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e006      	b.n	8004faa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b090      	sub	sp, #64	; 0x40
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc2:	e050      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d04c      	beq.n	8005066 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd2:	f7fb fde7 	bl	8000ba4 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d241      	bcs.n	8005066 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	330c      	adds	r3, #12
 8005000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005002:	637a      	str	r2, [r7, #52]	; 0x34
 8005004:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e5      	bne.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3314      	adds	r3, #20
 800501c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	613b      	str	r3, [r7, #16]
   return(result);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	63bb      	str	r3, [r7, #56]	; 0x38
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3314      	adds	r3, #20
 8005034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005036:	623a      	str	r2, [r7, #32]
 8005038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	69f9      	ldr	r1, [r7, #28]
 800503c:	6a3a      	ldr	r2, [r7, #32]
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	61bb      	str	r3, [r7, #24]
   return(result);
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e5      	bne.n	8005016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e00f      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	429a      	cmp	r2, r3
 8005082:	d09f      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3740      	adds	r7, #64	; 0x40
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80050ca:	f023 030c 	bic.w	r3, r3, #12
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	430b      	orrs	r3, r1
 80050d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2c      	ldr	r2, [pc, #176]	; (80051a4 <UART_SetConfig+0x114>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050f8:	f7ff fe56 	bl	8004da8 <HAL_RCC_GetPCLK2Freq>
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	e002      	b.n	8005106 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005100:	f7ff fe3e 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 8005104:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	009a      	lsls	r2, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	4a22      	ldr	r2, [pc, #136]	; (80051a8 <UART_SetConfig+0x118>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	0119      	lsls	r1, r3, #4
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009a      	lsls	r2, r3, #2
 8005130:	441a      	add	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	fbb2 f2f3 	udiv	r2, r2, r3
 800513c:	4b1a      	ldr	r3, [pc, #104]	; (80051a8 <UART_SetConfig+0x118>)
 800513e:	fba3 0302 	umull	r0, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	2064      	movs	r0, #100	; 0x64
 8005146:	fb00 f303 	mul.w	r3, r0, r3
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	3332      	adds	r3, #50	; 0x32
 8005150:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <UART_SetConfig+0x118>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800515c:	4419      	add	r1, r3
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009a      	lsls	r2, r3, #2
 8005168:	441a      	add	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	fbb2 f2f3 	udiv	r2, r2, r3
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <UART_SetConfig+0x118>)
 8005176:	fba3 0302 	umull	r0, r3, r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2064      	movs	r0, #100	; 0x64
 800517e:	fb00 f303 	mul.w	r3, r0, r3
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	3332      	adds	r3, #50	; 0x32
 8005188:	4a07      	ldr	r2, [pc, #28]	; (80051a8 <UART_SetConfig+0x118>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	f003 020f 	and.w	r2, r3, #15
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	440a      	add	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40013800 	.word	0x40013800
 80051a8:	51eb851f 	.word	0x51eb851f

080051ac <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f001 fcaa 	bl	8006b16 <VL53L0X_get_offset_calibration_data_micro_meter>
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80051c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80051d4:	b5b0      	push	{r4, r5, r7, lr}
 80051d6:	b096      	sub	sp, #88	; 0x58
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051dc:	2300      	movs	r3, #0
 80051de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80051e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d107      	bne.n	80051fa <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80051ea:	2200      	movs	r2, #0
 80051ec:	2188      	movs	r1, #136	; 0x88
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f004 fe9a 	bl	8009f28 <VL53L0X_WrByte>
 80051f4:	4603      	mov	r3, r0
 80051f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005208:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005212:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a9e      	ldr	r2, [pc, #632]	; (8005494 <VL53L0X_DataInit+0x2c0>)
 800521a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a9d      	ldr	r2, [pc, #628]	; (8005498 <VL53L0X_DataInit+0x2c4>)
 8005222:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800522c:	f107 0310 	add.w	r3, r7, #16
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fac1 	bl	80057ba <VL53L0X_GetDeviceParameters>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800523e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005242:	2b00      	cmp	r3, #0
 8005244:	d112      	bne.n	800526c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005246:	2300      	movs	r3, #0
 8005248:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800524a:	2300      	movs	r3, #0
 800524c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f103 0410 	add.w	r4, r3, #16
 8005254:	f107 0510 	add.w	r5, r7, #16
 8005258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800525a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800525c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800525e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005264:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2264      	movs	r2, #100	; 0x64
 8005270:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f44f 7261 	mov.w	r2, #900	; 0x384
 800527a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005284:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800528e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800529a:	2201      	movs	r2, #1
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f004 fe42 	bl	8009f28 <VL53L0X_WrByte>
 80052a4:	4603      	mov	r3, r0
 80052a6:	461a      	mov	r2, r3
 80052a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80052b2:	2201      	movs	r2, #1
 80052b4:	21ff      	movs	r1, #255	; 0xff
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f004 fe36 	bl	8009f28 <VL53L0X_WrByte>
 80052bc:	4603      	mov	r3, r0
 80052be:	461a      	mov	r2, r3
 80052c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2100      	movs	r1, #0
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f004 fe2a 	bl	8009f28 <VL53L0X_WrByte>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052dc:	4313      	orrs	r3, r2
 80052de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80052e2:	f107 030f 	add.w	r3, r7, #15
 80052e6:	461a      	mov	r2, r3
 80052e8:	2191      	movs	r1, #145	; 0x91
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f004 fe9e 	bl	800a02c <VL53L0X_RdByte>
 80052f0:	4603      	mov	r3, r0
 80052f2:	461a      	mov	r2, r3
 80052f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80052fe:	7bfa      	ldrb	r2, [r7, #15]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005306:	2201      	movs	r2, #1
 8005308:	2100      	movs	r1, #0
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f004 fe0c 	bl	8009f28 <VL53L0X_WrByte>
 8005310:	4603      	mov	r3, r0
 8005312:	461a      	mov	r2, r3
 8005314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005318:	4313      	orrs	r3, r2
 800531a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800531e:	2200      	movs	r2, #0
 8005320:	21ff      	movs	r1, #255	; 0xff
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f004 fe00 	bl	8009f28 <VL53L0X_WrByte>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005330:	4313      	orrs	r3, r2
 8005332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005336:	2200      	movs	r2, #0
 8005338:	2180      	movs	r1, #128	; 0x80
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f004 fdf4 	bl	8009f28 <VL53L0X_WrByte>
 8005340:	4603      	mov	r3, r0
 8005342:	461a      	mov	r2, r3
 8005344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005348:	4313      	orrs	r3, r2
 800534a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800534e:	2300      	movs	r3, #0
 8005350:	653b      	str	r3, [r7, #80]	; 0x50
 8005352:	e014      	b.n	800537e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005354:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005358:	2b00      	cmp	r3, #0
 800535a:	d114      	bne.n	8005386 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800535c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800535e:	b29b      	uxth	r3, r3
 8005360:	2201      	movs	r2, #1
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fd31 	bl	8005dcc <VL53L0X_SetLimitCheckEnable>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005372:	4313      	orrs	r3, r2
 8005374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537a:	3301      	adds	r3, #1
 800537c:	653b      	str	r3, [r7, #80]	; 0x50
 800537e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005380:	2b05      	cmp	r3, #5
 8005382:	dde7      	ble.n	8005354 <VL53L0X_DataInit+0x180>
 8005384:	e000      	b.n	8005388 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005386:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005388:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800538c:	2b00      	cmp	r3, #0
 800538e:	d107      	bne.n	80053a0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005390:	2200      	movs	r2, #0
 8005392:	2102      	movs	r1, #2
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fd19 	bl	8005dcc <VL53L0X_SetLimitCheckEnable>
 800539a:	4603      	mov	r3, r0
 800539c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80053a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d107      	bne.n	80053b8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80053a8:	2200      	movs	r2, #0
 80053aa:	2103      	movs	r1, #3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fd0d 	bl	8005dcc <VL53L0X_SetLimitCheckEnable>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80053b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d107      	bne.n	80053d0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80053c0:	2200      	movs	r2, #0
 80053c2:	2104      	movs	r1, #4
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fd01 	bl	8005dcc <VL53L0X_SetLimitCheckEnable>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80053d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d107      	bne.n	80053e8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80053d8:	2200      	movs	r2, #0
 80053da:	2105      	movs	r1, #5
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fcf5 	bl	8005dcc <VL53L0X_SetLimitCheckEnable>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80053e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d108      	bne.n	8005402 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80053f0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80053f4:	2100      	movs	r1, #0
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fd96 	bl	8005f28 <VL53L0X_SetLimitCheckValue>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005402:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005406:	2b00      	cmp	r3, #0
 8005408:	d108      	bne.n	800541c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800540a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800540e:	2101      	movs	r1, #1
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fd89 	bl	8005f28 <VL53L0X_SetLimitCheckValue>
 8005416:	4603      	mov	r3, r0
 8005418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800541c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005420:	2b00      	cmp	r3, #0
 8005422:	d108      	bne.n	8005436 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005424:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005428:	2102      	movs	r1, #2
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fd7c 	bl	8005f28 <VL53L0X_SetLimitCheckValue>
 8005430:	4603      	mov	r3, r0
 8005432:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005436:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800543a:	2b00      	cmp	r3, #0
 800543c:	d107      	bne.n	800544e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800543e:	2200      	movs	r2, #0
 8005440:	2103      	movs	r1, #3
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fd70 	bl	8005f28 <VL53L0X_SetLimitCheckValue>
 8005448:	4603      	mov	r3, r0
 800544a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800544e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10f      	bne.n	8005476 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	22ff      	movs	r2, #255	; 0xff
 800545a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800545e:	22ff      	movs	r2, #255	; 0xff
 8005460:	2101      	movs	r1, #1
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f004 fd60 	bl	8009f28 <VL53L0X_WrByte>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005476:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005486:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800548a:	4618      	mov	r0, r3
 800548c:	3758      	adds	r7, #88	; 0x58
 800548e:	46bd      	mov	sp, r7
 8005490:	bdb0      	pop	{r4, r5, r7, pc}
 8005492:	bf00      	nop
 8005494:	00016b85 	.word	0x00016b85
 8005498:	000970a4 	.word	0x000970a4

0800549c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800549c:	b5b0      	push	{r4, r5, r7, lr}
 800549e:	b09e      	sub	sp, #120	; 0x78
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80054aa:	f107 031c 	add.w	r3, r7, #28
 80054ae:	2240      	movs	r2, #64	; 0x40
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f004 fe88 	bl	800a1c8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80054d8:	2101      	movs	r1, #1
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f002 fa6d 	bl	80079ba <VL53L0X_get_info_from_device>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80054ec:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80054f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80054f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d80d      	bhi.n	800551c <VL53L0X_StaticInit+0x80>
 8005500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005504:	2b01      	cmp	r3, #1
 8005506:	d102      	bne.n	800550e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800550a:	2b20      	cmp	r3, #32
 800550c:	d806      	bhi.n	800551c <VL53L0X_StaticInit+0x80>
 800550e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10e      	bne.n	8005534 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005518:	2b0c      	cmp	r3, #12
 800551a:	d90b      	bls.n	8005534 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800551c:	f107 0218 	add.w	r2, r7, #24
 8005520:	f107 0314 	add.w	r3, r7, #20
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 fcef 	bl	8006f0a <VL53L0X_perform_ref_spad_management>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005532:	e009      	b.n	8005548 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005538:	461a      	mov	r2, r3
 800553a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 fef0 	bl	8007322 <VL53L0X_set_reference_spads>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005548:	4b94      	ldr	r3, [pc, #592]	; (800579c <VL53L0X_StaticInit+0x300>)
 800554a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800554c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10f      	bne.n	8005574 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800555a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800555e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800556c:	66bb      	str	r3, [r7, #104]	; 0x68
 800556e:	e001      	b.n	8005574 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005570:	4b8a      	ldr	r3, [pc, #552]	; (800579c <VL53L0X_StaticInit+0x300>)
 8005572:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005574:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800557c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f003 fdbc 	bl	80090fc <VL53L0X_load_tuning_settings>
 8005584:	4603      	mov	r3, r0
 8005586:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800558a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005592:	2300      	movs	r3, #0
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	2304      	movs	r3, #4
 8005598:	2200      	movs	r2, #0
 800559a:	2100      	movs	r1, #0
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f001 f8eb 	bl	8006778 <VL53L0X_SetGpioConfig>
 80055a2:	4603      	mov	r3, r0
 80055a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d121      	bne.n	80055f4 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80055b0:	2201      	movs	r2, #1
 80055b2:	21ff      	movs	r1, #255	; 0xff
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f004 fcb7 	bl	8009f28 <VL53L0X_WrByte>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80055c0:	f107 031a 	add.w	r3, r7, #26
 80055c4:	461a      	mov	r2, r3
 80055c6:	2184      	movs	r1, #132	; 0x84
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f004 fd59 	bl	800a080 <VL53L0X_RdWord>
 80055ce:	4603      	mov	r3, r0
 80055d0:	461a      	mov	r2, r3
 80055d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80055dc:	2200      	movs	r2, #0
 80055de:	21ff      	movs	r1, #255	; 0xff
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f004 fca1 	bl	8009f28 <VL53L0X_WrByte>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d105      	bne.n	8005608 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80055fc:	8b7b      	ldrh	r3, [r7, #26]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	461a      	mov	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005608:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800560c:	2b00      	cmp	r3, #0
 800560e:	d108      	bne.n	8005622 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005610:	f107 031c 	add.w	r3, r7, #28
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8cf 	bl	80057ba <VL53L0X_GetDeviceParameters>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8005622:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005626:	2b00      	cmp	r3, #0
 8005628:	d110      	bne.n	800564c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800562a:	f107 0319 	add.w	r3, r7, #25
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f991 	bl	8005958 <VL53L0X_GetFractionEnable>
 8005636:	4603      	mov	r3, r0
 8005638:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800563c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005640:	2b00      	cmp	r3, #0
 8005642:	d103      	bne.n	800564c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005644:	7e7a      	ldrb	r2, [r7, #25]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800564c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10e      	bne.n	8005672 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f103 0410 	add.w	r4, r3, #16
 800565a:	f107 051c 	add.w	r5, r7, #28
 800565e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800566a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800566e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8005672:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005676:	2b00      	cmp	r3, #0
 8005678:	d111      	bne.n	800569e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800567a:	f107 0319 	add.w	r3, r7, #25
 800567e:	461a      	mov	r2, r3
 8005680:	2101      	movs	r1, #1
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f004 fcd2 	bl	800a02c <VL53L0X_RdByte>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800568e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005696:	7e7a      	ldrb	r2, [r7, #25]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800569e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80056a6:	2200      	movs	r2, #0
 80056a8:	2100      	movs	r1, #0
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f9c8 	bl	8005a40 <VL53L0X_SetSequenceStepEnable>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80056b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d107      	bne.n	80056ce <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80056be:	2200      	movs	r2, #0
 80056c0:	2102      	movs	r1, #2
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f9bc 	bl	8005a40 <VL53L0X_SetSequenceStepEnable>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80056ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2203      	movs	r2, #3
 80056da:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80056de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80056e6:	f107 0313 	add.w	r3, r7, #19
 80056ea:	461a      	mov	r2, r3
 80056ec:	2100      	movs	r1, #0
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f98f 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80056fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005702:	7cfa      	ldrb	r2, [r7, #19]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800570a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800570e:	2b00      	cmp	r3, #0
 8005710:	d109      	bne.n	8005726 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005712:	f107 0313 	add.w	r3, r7, #19
 8005716:	461a      	mov	r2, r3
 8005718:	2101      	movs	r1, #1
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f979 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 8005720:	4603      	mov	r3, r0
 8005722:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005726:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800572a:	2b00      	cmp	r3, #0
 800572c:	d103      	bne.n	8005736 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800572e:	7cfa      	ldrb	r2, [r7, #19]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005736:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800573e:	f107 030c 	add.w	r3, r7, #12
 8005742:	461a      	mov	r2, r3
 8005744:	2103      	movs	r1, #3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f002 feb6 	bl	80084b8 <get_sequence_step_timeout>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005752:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005762:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800576a:	f107 030c 	add.w	r3, r7, #12
 800576e:	461a      	mov	r2, r3
 8005770:	2104      	movs	r1, #4
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f002 fea0 	bl	80084b8 <get_sequence_step_timeout>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800577e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800578e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005792:	4618      	mov	r0, r3
 8005794:	3770      	adds	r7, #112	; 0x70
 8005796:	46bd      	mov	sp, r7
 8005798:	bdb0      	pop	{r4, r5, r7, pc}
 800579a:	bf00      	nop
 800579c:	20000014 	.word	0x20000014

080057a0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80057a8:	239d      	movs	r3, #157	; 0x9d
 80057aa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80057ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr

080057ba <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f8b1 	bl	8005934 <VL53L0X_GetDeviceMode>
 80057d2:	4603      	mov	r3, r0
 80057d4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80057d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d107      	bne.n	80057ee <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa75 	bl	8005cd4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80057ea:	4603      	mov	r3, r0
 80057ec:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80057ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2200      	movs	r2, #0
 80057fa:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80057fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d107      	bne.n	8005814 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	3310      	adds	r3, #16
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 faaa 	bl	8005d64 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d107      	bne.n	800582c <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	3314      	adds	r3, #20
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff fcc2 	bl	80051ac <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005828:	4603      	mov	r3, r0
 800582a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800582c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d134      	bne.n	800589e <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005834:	2300      	movs	r3, #0
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	e02a      	b.n	8005890 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800583a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d12a      	bne.n	8005898 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	b299      	uxth	r1, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	3308      	adds	r3, #8
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	4413      	add	r3, r2
 8005850:	3304      	adds	r3, #4
 8005852:	461a      	mov	r2, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fbc9 	bl	8005fec <VL53L0X_GetLimitCheckValue>
 800585a:	4603      	mov	r3, r0
 800585c:	461a      	mov	r2, r3
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	4313      	orrs	r3, r2
 8005862:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d117      	bne.n	800589c <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	b299      	uxth	r1, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	3318      	adds	r3, #24
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	4413      	add	r3, r2
 8005878:	461a      	mov	r2, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fb32 	bl	8005ee4 <VL53L0X_GetLimitCheckEnable>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	4313      	orrs	r3, r2
 8005888:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	3301      	adds	r3, #1
 800588e:	60bb      	str	r3, [r7, #8]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b05      	cmp	r3, #5
 8005894:	ddd1      	ble.n	800583a <VL53L0X_GetDeviceParameters+0x80>
 8005896:	e002      	b.n	800589e <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005898:	bf00      	nop
 800589a:	e000      	b.n	800589e <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800589c:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800589e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d107      	bne.n	80058b6 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	333c      	adds	r3, #60	; 0x3c
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fc2b 	bl	8006108 <VL53L0X_GetWrapAroundCheckEnable>
 80058b2:	4603      	mov	r3, r0
 80058b4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80058b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f879 	bl	80059bc <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80058ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	2b15      	cmp	r3, #21
 80058f0:	bf8c      	ite	hi
 80058f2:	2201      	movhi	r2, #1
 80058f4:	2200      	movls	r2, #0
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	d10f      	bne.n	800591c <VL53L0X_SetDeviceMode+0x40>
 80058fc:	4a0c      	ldr	r2, [pc, #48]	; (8005930 <VL53L0X_SetDeviceMode+0x54>)
 80058fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	bf14      	ite	ne
 800590a:	2301      	movne	r3, #1
 800590c:	2300      	moveq	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	741a      	strb	r2, [r3, #16]
		break;
 800591a:	e001      	b.n	8005920 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800591c:	23f8      	movs	r3, #248	; 0xf8
 800591e:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005920:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	0030000b 	.word	0x0030000b

08005934 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	7c1a      	ldrb	r2, [r3, #16]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800594a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	2109      	movs	r1, #9
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f004 fb5e 	bl	800a02c <VL53L0X_RdByte>
 8005970:	4603      	mov	r3, r0
 8005972:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	b2da      	uxtb	r2, r3
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800598a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f003 fa17 	bl	8008dda <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80059b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f003 fae4 	bl	8008f9a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80059d2:	4603      	mov	r3, r0
 80059d4:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80059d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	460b      	mov	r3, r1
 80059ec:	70fb      	strb	r3, [r7, #3]
 80059ee:	4613      	mov	r3, r2
 80059f0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80059f6:	78ba      	ldrb	r2, [r7, #2]
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f002 ff2e 	bl	800885e <VL53L0X_set_vcsel_pulse_period>
 8005a02:	4603      	mov	r3, r0
 8005a04:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	607a      	str	r2, [r7, #4]
 8005a1e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005a24:	7afb      	ldrb	r3, [r7, #11]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f003 f99e 	bl	8008d6c <VL53L0X_get_vcsel_pulse_period>
 8005a30:	4603      	mov	r3, r0
 8005a32:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a50:	2300      	movs	r3, #0
 8005a52:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005a5c:	f107 030f 	add.w	r3, r7, #15
 8005a60:	461a      	mov	r2, r3
 8005a62:	2101      	movs	r1, #1
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f004 fae1 	bl	800a02c <VL53L0X_RdByte>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d159      	bne.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8005a7a:	78bb      	ldrb	r3, [r7, #2]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d12b      	bne.n	8005ad8 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d825      	bhi.n	8005ad2 <VL53L0X_SetSequenceStepEnable+0x92>
 8005a86:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005aa1 	.word	0x08005aa1
 8005a90:	08005aab 	.word	0x08005aab
 8005a94:	08005ab5 	.word	0x08005ab5
 8005a98:	08005abf 	.word	0x08005abf
 8005a9c:	08005ac9 	.word	0x08005ac9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005aa0:	7dbb      	ldrb	r3, [r7, #22]
 8005aa2:	f043 0310 	orr.w	r3, r3, #16
 8005aa6:	75bb      	strb	r3, [r7, #22]
				break;
 8005aa8:	e041      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005aaa:	7dbb      	ldrb	r3, [r7, #22]
 8005aac:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005ab0:	75bb      	strb	r3, [r7, #22]
				break;
 8005ab2:	e03c      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8005ab4:	7dbb      	ldrb	r3, [r7, #22]
 8005ab6:	f043 0304 	orr.w	r3, r3, #4
 8005aba:	75bb      	strb	r3, [r7, #22]
				break;
 8005abc:	e037      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005abe:	7dbb      	ldrb	r3, [r7, #22]
 8005ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac4:	75bb      	strb	r3, [r7, #22]
				break;
 8005ac6:	e032      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005ac8:	7dbb      	ldrb	r3, [r7, #22]
 8005aca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ace:	75bb      	strb	r3, [r7, #22]
				break;
 8005ad0:	e02d      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ad2:	23fc      	movs	r3, #252	; 0xfc
 8005ad4:	75fb      	strb	r3, [r7, #23]
 8005ad6:	e02a      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d825      	bhi.n	8005b2a <VL53L0X_SetSequenceStepEnable+0xea>
 8005ade:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005af9 	.word	0x08005af9
 8005ae8:	08005b03 	.word	0x08005b03
 8005aec:	08005b0d 	.word	0x08005b0d
 8005af0:	08005b17 	.word	0x08005b17
 8005af4:	08005b21 	.word	0x08005b21
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005af8:	7dbb      	ldrb	r3, [r7, #22]
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	75bb      	strb	r3, [r7, #22]
				break;
 8005b00:	e015      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8005b02:	7dbb      	ldrb	r3, [r7, #22]
 8005b04:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005b08:	75bb      	strb	r3, [r7, #22]
				break;
 8005b0a:	e010      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005b0c:	7dbb      	ldrb	r3, [r7, #22]
 8005b0e:	f023 0304 	bic.w	r3, r3, #4
 8005b12:	75bb      	strb	r3, [r7, #22]
				break;
 8005b14:	e00b      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8005b16:	7dbb      	ldrb	r3, [r7, #22]
 8005b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1c:	75bb      	strb	r3, [r7, #22]
				break;
 8005b1e:	e006      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005b20:	7dbb      	ldrb	r3, [r7, #22]
 8005b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b26:	75bb      	strb	r3, [r7, #22]
				break;
 8005b28:	e001      	b.n	8005b2e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b2a:	23fc      	movs	r3, #252	; 0xfc
 8005b2c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	7dba      	ldrb	r2, [r7, #22]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d01e      	beq.n	8005b74 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8005b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8005b3e:	7dbb      	ldrb	r3, [r7, #22]
 8005b40:	461a      	mov	r2, r3
 8005b42:	2101      	movs	r1, #1
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f004 f9ef 	bl	8009f28 <VL53L0X_WrByte>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d103      	bne.n	8005b5e <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	7dba      	ldrb	r2, [r7, #22]
 8005b5a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8005b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005b6c:	6939      	ldr	r1, [r7, #16]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff ff11 	bl	8005996 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	607b      	str	r3, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	72fb      	strb	r3, [r7, #11]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d836      	bhi.n	8005c10 <sequence_step_enabled+0x90>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <sequence_step_enabled+0x28>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bbd 	.word	0x08005bbd
 8005bac:	08005bcf 	.word	0x08005bcf
 8005bb0:	08005be1 	.word	0x08005be1
 8005bb4:	08005bf3 	.word	0x08005bf3
 8005bb8:	08005c05 	.word	0x08005c05
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005bbc:	7abb      	ldrb	r3, [r7, #10]
 8005bbe:	111b      	asrs	r3, r3, #4
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	701a      	strb	r2, [r3, #0]
		break;
 8005bcc:	e022      	b.n	8005c14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005bce:	7abb      	ldrb	r3, [r7, #10]
 8005bd0:	10db      	asrs	r3, r3, #3
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	701a      	strb	r2, [r3, #0]
		break;
 8005bde:	e019      	b.n	8005c14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005be0:	7abb      	ldrb	r3, [r7, #10]
 8005be2:	109b      	asrs	r3, r3, #2
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	701a      	strb	r2, [r3, #0]
		break;
 8005bf0:	e010      	b.n	8005c14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005bf2:	7abb      	ldrb	r3, [r7, #10]
 8005bf4:	119b      	asrs	r3, r3, #6
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	701a      	strb	r2, [r3, #0]
		break;
 8005c02:	e007      	b.n	8005c14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005c04:	7abb      	ldrb	r3, [r7, #10]
 8005c06:	09db      	lsrs	r3, r3, #7
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	701a      	strb	r2, [r3, #0]
		break;
 8005c0e:	e001      	b.n	8005c14 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c10:	23fc      	movs	r3, #252	; 0xfc
 8005c12:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop

08005c24 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005c36:	f107 030e 	add.w	r3, r7, #14
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f004 f9f4 	bl	800a02c <VL53L0X_RdByte>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d107      	bne.n	8005c60 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8005c50:	7bba      	ldrb	r2, [r7, #14]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2100      	movs	r1, #0
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff ff92 	bl	8005b80 <sequence_step_enabled>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d108      	bne.n	8005c7a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005c68:	7bba      	ldrb	r2, [r7, #14]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	2101      	movs	r1, #1
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ff85 	bl	8005b80 <sequence_step_enabled>
 8005c76:	4603      	mov	r3, r0
 8005c78:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d108      	bne.n	8005c94 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8005c82:	7bba      	ldrb	r2, [r7, #14]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	2102      	movs	r1, #2
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff ff78 	bl	8005b80 <sequence_step_enabled>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d108      	bne.n	8005cae <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005c9c:	7bba      	ldrb	r2, [r7, #14]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	3303      	adds	r3, #3
 8005ca2:	2103      	movs	r1, #3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff ff6b 	bl	8005b80 <sequence_step_enabled>
 8005caa:	4603      	mov	r3, r0
 8005cac:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d108      	bne.n	8005cc8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8005cb6:	7bba      	ldrb	r2, [r7, #14]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	2104      	movs	r1, #4
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff ff5e 	bl	8005b80 <sequence_step_enabled>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005ce2:	f107 030c 	add.w	r3, r7, #12
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	21f8      	movs	r1, #248	; 0xf8
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f004 f9c8 	bl	800a080 <VL53L0X_RdWord>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d108      	bne.n	8005d0e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005cfc:	f107 0308 	add.w	r3, r7, #8
 8005d00:	461a      	mov	r2, r3
 8005d02:	2104      	movs	r1, #4
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f004 f9f3 	bl	800a0f0 <VL53L0X_RdDWord>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10c      	bne.n	8005d30 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8005d16:	89bb      	ldrh	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	89ba      	ldrh	r2, [r7, #12]
 8005d20:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	7f1b      	ldrb	r3, [r3, #28]
 8005d4e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	7bba      	ldrb	r2, [r7, #14]
 8005d54:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr

08005d64 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005d72:	f107 030e 	add.w	r3, r7, #14
 8005d76:	461a      	mov	r2, r3
 8005d78:	2120      	movs	r1, #32
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f004 f980 	bl	800a080 <VL53L0X_RdWord>
 8005d80:	4603      	mov	r3, r0
 8005d82:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d118      	bne.n	8005dbe <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8005d8c:	89fb      	ldrh	r3, [r7, #14]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
 8005da4:	e00b      	b.n	8005dbe <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005da6:	89fb      	ldrh	r3, [r7, #14]
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	807b      	strh	r3, [r7, #2]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005dec:	887b      	ldrh	r3, [r7, #2]
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d902      	bls.n	8005df8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005df2:	23fc      	movs	r3, #252	; 0xfc
 8005df4:	75fb      	strb	r3, [r7, #23]
 8005df6:	e05b      	b.n	8005eb0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8005df8:	787b      	ldrb	r3, [r7, #1]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8005e06:	2301      	movs	r3, #1
 8005e08:	73bb      	strb	r3, [r7, #14]
 8005e0a:	e00a      	b.n	8005e22 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005e0c:	887b      	ldrh	r3, [r7, #2]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	330c      	adds	r3, #12
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8005e22:	887b      	ldrh	r3, [r7, #2]
 8005e24:	2b05      	cmp	r3, #5
 8005e26:	d841      	bhi.n	8005eac <VL53L0X_SetLimitCheckEnable+0xe0>
 8005e28:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <VL53L0X_SetLimitCheckEnable+0x64>)
 8005e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2e:	bf00      	nop
 8005e30:	08005e49 	.word	0x08005e49
 8005e34:	08005e53 	.word	0x08005e53
 8005e38:	08005e69 	.word	0x08005e69
 8005e3c:	08005e73 	.word	0x08005e73
 8005e40:	08005e7d 	.word	0x08005e7d
 8005e44:	08005e95 	.word	0x08005e95

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7bfa      	ldrb	r2, [r7, #15]
 8005e4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8005e50:	e02e      	b.n	8005eb0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2144      	movs	r1, #68	; 0x44
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f004 f887 	bl	8009f70 <VL53L0X_WrWord>
 8005e62:	4603      	mov	r3, r0
 8005e64:	75fb      	strb	r3, [r7, #23]

			break;
 8005e66:	e023      	b.n	8005eb0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	7bfa      	ldrb	r2, [r7, #15]
 8005e6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005e70:	e01e      	b.n	8005eb0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7bfa      	ldrb	r2, [r7, #15]
 8005e76:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005e7a:	e019      	b.n	8005eb0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005e82:	7b7b      	ldrb	r3, [r7, #13]
 8005e84:	22fe      	movs	r2, #254	; 0xfe
 8005e86:	2160      	movs	r1, #96	; 0x60
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f004 f89b 	bl	8009fc4 <VL53L0X_UpdateByte>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8005e92:	e00d      	b.n	8005eb0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005e94:	7bbb      	ldrb	r3, [r7, #14]
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005e9a:	7b7b      	ldrb	r3, [r7, #13]
 8005e9c:	22ef      	movs	r2, #239	; 0xef
 8005e9e:	2160      	movs	r1, #96	; 0x60
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f004 f88f 	bl	8009fc4 <VL53L0X_UpdateByte>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005eaa:	e001      	b.n	8005eb0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005eac:	23fc      	movs	r3, #252	; 0xfc
 8005eae:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005eb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10f      	bne.n	8005ed8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005eb8:	787b      	ldrb	r3, [r7, #1]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005ebe:	887b      	ldrh	r3, [r7, #2]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005eca:	e005      	b.n	8005ed8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005ecc:	887b      	ldrh	r3, [r7, #2]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	460b      	mov	r3, r1
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005ef6:	897b      	ldrh	r3, [r7, #10]
 8005ef8:	2b05      	cmp	r3, #5
 8005efa:	d905      	bls.n	8005f08 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005efc:	23fc      	movs	r3, #252	; 0xfc
 8005efe:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e008      	b.n	8005f1a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005f08:	897b      	ldrh	r3, [r7, #10]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f12:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	7dba      	ldrb	r2, [r7, #22]
 8005f18:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	460b      	mov	r3, r1
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005f3a:	897b      	ldrh	r3, [r7, #10]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f44:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005f46:	7dbb      	ldrb	r3, [r7, #22]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d107      	bne.n	8005f5c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005f4c:	897b      	ldrh	r3, [r7, #10]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	330c      	adds	r3, #12
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	e040      	b.n	8005fde <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005f5c:	897b      	ldrh	r3, [r7, #10]
 8005f5e:	2b05      	cmp	r3, #5
 8005f60:	d830      	bhi.n	8005fc4 <VL53L0X_SetLimitCheckValue+0x9c>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <VL53L0X_SetLimitCheckValue+0x40>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08005f81 	.word	0x08005f81
 8005f6c:	08005f89 	.word	0x08005f89
 8005f70:	08005f9f 	.word	0x08005f9f
 8005f74:	08005fa7 	.word	0x08005fa7
 8005f78:	08005faf 	.word	0x08005faf
 8005f7c:	08005faf 	.word	0x08005faf

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005f86:	e01f      	b.n	8005fc8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	2144      	movs	r1, #68	; 0x44
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f003 ffec 	bl	8009f70 <VL53L0X_WrWord>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005f9c:	e014      	b.n	8005fc8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005fa4:	e010      	b.n	8005fc8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005fac:	e00c      	b.n	8005fc8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2164      	movs	r1, #100	; 0x64
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f003 ffd9 	bl	8009f70 <VL53L0X_WrWord>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005fc2:	e001      	b.n	8005fc8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005fc4:	23fc      	movs	r3, #252	; 0xfc
 8005fc6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005fc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d106      	bne.n	8005fde <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005fd0:	897b      	ldrh	r3, [r7, #10]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop

08005fec <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006002:	897b      	ldrh	r3, [r7, #10]
 8006004:	2b05      	cmp	r3, #5
 8006006:	d847      	bhi.n	8006098 <VL53L0X_GetLimitCheckValue+0xac>
 8006008:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <VL53L0X_GetLimitCheckValue+0x24>)
 800600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600e:	bf00      	nop
 8006010:	08006029 	.word	0x08006029
 8006014:	08006035 	.word	0x08006035
 8006018:	0800605b 	.word	0x0800605b
 800601c:	08006067 	.word	0x08006067
 8006020:	08006073 	.word	0x08006073
 8006024:	08006073 	.word	0x08006073

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	77bb      	strb	r3, [r7, #30]
		break;
 8006032:	e033      	b.n	800609c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006034:	f107 0316 	add.w	r3, r7, #22
 8006038:	461a      	mov	r2, r3
 800603a:	2144      	movs	r1, #68	; 0x44
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f004 f81f 	bl	800a080 <VL53L0X_RdWord>
 8006042:	4603      	mov	r3, r0
 8006044:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006046:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d102      	bne.n	8006054 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800604e:	8afb      	ldrh	r3, [r7, #22]
 8006050:	025b      	lsls	r3, r3, #9
 8006052:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006054:	2301      	movs	r3, #1
 8006056:	77bb      	strb	r3, [r7, #30]
		break;
 8006058:	e020      	b.n	800609c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006060:	2300      	movs	r3, #0
 8006062:	77bb      	strb	r3, [r7, #30]
		break;
 8006064:	e01a      	b.n	800609c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	77bb      	strb	r3, [r7, #30]
		break;
 8006070:	e014      	b.n	800609c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006072:	f107 0316 	add.w	r3, r7, #22
 8006076:	461a      	mov	r2, r3
 8006078:	2164      	movs	r1, #100	; 0x64
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f004 f800 	bl	800a080 <VL53L0X_RdWord>
 8006080:	4603      	mov	r3, r0
 8006082:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006084:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800608c:	8afb      	ldrh	r3, [r7, #22]
 800608e:	025b      	lsls	r3, r3, #9
 8006090:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	77bb      	strb	r3, [r7, #30]
		break;
 8006096:	e001      	b.n	800609c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006098:	23fc      	movs	r3, #252	; 0xfc
 800609a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800609c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d12a      	bne.n	80060fa <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80060a4:	7fbb      	ldrb	r3, [r7, #30]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d124      	bne.n	80060f4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d110      	bne.n	80060d2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80060b0:	897b      	ldrh	r3, [r7, #10]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	330c      	adds	r3, #12
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80060c4:	897b      	ldrh	r3, [r7, #10]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4413      	add	r3, r2
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80060d0:	e013      	b.n	80060fa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80060d8:	897b      	ldrh	r3, [r7, #10]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	330c      	adds	r3, #12
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80060e6:	897b      	ldrh	r3, [r7, #10]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80060f2:	e002      	b.n	80060fa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80060fa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80060fe:	4618      	mov	r0, r3
 8006100:	3720      	adds	r7, #32
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop

08006108 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006116:	f107 030e 	add.w	r3, r7, #14
 800611a:	461a      	mov	r2, r3
 800611c:	2101      	movs	r1, #1
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f003 ff84 	bl	800a02c <VL53L0X_RdByte>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10e      	bne.n	800614e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006130:	7bba      	ldrb	r2, [r7, #14]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	b25b      	sxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	da03      	bge.n	8006148 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e002      	b.n	800614e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800614e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781a      	ldrb	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006160:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006178:	f107 030e 	add.w	r3, r7, #14
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fbd8 	bl	8005934 <VL53L0X_GetDeviceMode>
 8006184:	4603      	mov	r3, r0
 8006186:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d107      	bne.n	80061a0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d104      	bne.n	80061a0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f898 	bl	80062cc <VL53L0X_StartMeasurement>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80061a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 fb3c 	bl	8007826 <VL53L0X_measurement_poll_for_completion>
 80061ae:	4603      	mov	r3, r0
 80061b0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80061b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80061ba:	7bbb      	ldrb	r3, [r7, #14]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d103      	bne.n	80061c8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2203      	movs	r2, #3
 80061c4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80061c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80061e4:	2301      	movs	r3, #1
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f001 fade 	bl	80077ac <VL53L0X_perform_ref_calibration>
 80061f0:	4603      	mov	r3, r0
 80061f2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80061f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800620c:	2300      	movs	r3, #0
 800620e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006216:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006218:	7dbb      	ldrb	r3, [r7, #22]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d005      	beq.n	800622a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800621e:	7dbb      	ldrb	r3, [r7, #22]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d002      	beq.n	800622a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006224:	7dbb      	ldrb	r3, [r7, #22]
 8006226:	2b03      	cmp	r3, #3
 8006228:	d147      	bne.n	80062ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800622a:	f107 030c 	add.w	r3, r7, #12
 800622e:	f107 0210 	add.w	r2, r7, #16
 8006232:	2101      	movs	r1, #1
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fbc1 	bl	80069bc <VL53L0X_GetInterruptThresholds>
 800623a:	4603      	mov	r3, r0
 800623c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006244:	d803      	bhi.n	800624e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006246:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006248:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800624c:	d935      	bls.n	80062ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800624e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d131      	bne.n	80062ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d006      	beq.n	800626a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800625c:	491a      	ldr	r1, [pc, #104]	; (80062c8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f002 ff4c 	bl	80090fc <VL53L0X_load_tuning_settings>
 8006264:	4603      	mov	r3, r0
 8006266:	75fb      	strb	r3, [r7, #23]
 8006268:	e027      	b.n	80062ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800626a:	2204      	movs	r2, #4
 800626c:	21ff      	movs	r1, #255	; 0xff
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f003 fe5a 	bl	8009f28 <VL53L0X_WrByte>
 8006274:	4603      	mov	r3, r0
 8006276:	461a      	mov	r2, r3
 8006278:	7dfb      	ldrb	r3, [r7, #23]
 800627a:	4313      	orrs	r3, r2
 800627c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800627e:	2200      	movs	r2, #0
 8006280:	2170      	movs	r1, #112	; 0x70
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f003 fe50 	bl	8009f28 <VL53L0X_WrByte>
 8006288:	4603      	mov	r3, r0
 800628a:	461a      	mov	r2, r3
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	4313      	orrs	r3, r2
 8006290:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006292:	2200      	movs	r2, #0
 8006294:	21ff      	movs	r1, #255	; 0xff
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f003 fe46 	bl	8009f28 <VL53L0X_WrByte>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80062a6:	2200      	movs	r2, #0
 80062a8:	2180      	movs	r1, #128	; 0x80
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f003 fe3c 	bl	8009f28 <VL53L0X_WrByte>
 80062b0:	4603      	mov	r3, r0
 80062b2:	461a      	mov	r2, r3
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80062ba:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000108 	.word	0x20000108

080062cc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062d4:	2300      	movs	r3, #0
 80062d6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80062dc:	f107 030e 	add.w	r3, r7, #14
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff fb26 	bl	8005934 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80062e8:	2201      	movs	r2, #1
 80062ea:	2180      	movs	r1, #128	; 0x80
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f003 fe1b 	bl	8009f28 <VL53L0X_WrByte>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062f6:	2201      	movs	r2, #1
 80062f8:	21ff      	movs	r1, #255	; 0xff
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f003 fe14 	bl	8009f28 <VL53L0X_WrByte>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006304:	2200      	movs	r2, #0
 8006306:	2100      	movs	r1, #0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f003 fe0d 	bl	8009f28 <VL53L0X_WrByte>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006318:	461a      	mov	r2, r3
 800631a:	2191      	movs	r1, #145	; 0x91
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f003 fe03 	bl	8009f28 <VL53L0X_WrByte>
 8006322:	4603      	mov	r3, r0
 8006324:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006326:	2201      	movs	r2, #1
 8006328:	2100      	movs	r1, #0
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f003 fdfc 	bl	8009f28 <VL53L0X_WrByte>
 8006330:	4603      	mov	r3, r0
 8006332:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006334:	2200      	movs	r2, #0
 8006336:	21ff      	movs	r1, #255	; 0xff
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f003 fdf5 	bl	8009f28 <VL53L0X_WrByte>
 800633e:	4603      	mov	r3, r0
 8006340:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006342:	2200      	movs	r2, #0
 8006344:	2180      	movs	r1, #128	; 0x80
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f003 fdee 	bl	8009f28 <VL53L0X_WrByte>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	2b03      	cmp	r3, #3
 8006354:	d054      	beq.n	8006400 <VL53L0X_StartMeasurement+0x134>
 8006356:	2b03      	cmp	r3, #3
 8006358:	dc6c      	bgt.n	8006434 <VL53L0X_StartMeasurement+0x168>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <VL53L0X_StartMeasurement+0x98>
 800635e:	2b01      	cmp	r3, #1
 8006360:	d034      	beq.n	80063cc <VL53L0X_StartMeasurement+0x100>
 8006362:	e067      	b.n	8006434 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006364:	2201      	movs	r2, #1
 8006366:	2100      	movs	r1, #0
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f003 fddd 	bl	8009f28 <VL53L0X_WrByte>
 800636e:	4603      	mov	r3, r0
 8006370:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d15d      	bne.n	800643a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8006388:	f107 030d 	add.w	r3, r7, #13
 800638c:	461a      	mov	r2, r3
 800638e:	2100      	movs	r1, #0
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f003 fe4b 	bl	800a02c <VL53L0X_RdByte>
 8006396:	4603      	mov	r3, r0
 8006398:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	3301      	adds	r3, #1
 800639e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80063a0:	7b7a      	ldrb	r2, [r7, #13]
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	4013      	ands	r3, r2
 80063a6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80063a8:	7bfa      	ldrb	r2, [r7, #15]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d107      	bne.n	80063be <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80063ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80063bc:	d3e1      	bcc.n	8006382 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80063c4:	d339      	bcc.n	800643a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80063c6:	23f9      	movs	r3, #249	; 0xf9
 80063c8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80063ca:	e036      	b.n	800643a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80063cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80063d4:	2101      	movs	r1, #1
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff ff12 	bl	8006200 <VL53L0X_CheckAndLoadInterruptSettings>
 80063dc:	4603      	mov	r3, r0
 80063de:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80063e0:	2202      	movs	r2, #2
 80063e2:	2100      	movs	r1, #0
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f003 fd9f 	bl	8009f28 <VL53L0X_WrByte>
 80063ea:	4603      	mov	r3, r0
 80063ec:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80063ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d123      	bne.n	800643e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2204      	movs	r2, #4
 80063fa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80063fe:	e01e      	b.n	800643e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006408:	2101      	movs	r1, #1
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fef8 	bl	8006200 <VL53L0X_CheckAndLoadInterruptSettings>
 8006410:	4603      	mov	r3, r0
 8006412:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006414:	2204      	movs	r2, #4
 8006416:	2100      	movs	r1, #0
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f003 fd85 	bl	8009f28 <VL53L0X_WrByte>
 800641e:	4603      	mov	r3, r0
 8006420:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006422:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2204      	movs	r2, #4
 800642e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006432:	e006      	b.n	8006442 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006434:	23f8      	movs	r3, #248	; 0xf8
 8006436:	75fb      	strb	r3, [r7, #23]
 8006438:	e004      	b.n	8006444 <VL53L0X_StartMeasurement+0x178>
		break;
 800643a:	bf00      	nop
 800643c:	e002      	b.n	8006444 <VL53L0X_StartMeasurement+0x178>
		break;
 800643e:	bf00      	nop
 8006440:	e000      	b.n	8006444 <VL53L0X_StartMeasurement+0x178>
		break;
 8006442:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006444:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006464:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	2b04      	cmp	r3, #4
 800646a:	d112      	bne.n	8006492 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800646c:	f107 0308 	add.w	r3, r7, #8
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fb18 	bl	8006aa8 <VL53L0X_GetInterruptMaskStatus>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b04      	cmp	r3, #4
 8006480:	d103      	bne.n	800648a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2201      	movs	r2, #1
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	e01c      	b.n	80064c4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	e018      	b.n	80064c4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006492:	f107 030d 	add.w	r3, r7, #13
 8006496:	461a      	mov	r2, r3
 8006498:	2114      	movs	r1, #20
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f003 fdc6 	bl	800a02c <VL53L0X_RdByte>
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80064a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10b      	bne.n	80064c4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80064ac:	7b7b      	ldrb	r3, [r7, #13]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2201      	movs	r2, #1
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e002      	b.n	80064c4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80064d0:	b5b0      	push	{r4, r5, r7, lr}
 80064d2:	b096      	sub	sp, #88	; 0x58
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064da:	2300      	movs	r3, #0
 80064dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80064e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80064e4:	230c      	movs	r3, #12
 80064e6:	2114      	movs	r1, #20
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f003 fcf1 	bl	8009ed0 <VL53L0X_ReadMulti>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80064f4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f040 80d1 	bne.w	80066a0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2200      	movs	r2, #0
 8006502:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800650a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800650e:	b29b      	uxth	r3, r3
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	b29a      	uxth	r2, r3
 8006514:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006518:	b29b      	uxth	r3, r3
 800651a:	4413      	add	r3, r2
 800651c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006526:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800652a:	b29b      	uxth	r3, r3
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	b29a      	uxth	r2, r3
 8006530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006534:	b29b      	uxth	r3, r3
 8006536:	4413      	add	r3, r2
 8006538:	b29b      	uxth	r3, r3
 800653a:	025b      	lsls	r3, r3, #9
 800653c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006542:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006544:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006548:	b29b      	uxth	r3, r3
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	b29a      	uxth	r2, r3
 800654e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006552:	b29b      	uxth	r3, r3
 8006554:	4413      	add	r3, r2
 8006556:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800655a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800655e:	025b      	lsls	r3, r3, #9
 8006560:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006566:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	b29a      	uxth	r2, r3
 8006570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006574:	b29b      	uxth	r3, r3
 8006576:	4413      	add	r3, r2
 8006578:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006582:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006584:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006588:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8006592:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800659a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800659e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065a4:	d046      	beq.n	8006634 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80065a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80065ac:	fb02 f303 	mul.w	r3, r2, r3
 80065b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80065b4:	4a57      	ldr	r2, [pc, #348]	; (8006714 <VL53L0X_GetRangingMeasurementData+0x244>)
 80065b6:	fb82 1203 	smull	r1, r2, r2, r3
 80065ba:	1192      	asrs	r2, r2, #6
 80065bc:	17db      	asrs	r3, r3, #31
 80065be:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80065c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	7f1b      	ldrb	r3, [r3, #28]
 80065ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80065d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d02c      	beq.n	8006634 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80065da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80065dc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
 80065e4:	121a      	asrs	r2, r3, #8
					<= 0) {
 80065e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d10d      	bne.n	8006608 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80065ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80065f4:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80065f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80065fc:	e016      	b.n	800662c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80065fe:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006602:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006606:	e011      	b.n	800662c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006608:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800660c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800660e:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006612:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006614:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006618:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800661c:	121b      	asrs	r3, r3, #8
 800661e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006622:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006624:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006628:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800662c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006630:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006634:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00d      	beq.n	8006658 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800663c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006640:	089b      	lsrs	r3, r3, #2
 8006642:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006648:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800664c:	b2db      	uxtb	r3, r3
 800664e:	019b      	lsls	r3, r3, #6
 8006650:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	75da      	strb	r2, [r3, #23]
 8006656:	e006      	b.n	8006666 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800665e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2200      	movs	r2, #0
 8006664:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006666:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800666a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800666e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006672:	9301      	str	r3, [sp, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f003 f9db 	bl	8009a38 <VL53L0X_get_pal_range_status>
 8006682:	4603      	mov	r3, r0
 8006684:	461a      	mov	r2, r3
 8006686:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800668a:	4313      	orrs	r3, r2
 800668c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8006690:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006698:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80066a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d12f      	bne.n	8006708 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f107 040c 	add.w	r4, r7, #12
 80066ae:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80066b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80066ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80066c2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80066c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80066d0:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80066d6:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80066dc:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80066e2:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80066e8:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80066ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80066f8:	f107 050c 	add.w	r5, r7, #12
 80066fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006700:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006704:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006708:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800670c:	4618      	mov	r0, r3
 800670e:	3750      	adds	r7, #80	; 0x50
 8006710:	46bd      	mov	sp, r7
 8006712:	bdb0      	pop	{r4, r5, r7, pc}
 8006714:	10624dd3 	.word	0x10624dd3

08006718 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006726:	2100      	movs	r1, #0
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff f8d7 	bl	80058dc <VL53L0X_SetDeviceMode>
 800672e:	4603      	mov	r3, r0
 8006730:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d104      	bne.n	8006744 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fd16 	bl	800616c <VL53L0X_PerformSingleMeasurement>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d105      	bne.n	8006758 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff febe 	bl	80064d0 <VL53L0X_GetRangingMeasurementData>
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d105      	bne.n	800676c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006760:	2100      	movs	r1, #0
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f960 	bl	8006a28 <VL53L0X_ClearInterruptMask>
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800676c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	4608      	mov	r0, r1
 8006782:	4611      	mov	r1, r2
 8006784:	461a      	mov	r2, r3
 8006786:	4603      	mov	r3, r0
 8006788:	70fb      	strb	r3, [r7, #3]
 800678a:	460b      	mov	r3, r1
 800678c:	70bb      	strb	r3, [r7, #2]
 800678e:	4613      	mov	r3, r2
 8006790:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800679c:	23f6      	movs	r3, #246	; 0xf6
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	e105      	b.n	80069ae <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80067a2:	78bb      	ldrb	r3, [r7, #2]
 80067a4:	2b14      	cmp	r3, #20
 80067a6:	d110      	bne.n	80067ca <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80067a8:	7e3b      	ldrb	r3, [r7, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d102      	bne.n	80067b4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80067ae:	2310      	movs	r3, #16
 80067b0:	73bb      	strb	r3, [r7, #14]
 80067b2:	e001      	b.n	80067b8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	461a      	mov	r2, r3
 80067bc:	2184      	movs	r1, #132	; 0x84
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f003 fbb2 	bl	8009f28 <VL53L0X_WrByte>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
 80067c8:	e0f1      	b.n	80069ae <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80067ca:	78bb      	ldrb	r3, [r7, #2]
 80067cc:	2b15      	cmp	r3, #21
 80067ce:	f040 8097 	bne.w	8006900 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80067d2:	2201      	movs	r2, #1
 80067d4:	21ff      	movs	r1, #255	; 0xff
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f003 fba6 	bl	8009f28 <VL53L0X_WrByte>
 80067dc:	4603      	mov	r3, r0
 80067de:	461a      	mov	r2, r3
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80067e6:	2200      	movs	r2, #0
 80067e8:	2100      	movs	r1, #0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f003 fb9c 	bl	8009f28 <VL53L0X_WrByte>
 80067f0:	4603      	mov	r3, r0
 80067f2:	461a      	mov	r2, r3
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80067fa:	2200      	movs	r2, #0
 80067fc:	21ff      	movs	r1, #255	; 0xff
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f003 fb92 	bl	8009f28 <VL53L0X_WrByte>
 8006804:	4603      	mov	r3, r0
 8006806:	461a      	mov	r2, r3
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	4313      	orrs	r3, r2
 800680c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800680e:	2201      	movs	r2, #1
 8006810:	2180      	movs	r1, #128	; 0x80
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f003 fb88 	bl	8009f28 <VL53L0X_WrByte>
 8006818:	4603      	mov	r3, r0
 800681a:	461a      	mov	r2, r3
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	4313      	orrs	r3, r2
 8006820:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006822:	2202      	movs	r2, #2
 8006824:	2185      	movs	r1, #133	; 0x85
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f003 fb7e 	bl	8009f28 <VL53L0X_WrByte>
 800682c:	4603      	mov	r3, r0
 800682e:	461a      	mov	r2, r3
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	4313      	orrs	r3, r2
 8006834:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006836:	2204      	movs	r2, #4
 8006838:	21ff      	movs	r1, #255	; 0xff
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f003 fb74 	bl	8009f28 <VL53L0X_WrByte>
 8006840:	4603      	mov	r3, r0
 8006842:	461a      	mov	r2, r3
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	4313      	orrs	r3, r2
 8006848:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800684a:	2200      	movs	r2, #0
 800684c:	21cd      	movs	r1, #205	; 0xcd
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f003 fb6a 	bl	8009f28 <VL53L0X_WrByte>
 8006854:	4603      	mov	r3, r0
 8006856:	461a      	mov	r2, r3
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	4313      	orrs	r3, r2
 800685c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800685e:	2211      	movs	r2, #17
 8006860:	21cc      	movs	r1, #204	; 0xcc
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f003 fb60 	bl	8009f28 <VL53L0X_WrByte>
 8006868:	4603      	mov	r3, r0
 800686a:	461a      	mov	r2, r3
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	4313      	orrs	r3, r2
 8006870:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006872:	2207      	movs	r2, #7
 8006874:	21ff      	movs	r1, #255	; 0xff
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f003 fb56 	bl	8009f28 <VL53L0X_WrByte>
 800687c:	4603      	mov	r3, r0
 800687e:	461a      	mov	r2, r3
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	4313      	orrs	r3, r2
 8006884:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006886:	2200      	movs	r2, #0
 8006888:	21be      	movs	r1, #190	; 0xbe
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f003 fb4c 	bl	8009f28 <VL53L0X_WrByte>
 8006890:	4603      	mov	r3, r0
 8006892:	461a      	mov	r2, r3
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	4313      	orrs	r3, r2
 8006898:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800689a:	2206      	movs	r2, #6
 800689c:	21ff      	movs	r1, #255	; 0xff
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f003 fb42 	bl	8009f28 <VL53L0X_WrByte>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80068ae:	2209      	movs	r2, #9
 80068b0:	21cc      	movs	r1, #204	; 0xcc
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f003 fb38 	bl	8009f28 <VL53L0X_WrByte>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	4313      	orrs	r3, r2
 80068c0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80068c2:	2200      	movs	r2, #0
 80068c4:	21ff      	movs	r1, #255	; 0xff
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f003 fb2e 	bl	8009f28 <VL53L0X_WrByte>
 80068cc:	4603      	mov	r3, r0
 80068ce:	461a      	mov	r2, r3
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80068d6:	2201      	movs	r2, #1
 80068d8:	21ff      	movs	r1, #255	; 0xff
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f003 fb24 	bl	8009f28 <VL53L0X_WrByte>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80068ea:	2200      	movs	r2, #0
 80068ec:	2100      	movs	r1, #0
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f003 fb1a 	bl	8009f28 <VL53L0X_WrByte>
 80068f4:	4603      	mov	r3, r0
 80068f6:	461a      	mov	r2, r3
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	73fb      	strb	r3, [r7, #15]
 80068fe:	e056      	b.n	80069ae <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d120      	bne.n	800694a <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8006908:	787b      	ldrb	r3, [r7, #1]
 800690a:	2b04      	cmp	r3, #4
 800690c:	d81b      	bhi.n	8006946 <VL53L0X_SetGpioConfig+0x1ce>
 800690e:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <VL53L0X_SetGpioConfig+0x19c>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	08006929 	.word	0x08006929
 8006918:	0800692f 	.word	0x0800692f
 800691c:	08006935 	.word	0x08006935
 8006920:	0800693b 	.word	0x0800693b
 8006924:	08006941 	.word	0x08006941
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8006928:	2300      	movs	r3, #0
 800692a:	73bb      	strb	r3, [r7, #14]
				break;
 800692c:	e00d      	b.n	800694a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800692e:	2301      	movs	r3, #1
 8006930:	73bb      	strb	r3, [r7, #14]
				break;
 8006932:	e00a      	b.n	800694a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8006934:	2302      	movs	r3, #2
 8006936:	73bb      	strb	r3, [r7, #14]
				break;
 8006938:	e007      	b.n	800694a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800693a:	2303      	movs	r3, #3
 800693c:	73bb      	strb	r3, [r7, #14]
				break;
 800693e:	e004      	b.n	800694a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006940:	2304      	movs	r3, #4
 8006942:	73bb      	strb	r3, [r7, #14]
				break;
 8006944:	e001      	b.n	800694a <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8006946:	23f5      	movs	r3, #245	; 0xf5
 8006948:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800694a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d107      	bne.n	8006962 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	461a      	mov	r2, r3
 8006956:	210a      	movs	r1, #10
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f003 fae5 	bl	8009f28 <VL53L0X_WrByte>
 800695e:	4603      	mov	r3, r0
 8006960:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10f      	bne.n	800698a <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800696a:	7e3b      	ldrb	r3, [r7, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d102      	bne.n	8006976 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	73bb      	strb	r3, [r7, #14]
 8006974:	e001      	b.n	800697a <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8006976:	2310      	movs	r3, #16
 8006978:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	22ef      	movs	r2, #239	; 0xef
 800697e:	2184      	movs	r1, #132	; 0x84
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f003 fb1f 	bl	8009fc4 <VL53L0X_UpdateByte>
 8006986:	4603      	mov	r3, r0
 8006988:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800698a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	787a      	ldrb	r2, [r7, #1]
 8006996:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800699a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d105      	bne.n	80069ae <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80069a2:	2100      	movs	r1, #0
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f83f 	bl	8006a28 <VL53L0X_ClearInterruptMask>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop

080069bc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	607a      	str	r2, [r7, #4]
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	460b      	mov	r3, r1
 80069ca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80069d0:	f107 0314 	add.w	r3, r7, #20
 80069d4:	461a      	mov	r2, r3
 80069d6:	210e      	movs	r1, #14
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f003 fb51 	bl	800a080 <VL53L0X_RdWord>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80069e2:	8abb      	ldrh	r3, [r7, #20]
 80069e4:	045b      	lsls	r3, r3, #17
 80069e6:	461a      	mov	r2, r3
 80069e8:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <VL53L0X_GetInterruptThresholds+0x68>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80069f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10f      	bne.n	8006a18 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80069f8:	f107 0314 	add.w	r3, r7, #20
 80069fc:	461a      	mov	r2, r3
 80069fe:	210c      	movs	r1, #12
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f003 fb3d 	bl	800a080 <VL53L0X_RdWord>
 8006a06:	4603      	mov	r3, r0
 8006a08:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006a0a:	8abb      	ldrh	r3, [r7, #20]
 8006a0c:	045b      	lsls	r3, r3, #17
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <VL53L0X_GetInterruptThresholds+0x68>)
 8006a12:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	1ffe0000 	.word	0x1ffe0000

08006a28 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	210b      	movs	r1, #11
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f003 fa72 	bl	8009f28 <VL53L0X_WrByte>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006a48:	2200      	movs	r2, #0
 8006a4a:	210b      	movs	r1, #11
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f003 fa6b 	bl	8009f28 <VL53L0X_WrByte>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006a5c:	f107 030d 	add.w	r3, r7, #13
 8006a60:	461a      	mov	r2, r3
 8006a62:	2113      	movs	r1, #19
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f003 fae1 	bl	800a02c <VL53L0X_RdByte>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	3301      	adds	r3, #1
 8006a78:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006a7a:	7b7b      	ldrb	r3, [r7, #13]
 8006a7c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d006      	beq.n	8006a92 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d803      	bhi.n	8006a92 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0d3      	beq.n	8006a3a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006a98:	23f4      	movs	r3, #244	; 0xf4
 8006a9a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006ab6:	f107 030e 	add.w	r3, r7, #14
 8006aba:	461a      	mov	r2, r3
 8006abc:	2113      	movs	r1, #19
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f003 fab4 	bl	800a02c <VL53L0X_RdByte>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	f003 0207 	and.w	r2, r3, #7
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	f003 0318 	and.w	r3, r3, #24
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006adc:	23fa      	movs	r3, #250	; 0xfa
 8006ade:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006af8:	2300      	movs	r3, #0
 8006afa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fa02 	bl	8006f0a <VL53L0X_perform_ref_spad_management>
 8006b06:	4603      	mov	r3, r0
 8006b08:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8006b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006b24:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006b28:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8006b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b2e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8006b30:	f107 0308 	add.w	r3, r7, #8
 8006b34:	461a      	mov	r2, r3
 8006b36:	2128      	movs	r1, #40	; 0x28
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f003 faa1 	bl	800a080 <VL53L0X_RdWord>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d11e      	bne.n	8006b88 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8006b4a:	893b      	ldrh	r3, [r7, #8]
 8006b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006b54:	893b      	ldrh	r3, [r7, #8]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	dd0b      	ble.n	8006b78 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006b60:	893a      	ldrh	r2, [r7, #8]
 8006b62:	897b      	ldrh	r3, [r7, #10]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	b21b      	sxth	r3, r3
 8006b6a:	461a      	mov	r2, r3
					* 250;
 8006b6c:	23fa      	movs	r3, #250	; 0xfa
 8006b6e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	e007      	b.n	8006b88 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006b78:	893b      	ldrh	r3, [r7, #8]
 8006b7a:	b21b      	sxth	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	23fa      	movs	r3, #250	; 0xfa
 8006b80:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b08b      	sub	sp, #44	; 0x2c
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bba:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bc4:	69b9      	ldr	r1, [r7, #24]
 8006bc6:	fb01 f202 	mul.w	r2, r1, r2
 8006bca:	1a9b      	subs	r3, r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd2:	e030      	b.n	8006c36 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	4413      	add	r3, r2
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8006be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d11e      	bne.n	8006c28 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006bea:	7ffa      	ldrb	r2, [r7, #31]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	fa42 f303 	asr.w	r3, r2, r3
 8006bf2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006bf8:	e016      	b.n	8006c28 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8006bfa:	7ffb      	ldrb	r3, [r7, #31]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <get_next_good_spad+0x88>
				success = 1;
 8006c04:	2301      	movs	r3, #1
 8006c06:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	fb03 f202 	mul.w	r2, r3, r2
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	4413      	add	r3, r2
 8006c14:	461a      	mov	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	601a      	str	r2, [r3, #0]
				break;
 8006c1a:	e009      	b.n	8006c30 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8006c1c:	7ffb      	ldrb	r3, [r7, #31]
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	3301      	adds	r3, #1
 8006c26:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8006c28:	6a3a      	ldr	r2, [r7, #32]
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d3e4      	bcc.n	8006bfa <get_next_good_spad+0x66>
				coarseIndex++) {
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	3301      	adds	r3, #1
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d202      	bcs.n	8006c44 <get_next_good_spad+0xb0>
 8006c3e:	7fbb      	ldrb	r3, [r7, #30]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0c7      	beq.n	8006bd4 <get_next_good_spad+0x40>
		}
	}
}
 8006c44:	bf00      	nop
 8006c46:	372c      	adds	r7, #44	; 0x2c
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr
	...

08006c50 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	099b      	lsrs	r3, r3, #6
 8006c60:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006c62:	4a07      	ldr	r2, [pc, #28]	; (8006c80 <is_aperture+0x30>)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <is_aperture+0x22>
		isAperture = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	200002c0 	.word	0x200002c0

08006c84 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b089      	sub	sp, #36	; 0x24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006c94:	2308      	movs	r3, #8
 8006c96:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006caa:	69b9      	ldr	r1, [r7, #24]
 8006cac:	fb01 f202 	mul.w	r2, r1, r2
 8006cb0:	1a9b      	subs	r3, r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d302      	bcc.n	8006cc2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006cbc:	23ce      	movs	r3, #206	; 0xce
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e010      	b.n	8006ce4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	b25a      	sxtb	r2, r3
 8006ccc:	2101      	movs	r1, #1
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd4:	b25b      	sxtb	r3, r3
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	b259      	sxtb	r1, r3
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	4413      	add	r3, r2
 8006ce0:	b2ca      	uxtb	r2, r1
 8006ce2:	701a      	strb	r2, [r3, #0]

	return status;
 8006ce4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3724      	adds	r7, #36	; 0x24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr

08006cf2 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8006cfc:	2306      	movs	r3, #6
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	21b0      	movs	r1, #176	; 0xb0
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f003 f8b4 	bl	8009e70 <VL53L0X_WriteMulti>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8006d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006d22:	2306      	movs	r3, #6
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	21b0      	movs	r1, #176	; 0xb0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f003 f8d1 	bl	8009ed0 <VL53L0X_ReadMulti>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b08c      	sub	sp, #48	; 0x30
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d56:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8006d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d5a:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d60:	e02b      	b.n	8006dba <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006d62:	f107 031c 	add.w	r3, r7, #28
 8006d66:	6a3a      	ldr	r2, [r7, #32]
 8006d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff ff12 	bl	8006b94 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d76:	d103      	bne.n	8006d80 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006d78:	23ce      	movs	r3, #206	; 0xce
 8006d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006d7e:	e020      	b.n	8006dc2 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d86:	4413      	add	r3, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff ff61 	bl	8006c50 <is_aperture>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	461a      	mov	r2, r3
 8006d92:	7afb      	ldrb	r3, [r7, #11]
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006d98:	23ce      	movs	r3, #206	; 0xce
 8006d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006d9e:	e010      	b.n	8006dc2 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006da4:	6a3a      	ldr	r2, [r7, #32]
 8006da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006da8:	6838      	ldr	r0, [r7, #0]
 8006daa:	f7ff ff6b 	bl	8006c84 <enable_spad_bit>
		currentSpad++;
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	3301      	adds	r3, #1
 8006db2:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	3301      	adds	r3, #1
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d3cf      	bcc.n	8006d62 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc4:	6a3a      	ldr	r2, [r7, #32]
 8006dc6:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006dc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff ff8d 	bl	8006cf2 <set_ref_spad_map>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006dde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d121      	bne.n	8006e2a <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	4619      	mov	r1, r3
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f7ff ff93 	bl	8006d18 <get_ref_spad_map>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006dfc:	e011      	b.n	8006e22 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	4413      	add	r3, r2
 8006e04:	781a      	ldrb	r2, [r3, #0]
 8006e06:	f107 0114 	add.w	r1, r7, #20
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	440b      	add	r3, r1
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d003      	beq.n	8006e1c <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006e14:	23ce      	movs	r3, #206	; 0xce
 8006e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006e1a:	e006      	b.n	8006e2a <enable_ref_spads+0xec>
			}
			i++;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	3301      	adds	r3, #1
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d3e9      	bcc.n	8006dfe <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006e2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3730      	adds	r7, #48	; 0x30
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b08a      	sub	sp, #40	; 0x28
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006e40:	2300      	movs	r3, #0
 8006e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006e56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d107      	bne.n	8006e6e <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006e5e:	22c0      	movs	r2, #192	; 0xc0
 8006e60:	2101      	movs	r1, #1
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f003 f860 	bl	8009f28 <VL53L0X_WrByte>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006e6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d108      	bne.n	8006e88 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006e76:	f107 0308 	add.w	r3, r7, #8
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff fc4b 	bl	8006718 <VL53L0X_PerformSingleRangingMeasurement>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006e88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d107      	bne.n	8006ea0 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e90:	2201      	movs	r2, #1
 8006e92:	21ff      	movs	r1, #255	; 0xff
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f003 f847 	bl	8009f28 <VL53L0X_WrByte>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006ea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d107      	bne.n	8006eb8 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	21b6      	movs	r1, #182	; 0xb6
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f003 f8e7 	bl	800a080 <VL53L0X_RdWord>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006eb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d107      	bne.n	8006ed0 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	21ff      	movs	r1, #255	; 0xff
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f003 f82f 	bl	8009f28 <VL53L0X_WrByte>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006ed0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d112      	bne.n	8006efe <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006edc:	461a      	mov	r2, r3
 8006ede:	2101      	movs	r1, #1
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f003 f821 	bl	8009f28 <VL53L0X_WrByte>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006eec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006efa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006efe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3728      	adds	r7, #40	; 0x28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006f0a:	b590      	push	{r4, r7, lr}
 8006f0c:	b09d      	sub	sp, #116	; 0x74
 8006f0e:	af06      	add	r7, sp, #24
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f16:	2300      	movs	r3, #0
 8006f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006f1c:	23b4      	movs	r3, #180	; 0xb4
 8006f1e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006f22:	2303      	movs	r3, #3
 8006f24:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006f26:	232c      	movs	r3, #44	; 0x2c
 8006f28:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006f36:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006f3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006f44:	2306      	movs	r3, #6
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006f6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006f70:	2300      	movs	r3, #0
 8006f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f74:	e009      	b.n	8006f8a <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006f80:	2200      	movs	r2, #0
 8006f82:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f86:	3301      	adds	r3, #1
 8006f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d3f1      	bcc.n	8006f76 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f92:	2201      	movs	r2, #1
 8006f94:	21ff      	movs	r1, #255	; 0xff
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f002 ffc6 	bl	8009f28 <VL53L0X_WrByte>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006fa2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d107      	bne.n	8006fba <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006faa:	2200      	movs	r2, #0
 8006fac:	214f      	movs	r1, #79	; 0x4f
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f002 ffba 	bl	8009f28 <VL53L0X_WrByte>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006fba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d107      	bne.n	8006fd2 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006fc2:	222c      	movs	r2, #44	; 0x2c
 8006fc4:	214e      	movs	r1, #78	; 0x4e
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f002 ffae 	bl	8009f28 <VL53L0X_WrByte>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006fd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d107      	bne.n	8006fea <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006fda:	2200      	movs	r2, #0
 8006fdc:	21ff      	movs	r1, #255	; 0xff
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f002 ffa2 	bl	8009f28 <VL53L0X_WrByte>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006fea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d109      	bne.n	8007006 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006ff2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	21b6      	movs	r1, #182	; 0xb6
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f002 ff94 	bl	8009f28 <VL53L0X_WrByte>
 8007000:	4603      	mov	r3, r0
 8007002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007006:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800700a:	2b00      	cmp	r3, #0
 800700c:	d107      	bne.n	800701e <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800700e:	2200      	movs	r2, #0
 8007010:	2180      	movs	r1, #128	; 0x80
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f002 ff88 	bl	8009f28 <VL53L0X_WrByte>
 8007018:	4603      	mov	r3, r0
 800701a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800701e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10a      	bne.n	800703c <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007026:	f107 0210 	add.w	r2, r7, #16
 800702a:	f107 0111 	add.w	r1, r7, #17
 800702e:	2300      	movs	r3, #0
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 fbbb 	bl	80077ac <VL53L0X_perform_ref_calibration>
 8007036:	4603      	mov	r3, r0
 8007038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800703c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007040:	2b00      	cmp	r3, #0
 8007042:	d121      	bne.n	8007088 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704a:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007052:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007060:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007064:	f107 0218 	add.w	r2, r7, #24
 8007068:	9204      	str	r2, [sp, #16]
 800706a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800706c:	9203      	str	r2, [sp, #12]
 800706e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007070:	9202      	str	r2, [sp, #8]
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	4623      	mov	r3, r4
 800707a:	4602      	mov	r2, r0
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff fe5e 	bl	8006d3e <enable_ref_spads>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007088:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800708c:	2b00      	cmp	r3, #0
 800708e:	d174      	bne.n	800717a <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007094:	f107 0312 	add.w	r3, r7, #18
 8007098:	4619      	mov	r1, r3
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff fecb 	bl	8006e36 <perform_ref_signal_measurement>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80070a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d161      	bne.n	8007172 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80070ae:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80070b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d25d      	bcs.n	8007172 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80070b6:	2300      	movs	r3, #0
 80070b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80070ba:	e009      	b.n	80070d0 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80070ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070cc:	3301      	adds	r3, #1
 80070ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d3f1      	bcc.n	80070bc <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80070d8:	e002      	b.n	80070e0 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80070da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070dc:	3301      	adds	r3, #1
 80070de:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80070e0:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80070e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070e6:	4413      	add	r3, r2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff fdb1 	bl	8006c50 <is_aperture>
 80070ee:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d103      	bne.n	80070fc <VL53L0X_perform_ref_spad_management+0x1f2>
 80070f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d3ee      	bcc.n	80070da <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80070fc:	2301      	movs	r3, #1
 80070fe:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007102:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007110:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007114:	f107 0218 	add.w	r2, r7, #24
 8007118:	9204      	str	r2, [sp, #16]
 800711a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800711c:	9203      	str	r2, [sp, #12]
 800711e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007120:	9202      	str	r2, [sp, #8]
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	4623      	mov	r3, r4
 800712a:	4602      	mov	r2, r0
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f7ff fe06 	bl	8006d3e <enable_ref_spads>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007138:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800713c:	2b00      	cmp	r3, #0
 800713e:	d11b      	bne.n	8007178 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007144:	f107 0312 	add.w	r3, r7, #18
 8007148:	4619      	mov	r1, r3
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff fe73 	bl	8006e36 <perform_ref_signal_measurement>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007156:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10c      	bne.n	8007178 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800715e:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007160:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007162:	429a      	cmp	r2, r3
 8007164:	d208      	bcs.n	8007178 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007170:	e002      	b.n	8007178 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007172:	2300      	movs	r3, #0
 8007174:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007176:	e000      	b.n	800717a <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007178:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800717a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800717e:	2b00      	cmp	r3, #0
 8007180:	f040 80af 	bne.w	80072e2 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007184:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007186:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007188:	429a      	cmp	r2, r3
 800718a:	f240 80aa 	bls.w	80072e2 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800718e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007190:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800719e:	f107 031c 	add.w	r3, r7, #28
 80071a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a4:	4618      	mov	r0, r3
 80071a6:	f003 f84b 	bl	800a240 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80071aa:	8a7b      	ldrh	r3, [r7, #18]
 80071ac:	461a      	mov	r2, r3
 80071ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	bfb8      	it	lt
 80071b6:	425b      	neglt	r3, r3
 80071b8:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80071c0:	e086      	b.n	80072d0 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80071c8:	f107 0314 	add.w	r3, r7, #20
 80071cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071d0:	f7ff fce0 	bl	8006b94 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d103      	bne.n	80071e4 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80071dc:	23ce      	movs	r3, #206	; 0xce
 80071de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80071e2:	e07e      	b.n	80072e2 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80071e4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	4413      	add	r3, r2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fd2f 	bl	8006c50 <is_aperture>
 80071f2:	4603      	mov	r3, r0
 80071f4:	461a      	mov	r2, r3
 80071f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8007202:	e06e      	b.n	80072e2 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007206:	3301      	adds	r3, #1
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007214:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff fd33 	bl	8006c84 <enable_spad_bit>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007224:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10c      	bne.n	8007246 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800722c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800722e:	3301      	adds	r3, #1
 8007230:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007238:	4619      	mov	r1, r3
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f7ff fd59 	bl	8006cf2 <set_ref_spad_map>
 8007240:	4603      	mov	r3, r0
 8007242:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007246:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800724a:	2b00      	cmp	r3, #0
 800724c:	d146      	bne.n	80072dc <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800724e:	f107 0312 	add.w	r3, r7, #18
 8007252:	4619      	mov	r1, r3
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff fdee 	bl	8006e36 <perform_ref_signal_measurement>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007260:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007264:	2b00      	cmp	r3, #0
 8007266:	d13b      	bne.n	80072e0 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007268:	8a7b      	ldrh	r3, [r7, #18]
 800726a:	461a      	mov	r2, r3
 800726c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	bfb8      	it	lt
 8007274:	425b      	neglt	r3, r3
 8007276:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007278:	8a7b      	ldrh	r3, [r7, #18]
 800727a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800727c:	429a      	cmp	r2, r3
 800727e:	d21c      	bcs.n	80072ba <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007284:	429a      	cmp	r2, r3
 8007286:	d914      	bls.n	80072b2 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007288:	f107 031c 	add.w	r3, r7, #28
 800728c:	4619      	mov	r1, r3
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff fd2f 	bl	8006cf2 <set_ref_spad_map>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80072a0:	f107 011c 	add.w	r1, r7, #28
 80072a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072a6:	4618      	mov	r0, r3
 80072a8:	f002 ffca 	bl	800a240 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80072ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ae:	3b01      	subs	r3, #1
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b8:	e00a      	b.n	80072d0 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80072c4:	f107 031c 	add.w	r3, r7, #28
 80072c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ca:	4618      	mov	r0, r3
 80072cc:	f002 ffb8 	bl	800a240 <memcpy>
		while (!complete) {
 80072d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f43f af74 	beq.w	80071c2 <VL53L0X_perform_ref_spad_management+0x2b8>
 80072da:	e002      	b.n	80072e2 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80072dc:	bf00      	nop
 80072de:	e000      	b.n	80072e2 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80072e0:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80072e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d115      	bne.n	8007316 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072ee:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80072f6:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	b2da      	uxtb	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007316:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800731a:	4618      	mov	r0, r3
 800731c:	375c      	adds	r7, #92	; 0x5c
 800731e:	46bd      	mov	sp, r7
 8007320:	bd90      	pop	{r4, r7, pc}

08007322 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007322:	b590      	push	{r4, r7, lr}
 8007324:	b093      	sub	sp, #76	; 0x4c
 8007326:	af06      	add	r7, sp, #24
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	4613      	mov	r3, r2
 800732e:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007330:	2300      	movs	r3, #0
 8007332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800733a:	23b4      	movs	r3, #180	; 0xb4
 800733c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007340:	2306      	movs	r3, #6
 8007342:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007344:	232c      	movs	r3, #44	; 0x2c
 8007346:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007348:	2201      	movs	r2, #1
 800734a:	21ff      	movs	r1, #255	; 0xff
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f002 fdeb 	bl	8009f28 <VL53L0X_WrByte>
 8007352:	4603      	mov	r3, r0
 8007354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007358:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800735c:	2b00      	cmp	r3, #0
 800735e:	d107      	bne.n	8007370 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007360:	2200      	movs	r2, #0
 8007362:	214f      	movs	r1, #79	; 0x4f
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f002 fddf 	bl	8009f28 <VL53L0X_WrByte>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007370:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007374:	2b00      	cmp	r3, #0
 8007376:	d107      	bne.n	8007388 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007378:	222c      	movs	r2, #44	; 0x2c
 800737a:	214e      	movs	r1, #78	; 0x4e
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f002 fdd3 	bl	8009f28 <VL53L0X_WrByte>
 8007382:	4603      	mov	r3, r0
 8007384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007388:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800738c:	2b00      	cmp	r3, #0
 800738e:	d107      	bne.n	80073a0 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007390:	2200      	movs	r2, #0
 8007392:	21ff      	movs	r1, #255	; 0xff
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f002 fdc7 	bl	8009f28 <VL53L0X_WrByte>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80073a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d109      	bne.n	80073bc <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80073a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073ac:	461a      	mov	r2, r3
 80073ae:	21b6      	movs	r1, #182	; 0xb6
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f002 fdb9 	bl	8009f28 <VL53L0X_WrByte>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80073bc:	2300      	movs	r3, #0
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
 80073c0:	e009      	b.n	80073d6 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	3301      	adds	r3, #1
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
 80073d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d3f1      	bcc.n	80073c2 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d011      	beq.n	8007408 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80073e4:	e002      	b.n	80073ec <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	3301      	adds	r3, #1
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80073ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	4413      	add	r3, r2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fc2b 	bl	8006c50 <is_aperture>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d103      	bne.n	8007408 <VL53L0X_set_reference_spads+0xe6>
 8007400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	429a      	cmp	r2, r3
 8007406:	d3ee      	bcc.n	80073e6 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007418:	79f9      	ldrb	r1, [r7, #7]
 800741a:	f107 0214 	add.w	r2, r7, #20
 800741e:	9204      	str	r2, [sp, #16]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	9203      	str	r2, [sp, #12]
 8007424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007426:	9202      	str	r2, [sp, #8]
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	4623      	mov	r3, r4
 8007430:	4602      	mov	r2, r0
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff fc83 	bl	8006d3e <enable_ref_spads>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800743e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10c      	bne.n	8007460 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	b2da      	uxtb	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	79fa      	ldrb	r2, [r7, #7]
 800745c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007460:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007464:	4618      	mov	r0, r3
 8007466:	3734      	adds	r7, #52	; 0x34
 8007468:	46bd      	mov	sp, r7
 800746a:	bd90      	pop	{r4, r7, pc}

0800746c <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800747c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	f043 0301 	orr.w	r3, r3, #1
 800748a:	b2db      	uxtb	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	2100      	movs	r1, #0
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f002 fd49 	bl	8009f28 <VL53L0X_WrByte>
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800749a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d104      	bne.n	80074ac <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f9bf 	bl	8007826 <VL53L0X_measurement_poll_for_completion>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80074ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d105      	bne.n	80074c0 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80074b4:	2100      	movs	r1, #0
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fab6 	bl	8006a28 <VL53L0X_ClearInterruptMask>
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80074c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d106      	bne.n	80074d6 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80074c8:	2200      	movs	r2, #0
 80074ca:	2100      	movs	r1, #0
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f002 fd2b 	bl	8009f28 <VL53L0X_WrByte>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]

	return Status;
 80074d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	4608      	mov	r0, r1
 80074ec:	4611      	mov	r1, r2
 80074ee:	461a      	mov	r2, r3
 80074f0:	4603      	mov	r3, r0
 80074f2:	70fb      	strb	r3, [r7, #3]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70bb      	strb	r3, [r7, #2]
 80074f8:	4613      	mov	r3, r2
 80074fa:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007504:	2201      	movs	r2, #1
 8007506:	21ff      	movs	r1, #255	; 0xff
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f002 fd0d 	bl	8009f28 <VL53L0X_WrByte>
 800750e:	4603      	mov	r3, r0
 8007510:	461a      	mov	r2, r3
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	4313      	orrs	r3, r2
 8007516:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007518:	2200      	movs	r2, #0
 800751a:	2100      	movs	r1, #0
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f002 fd03 	bl	8009f28 <VL53L0X_WrByte>
 8007522:	4603      	mov	r3, r0
 8007524:	461a      	mov	r2, r3
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	4313      	orrs	r3, r2
 800752a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800752c:	2200      	movs	r2, #0
 800752e:	21ff      	movs	r1, #255	; 0xff
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f002 fcf9 	bl	8009f28 <VL53L0X_WrByte>
 8007536:	4603      	mov	r3, r0
 8007538:	461a      	mov	r2, r3
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	4313      	orrs	r3, r2
 800753e:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d01e      	beq.n	8007584 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007546:	f897 3020 	ldrb.w	r3, [r7, #32]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d009      	beq.n	8007562 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	21cb      	movs	r1, #203	; 0xcb
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f002 fd6a 	bl	800a02c <VL53L0X_RdByte>
 8007558:	4603      	mov	r3, r0
 800755a:	461a      	mov	r2, r3
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	4313      	orrs	r3, r2
 8007560:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007562:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007566:	2b00      	cmp	r3, #0
 8007568:	d02a      	beq.n	80075c0 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800756a:	f107 030e 	add.w	r3, r7, #14
 800756e:	461a      	mov	r2, r3
 8007570:	21ee      	movs	r1, #238	; 0xee
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f002 fd5a 	bl	800a02c <VL53L0X_RdByte>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	4313      	orrs	r3, r2
 8007580:	73fb      	strb	r3, [r7, #15]
 8007582:	e01d      	b.n	80075c0 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007584:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800758c:	78bb      	ldrb	r3, [r7, #2]
 800758e:	461a      	mov	r2, r3
 8007590:	21cb      	movs	r1, #203	; 0xcb
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f002 fcc8 	bl	8009f28 <VL53L0X_WrByte>
 8007598:	4603      	mov	r3, r0
 800759a:	461a      	mov	r2, r3
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	4313      	orrs	r3, r2
 80075a0:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80075a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80075aa:	787b      	ldrb	r3, [r7, #1]
 80075ac:	2280      	movs	r2, #128	; 0x80
 80075ae:	21ee      	movs	r1, #238	; 0xee
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f002 fd07 	bl	8009fc4 <VL53L0X_UpdateByte>
 80075b6:	4603      	mov	r3, r0
 80075b8:	461a      	mov	r2, r3
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	4313      	orrs	r3, r2
 80075be:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80075c0:	2201      	movs	r2, #1
 80075c2:	21ff      	movs	r1, #255	; 0xff
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f002 fcaf 	bl	8009f28 <VL53L0X_WrByte>
 80075ca:	4603      	mov	r3, r0
 80075cc:	461a      	mov	r2, r3
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80075d4:	2201      	movs	r2, #1
 80075d6:	2100      	movs	r1, #0
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f002 fca5 	bl	8009f28 <VL53L0X_WrByte>
 80075de:	4603      	mov	r3, r0
 80075e0:	461a      	mov	r2, r3
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80075e8:	2200      	movs	r2, #0
 80075ea:	21ff      	movs	r1, #255	; 0xff
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f002 fc9b 	bl	8009f28 <VL53L0X_WrByte>
 80075f2:	4603      	mov	r3, r0
 80075f4:	461a      	mov	r2, r3
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	f023 0310 	bic.w	r3, r3, #16
 8007602:	b2da      	uxtb	r2, r3
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	701a      	strb	r2, [r3, #0]

	return Status;
 8007608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af04      	add	r7, sp, #16
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4611      	mov	r1, r2
 8007620:	461a      	mov	r2, r3
 8007622:	460b      	mov	r3, r1
 8007624:	71fb      	strb	r3, [r7, #7]
 8007626:	4613      	mov	r3, r2
 8007628:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800762a:	2300      	movs	r3, #0
 800762c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800763e:	79bb      	ldrb	r3, [r7, #6]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800764a:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800764c:	2201      	movs	r2, #1
 800764e:	2101      	movs	r1, #1
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f002 fc69 	bl	8009f28 <VL53L0X_WrByte>
 8007656:	4603      	mov	r3, r0
 8007658:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800765a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d105      	bne.n	800766e <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007662:	2140      	movs	r1, #64	; 0x40
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff ff01 	bl	800746c <VL53L0X_perform_single_ref_calibration>
 800766a:	4603      	mov	r3, r0
 800766c:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800766e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d115      	bne.n	80076a2 <VL53L0X_perform_vhv_calibration+0x8e>
 8007676:	79fb      	ldrb	r3, [r7, #7]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d112      	bne.n	80076a2 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800767c:	7d39      	ldrb	r1, [r7, #20]
 800767e:	7d7a      	ldrb	r2, [r7, #21]
 8007680:	2300      	movs	r3, #0
 8007682:	9303      	str	r3, [sp, #12]
 8007684:	2301      	movs	r3, #1
 8007686:	9302      	str	r3, [sp, #8]
 8007688:	f107 0313 	add.w	r3, r7, #19
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	460b      	mov	r3, r1
 8007694:	2101      	movs	r1, #1
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff ff23 	bl	80074e2 <VL53L0X_ref_calibration_io>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]
 80076a0:	e002      	b.n	80076a8 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2200      	movs	r2, #0
 80076a6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80076a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d112      	bne.n	80076d6 <VL53L0X_perform_vhv_calibration+0xc2>
 80076b0:	79bb      	ldrb	r3, [r7, #6]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00f      	beq.n	80076d6 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80076b6:	7dbb      	ldrb	r3, [r7, #22]
 80076b8:	461a      	mov	r2, r3
 80076ba:	2101      	movs	r1, #1
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f002 fc33 	bl	8009f28 <VL53L0X_WrByte>
 80076c2:	4603      	mov	r3, r0
 80076c4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80076c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d103      	bne.n	80076d6 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	7dba      	ldrb	r2, [r7, #22]
 80076d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80076d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b08a      	sub	sp, #40	; 0x28
 80076e6:	af04      	add	r7, sp, #16
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	4611      	mov	r1, r2
 80076ee:	461a      	mov	r2, r3
 80076f0:	460b      	mov	r3, r1
 80076f2:	71fb      	strb	r3, [r7, #7]
 80076f4:	4613      	mov	r3, r2
 80076f6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076f8:	2300      	movs	r3, #0
 80076fa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007708:	79bb      	ldrb	r3, [r7, #6]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007714:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007716:	2202      	movs	r2, #2
 8007718:	2101      	movs	r1, #1
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f002 fc04 	bl	8009f28 <VL53L0X_WrByte>
 8007720:	4603      	mov	r3, r0
 8007722:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007724:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d105      	bne.n	8007738 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800772c:	2100      	movs	r1, #0
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff fe9c 	bl	800746c <VL53L0X_perform_single_ref_calibration>
 8007734:	4603      	mov	r3, r0
 8007736:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007738:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d115      	bne.n	800776c <VL53L0X_perform_phase_calibration+0x8a>
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d112      	bne.n	800776c <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007746:	7d39      	ldrb	r1, [r7, #20]
 8007748:	7d7a      	ldrb	r2, [r7, #21]
 800774a:	2301      	movs	r3, #1
 800774c:	9303      	str	r3, [sp, #12]
 800774e:	2300      	movs	r3, #0
 8007750:	9302      	str	r3, [sp, #8]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	f107 0313 	add.w	r3, r7, #19
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	460b      	mov	r3, r1
 800775e:	2101      	movs	r1, #1
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff febe 	bl	80074e2 <VL53L0X_ref_calibration_io>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	e002      	b.n	8007772 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2200      	movs	r2, #0
 8007770:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007772:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d112      	bne.n	80077a0 <VL53L0X_perform_phase_calibration+0xbe>
 800777a:	79bb      	ldrb	r3, [r7, #6]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00f      	beq.n	80077a0 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007780:	7dbb      	ldrb	r3, [r7, #22]
 8007782:	461a      	mov	r2, r3
 8007784:	2101      	movs	r1, #1
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f002 fbce 	bl	8009f28 <VL53L0X_WrByte>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007790:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	7dba      	ldrb	r2, [r7, #22]
 800779c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80077a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80077c8:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80077ca:	78fa      	ldrb	r2, [r7, #3]
 80077cc:	2300      	movs	r3, #0
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff ff1f 	bl	8007614 <VL53L0X_perform_vhv_calibration>
 80077d6:	4603      	mov	r3, r0
 80077d8:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80077da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d107      	bne.n	80077f2 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	2300      	movs	r3, #0
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff ff7a 	bl	80076e2 <VL53L0X_perform_phase_calibration>
 80077ee:	4603      	mov	r3, r0
 80077f0:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80077f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10f      	bne.n	800781a <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80077fa:	7dbb      	ldrb	r3, [r7, #22]
 80077fc:	461a      	mov	r2, r3
 80077fe:	2101      	movs	r1, #1
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f002 fb91 	bl	8009f28 <VL53L0X_WrByte>
 8007806:	4603      	mov	r3, r0
 8007808:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800780a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d103      	bne.n	800781a <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	7dba      	ldrb	r2, [r7, #22]
 8007816:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800781a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800782e:	2300      	movs	r3, #0
 8007830:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800783a:	f107 030f 	add.w	r3, r7, #15
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fe fe05 	bl	8006450 <VL53L0X_GetMeasurementDataReady>
 8007846:	4603      	mov	r3, r0
 8007848:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800784a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d110      	bne.n	8007874 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d00f      	beq.n	8007878 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3301      	adds	r3, #1
 800785c:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007864:	d302      	bcc.n	800786c <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007866:	23f9      	movs	r3, #249	; 0xf9
 8007868:	75fb      	strb	r3, [r7, #23]
			break;
 800786a:	e006      	b.n	800787a <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f002 fc7b 	bl	800a168 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007872:	e7e2      	b.n	800783a <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007874:	bf00      	nop
 8007876:	e000      	b.n	800787a <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007878:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800787a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	4603      	mov	r3, r0
 800788e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	3301      	adds	r3, #1
 8007898:	b2db      	uxtb	r3, r3
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bc80      	pop	{r7}
 80078a8:	4770      	bx	lr

080078aa <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	4603      	mov	r3, r0
 80078b2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	085b      	lsrs	r3, r3, #1
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr

080078ce <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b085      	sub	sp, #20
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80078da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078de:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80078e0:	e002      	b.n	80078e8 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	089b      	lsrs	r3, r3, #2
 80078e6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d8f8      	bhi.n	80078e2 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80078f0:	e017      	b.n	8007922 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4413      	add	r3, r2
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d30b      	bcc.n	8007916 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4413      	add	r3, r2
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	4413      	add	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e002      	b.n	800791c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	085b      	lsrs	r3, r3, #1
 800791a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	089b      	lsrs	r3, r3, #2
 8007920:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e4      	bne.n	80078f2 <VL53L0X_isqrt+0x24>
	}

	return res;
 8007928:	68fb      	ldr	r3, [r7, #12]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800793c:	2300      	movs	r3, #0
 800793e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8007940:	2200      	movs	r2, #0
 8007942:	2183      	movs	r1, #131	; 0x83
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f002 faef 	bl	8009f28 <VL53L0X_WrByte>
 800794a:	4603      	mov	r3, r0
 800794c:	461a      	mov	r2, r3
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	4313      	orrs	r3, r2
 8007952:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8007954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d11e      	bne.n	800799a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007960:	f107 030f 	add.w	r3, r7, #15
 8007964:	461a      	mov	r2, r3
 8007966:	2183      	movs	r1, #131	; 0x83
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f002 fb5f 	bl	800a02c <VL53L0X_RdByte>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <VL53L0X_device_read_strobe+0x5a>
 8007978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d106      	bne.n	800798e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	3301      	adds	r3, #1
 8007984:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800798c:	d3e8      	bcc.n	8007960 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007994:	d301      	bcc.n	800799a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007996:	23f9      	movs	r3, #249	; 0xf9
 8007998:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800799a:	2201      	movs	r2, #1
 800799c:	2183      	movs	r1, #131	; 0x83
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f002 fac2 	bl	8009f28 <VL53L0X_WrByte>
 80079a4:	4603      	mov	r3, r0
 80079a6:	461a      	mov	r2, r3
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80079ae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b098      	sub	sp, #96	; 0x60
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079c6:	2300      	movs	r3, #0
 80079c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80079ea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80079ee:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8007a06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a0a:	2b07      	cmp	r3, #7
 8007a0c:	f000 8408 	beq.w	8008220 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007a10:	2201      	movs	r2, #1
 8007a12:	2180      	movs	r1, #128	; 0x80
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f002 fa87 	bl	8009f28 <VL53L0X_WrByte>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a22:	4313      	orrs	r3, r2
 8007a24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a28:	2201      	movs	r2, #1
 8007a2a:	21ff      	movs	r1, #255	; 0xff
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f002 fa7b 	bl	8009f28 <VL53L0X_WrByte>
 8007a32:	4603      	mov	r3, r0
 8007a34:	461a      	mov	r2, r3
 8007a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007a40:	2200      	movs	r2, #0
 8007a42:	2100      	movs	r1, #0
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f002 fa6f 	bl	8009f28 <VL53L0X_WrByte>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007a58:	2206      	movs	r2, #6
 8007a5a:	21ff      	movs	r1, #255	; 0xff
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f002 fa63 	bl	8009f28 <VL53L0X_WrByte>
 8007a62:	4603      	mov	r3, r0
 8007a64:	461a      	mov	r2, r3
 8007a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007a70:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007a74:	461a      	mov	r2, r3
 8007a76:	2183      	movs	r1, #131	; 0x83
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f002 fad7 	bl	800a02c <VL53L0X_RdByte>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	461a      	mov	r2, r3
 8007a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a90:	f043 0304 	orr.w	r3, r3, #4
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	461a      	mov	r2, r3
 8007a98:	2183      	movs	r1, #131	; 0x83
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f002 fa44 	bl	8009f28 <VL53L0X_WrByte>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007aae:	2207      	movs	r2, #7
 8007ab0:	21ff      	movs	r1, #255	; 0xff
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f002 fa38 	bl	8009f28 <VL53L0X_WrByte>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	461a      	mov	r2, r3
 8007abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	2181      	movs	r1, #129	; 0x81
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f002 fa2c 	bl	8009f28 <VL53L0X_WrByte>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f002 fb42 	bl	800a168 <VL53L0X_PollingDelay>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aec:	4313      	orrs	r3, r2
 8007aee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007af2:	2201      	movs	r2, #1
 8007af4:	2180      	movs	r1, #128	; 0x80
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f002 fa16 	bl	8009f28 <VL53L0X_WrByte>
 8007afc:	4603      	mov	r3, r0
 8007afe:	461a      	mov	r2, r3
 8007b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8098 	beq.w	8007c46 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007b16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b1a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f040 8091 	bne.w	8007c46 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8007b24:	226b      	movs	r2, #107	; 0x6b
 8007b26:	2194      	movs	r1, #148	; 0x94
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f002 f9fd 	bl	8009f28 <VL53L0X_WrByte>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	461a      	mov	r2, r3
 8007b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff fef9 	bl	8007934 <VL53L0X_device_read_strobe>
 8007b42:	4603      	mov	r3, r0
 8007b44:	461a      	mov	r2, r3
 8007b46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b54:	461a      	mov	r2, r3
 8007b56:	2190      	movs	r1, #144	; 0x90
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f002 fac9 	bl	800a0f0 <VL53L0X_RdDWord>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	461a      	mov	r2, r3
 8007b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	0bdb      	lsrs	r3, r3, #15
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8007b88:	2224      	movs	r2, #36	; 0x24
 8007b8a:	2194      	movs	r1, #148	; 0x94
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f002 f9cb 	bl	8009f28 <VL53L0X_WrByte>
 8007b92:	4603      	mov	r3, r0
 8007b94:	461a      	mov	r2, r3
 8007b96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff fec7 	bl	8007934 <VL53L0X_device_read_strobe>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007bb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bb8:	461a      	mov	r2, r3
 8007bba:	2190      	movs	r1, #144	; 0x90
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f002 fa97 	bl	800a0f0 <VL53L0X_RdDWord>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	0e1b      	lsrs	r3, r3, #24
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	0c1b      	lsrs	r3, r3, #16
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	0a1b      	lsrs	r3, r3, #8
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8007bee:	2225      	movs	r2, #37	; 0x25
 8007bf0:	2194      	movs	r1, #148	; 0x94
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f002 f998 	bl	8009f28 <VL53L0X_WrByte>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff fe94 	bl	8007934 <VL53L0X_device_read_strobe>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007c1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c1e:	461a      	mov	r2, r3
 8007c20:	2190      	movs	r1, #144	; 0x90
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f002 fa64 	bl	800a0f0 <VL53L0X_RdDWord>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c30:	4313      	orrs	r3, r2
 8007c32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	0e1b      	lsrs	r3, r3, #24
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	0c1b      	lsrs	r3, r3, #16
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8189 	beq.w	8007f64 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007c52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c56:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f040 8182 	bne.w	8007f64 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8007c60:	2202      	movs	r2, #2
 8007c62:	2194      	movs	r1, #148	; 0x94
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f002 f95f 	bl	8009f28 <VL53L0X_WrByte>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff fe5b 	bl	8007934 <VL53L0X_device_read_strobe>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	461a      	mov	r2, r3
 8007c82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c86:	4313      	orrs	r3, r2
 8007c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007c8c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007c90:	461a      	mov	r2, r3
 8007c92:	2190      	movs	r1, #144	; 0x90
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f002 f9c9 	bl	800a02c <VL53L0X_RdByte>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007ca8:	227b      	movs	r2, #123	; 0x7b
 8007caa:	2194      	movs	r1, #148	; 0x94
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f002 f93b 	bl	8009f28 <VL53L0X_WrByte>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fe37 	bl	8007934 <VL53L0X_device_read_strobe>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007cd4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007cd8:	461a      	mov	r2, r3
 8007cda:	2190      	movs	r1, #144	; 0x90
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f002 f9a5 	bl	800a02c <VL53L0X_RdByte>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8007cf0:	2277      	movs	r2, #119	; 0x77
 8007cf2:	2194      	movs	r1, #148	; 0x94
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f002 f917 	bl	8009f28 <VL53L0X_WrByte>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7ff fe13 	bl	8007934 <VL53L0X_device_read_strobe>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	461a      	mov	r2, r3
 8007d12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d16:	4313      	orrs	r3, r2
 8007d18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007d1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d20:	461a      	mov	r2, r3
 8007d22:	2190      	movs	r1, #144	; 0x90
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f002 f9e3 	bl	800a0f0 <VL53L0X_RdDWord>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d32:	4313      	orrs	r3, r2
 8007d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	0e5b      	lsrs	r3, r3, #25
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	0c9b      	lsrs	r3, r3, #18
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	0adb      	lsrs	r3, r3, #11
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	091b      	lsrs	r3, r3, #4
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8007d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	00db      	lsls	r3, r3, #3
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8007d82:	2278      	movs	r2, #120	; 0x78
 8007d84:	2194      	movs	r1, #148	; 0x94
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f002 f8ce 	bl	8009f28 <VL53L0X_WrByte>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d94:	4313      	orrs	r3, r2
 8007d96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fdca 	bl	8007934 <VL53L0X_device_read_strobe>
 8007da0:	4603      	mov	r3, r0
 8007da2:	461a      	mov	r2, r3
 8007da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007da8:	4313      	orrs	r3, r2
 8007daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007dae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007db2:	461a      	mov	r2, r3
 8007db4:	2190      	movs	r1, #144	; 0x90
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f002 f99a 	bl	800a0f0 <VL53L0X_RdDWord>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	0f5b      	lsrs	r3, r3, #29
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007dd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dda:	4413      	add	r3, r2
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	0d9b      	lsrs	r3, r3, #22
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	0bdb      	lsrs	r3, r3, #15
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	0a1b      	lsrs	r3, r3, #8
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8007e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	019b      	lsls	r3, r3, #6
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8007e2a:	2279      	movs	r2, #121	; 0x79
 8007e2c:	2194      	movs	r1, #148	; 0x94
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f002 f87a 	bl	8009f28 <VL53L0X_WrByte>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff fd76 	bl	8007934 <VL53L0X_device_read_strobe>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	2190      	movs	r1, #144	; 0x90
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f002 f946 	bl	800a0f0 <VL53L0X_RdDWord>
 8007e64:	4603      	mov	r3, r0
 8007e66:	461a      	mov	r2, r3
 8007e68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	0e9b      	lsrs	r3, r3, #26
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e82:	4413      	add	r3, r2
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	0cdb      	lsrs	r3, r3, #19
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	0b1b      	lsrs	r3, r3, #12
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	095b      	lsrs	r3, r3, #5
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007ec4:	227a      	movs	r2, #122	; 0x7a
 8007ec6:	2194      	movs	r1, #148	; 0x94
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f002 f82d 	bl	8009f28 <VL53L0X_WrByte>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fd29 	bl	8007934 <VL53L0X_device_read_strobe>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007ef0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	2190      	movs	r1, #144	; 0x90
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f002 f8f9 	bl	800a0f0 <VL53L0X_RdDWord>
 8007efe:	4603      	mov	r3, r0
 8007f00:	461a      	mov	r2, r3
 8007f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f06:	4313      	orrs	r3, r2
 8007f08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0e:	0f9b      	lsrs	r3, r3, #30
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f16:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007f18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f1c:	4413      	add	r3, r2
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	0ddb      	lsrs	r3, r3, #23
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	0c1b      	lsrs	r3, r3, #16
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	0a5b      	lsrs	r3, r3, #9
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	089b      	lsrs	r3, r3, #2
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 80f1 	beq.w	8008152 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007f70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f74:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f040 80ea 	bne.w	8008152 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007f7e:	227b      	movs	r2, #123	; 0x7b
 8007f80:	2194      	movs	r1, #148	; 0x94
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 ffd0 	bl	8009f28 <VL53L0X_WrByte>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fccc 	bl	8007934 <VL53L0X_device_read_strobe>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fae:	461a      	mov	r2, r3
 8007fb0:	2190      	movs	r1, #144	; 0x90
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f002 f89c 	bl	800a0f0 <VL53L0X_RdDWord>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007fc6:	227c      	movs	r2, #124	; 0x7c
 8007fc8:	2194      	movs	r1, #148	; 0x94
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 ffac 	bl	8009f28 <VL53L0X_WrByte>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff fca8 	bl	8007934 <VL53L0X_device_read_strobe>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fec:	4313      	orrs	r3, r2
 8007fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	2190      	movs	r1, #144	; 0x90
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f002 f878 	bl	800a0f0 <VL53L0X_RdDWord>
 8008000:	4603      	mov	r3, r0
 8008002:	461a      	mov	r2, r3
 8008004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008008:	4313      	orrs	r3, r2
 800800a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800800e:	2273      	movs	r2, #115	; 0x73
 8008010:	2194      	movs	r1, #148	; 0x94
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 ff88 	bl	8009f28 <VL53L0X_WrByte>
 8008018:	4603      	mov	r3, r0
 800801a:	461a      	mov	r2, r3
 800801c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008020:	4313      	orrs	r3, r2
 8008022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff fc84 	bl	8007934 <VL53L0X_device_read_strobe>
 800802c:	4603      	mov	r3, r0
 800802e:	461a      	mov	r2, r3
 8008030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008034:	4313      	orrs	r3, r2
 8008036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800803a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800803e:	461a      	mov	r2, r3
 8008040:	2190      	movs	r1, #144	; 0x90
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f002 f854 	bl	800a0f0 <VL53L0X_RdDWord>
 8008048:	4603      	mov	r3, r0
 800804a:	461a      	mov	r2, r3
 800804c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008050:	4313      	orrs	r3, r2
 8008052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800805a:	b29b      	uxth	r3, r3
 800805c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800805e:	2274      	movs	r2, #116	; 0x74
 8008060:	2194      	movs	r1, #148	; 0x94
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 ff60 	bl	8009f28 <VL53L0X_WrByte>
 8008068:	4603      	mov	r3, r0
 800806a:	461a      	mov	r2, r3
 800806c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008070:	4313      	orrs	r3, r2
 8008072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff fc5c 	bl	8007934 <VL53L0X_device_read_strobe>
 800807c:	4603      	mov	r3, r0
 800807e:	461a      	mov	r2, r3
 8008080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008084:	4313      	orrs	r3, r2
 8008086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800808a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800808e:	461a      	mov	r2, r3
 8008090:	2190      	movs	r1, #144	; 0x90
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f002 f82c 	bl	800a0f0 <VL53L0X_RdDWord>
 8008098:	4603      	mov	r3, r0
 800809a:	461a      	mov	r2, r3
 800809c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80080aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080ac:	4313      	orrs	r3, r2
 80080ae:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80080b0:	2275      	movs	r2, #117	; 0x75
 80080b2:	2194      	movs	r1, #148	; 0x94
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 ff37 	bl	8009f28 <VL53L0X_WrByte>
 80080ba:	4603      	mov	r3, r0
 80080bc:	461a      	mov	r2, r3
 80080be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff fc33 	bl	8007934 <VL53L0X_device_read_strobe>
 80080ce:	4603      	mov	r3, r0
 80080d0:	461a      	mov	r2, r3
 80080d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80080dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80080e0:	461a      	mov	r2, r3
 80080e2:	2190      	movs	r1, #144	; 0x90
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f002 f803 	bl	800a0f0 <VL53L0X_RdDWord>
 80080ea:	4603      	mov	r3, r0
 80080ec:	461a      	mov	r2, r3
 80080ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080f2:	4313      	orrs	r3, r2
 80080f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008100:	2276      	movs	r2, #118	; 0x76
 8008102:	2194      	movs	r1, #148	; 0x94
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 ff0f 	bl	8009f28 <VL53L0X_WrByte>
 800810a:	4603      	mov	r3, r0
 800810c:	461a      	mov	r2, r3
 800810e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008112:	4313      	orrs	r3, r2
 8008114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff fc0b 	bl	8007934 <VL53L0X_device_read_strobe>
 800811e:	4603      	mov	r3, r0
 8008120:	461a      	mov	r2, r3
 8008122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008126:	4313      	orrs	r3, r2
 8008128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800812c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008130:	461a      	mov	r2, r3
 8008132:	2190      	movs	r1, #144	; 0x90
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 ffdb 	bl	800a0f0 <VL53L0X_RdDWord>
 800813a:	4603      	mov	r3, r0
 800813c:	461a      	mov	r2, r3
 800813e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008142:	4313      	orrs	r3, r2
 8008144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800814c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800814e:	4313      	orrs	r3, r2
 8008150:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008152:	2200      	movs	r2, #0
 8008154:	2181      	movs	r1, #129	; 0x81
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f001 fee6 	bl	8009f28 <VL53L0X_WrByte>
 800815c:	4603      	mov	r3, r0
 800815e:	461a      	mov	r2, r3
 8008160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008164:	4313      	orrs	r3, r2
 8008166:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800816a:	2206      	movs	r2, #6
 800816c:	21ff      	movs	r1, #255	; 0xff
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 feda 	bl	8009f28 <VL53L0X_WrByte>
 8008174:	4603      	mov	r3, r0
 8008176:	461a      	mov	r2, r3
 8008178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800817c:	4313      	orrs	r3, r2
 800817e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008182:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008186:	461a      	mov	r2, r3
 8008188:	2183      	movs	r1, #131	; 0x83
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 ff4e 	bl	800a02c <VL53L0X_RdByte>
 8008190:	4603      	mov	r3, r0
 8008192:	461a      	mov	r2, r3
 8008194:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008198:	4313      	orrs	r3, r2
 800819a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800819e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081a2:	f023 0304 	bic.w	r3, r3, #4
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	2183      	movs	r1, #131	; 0x83
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 febb 	bl	8009f28 <VL53L0X_WrByte>
 80081b2:	4603      	mov	r3, r0
 80081b4:	461a      	mov	r2, r3
 80081b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ba:	4313      	orrs	r3, r2
 80081bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80081c0:	2201      	movs	r2, #1
 80081c2:	21ff      	movs	r1, #255	; 0xff
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 feaf 	bl	8009f28 <VL53L0X_WrByte>
 80081ca:	4603      	mov	r3, r0
 80081cc:	461a      	mov	r2, r3
 80081ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80081d8:	2201      	movs	r2, #1
 80081da:	2100      	movs	r1, #0
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fea3 	bl	8009f28 <VL53L0X_WrByte>
 80081e2:	4603      	mov	r3, r0
 80081e4:	461a      	mov	r2, r3
 80081e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ea:	4313      	orrs	r3, r2
 80081ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80081f0:	2200      	movs	r2, #0
 80081f2:	21ff      	movs	r1, #255	; 0xff
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 fe97 	bl	8009f28 <VL53L0X_WrByte>
 80081fa:	4603      	mov	r3, r0
 80081fc:	461a      	mov	r2, r3
 80081fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008202:	4313      	orrs	r3, r2
 8008204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008208:	2200      	movs	r2, #0
 800820a:	2180      	movs	r1, #128	; 0x80
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 fe8b 	bl	8009f28 <VL53L0X_WrByte>
 8008212:	4603      	mov	r3, r0
 8008214:	461a      	mov	r2, r3
 8008216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800821a:	4313      	orrs	r3, r2
 800821c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008220:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008224:	2b00      	cmp	r3, #0
 8008226:	f040 808f 	bne.w	8008348 <VL53L0X_get_info_from_device+0x98e>
 800822a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800822e:	2b07      	cmp	r3, #7
 8008230:	f000 808a 	beq.w	8008348 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d024      	beq.n	8008288 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800823e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008242:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008246:	2b00      	cmp	r3, #0
 8008248:	d11e      	bne.n	8008288 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008250:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800825a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800825e:	2300      	movs	r3, #0
 8008260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008262:	e00e      	b.n	8008282 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008264:	f107 0208 	add.w	r2, r7, #8
 8008268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800826a:	4413      	add	r3, r2
 800826c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008272:	4413      	add	r3, r2
 8008274:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008278:	460a      	mov	r2, r1
 800827a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800827c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827e:	3301      	adds	r3, #1
 8008280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008284:	2b05      	cmp	r3, #5
 8008286:	dded      	ble.n	8008264 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d018      	beq.n	80082c4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008292:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008296:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800829a:	2b00      	cmp	r3, #0
 800829c:	d112      	bne.n	80082c4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800829e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80082a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	33f3      	adds	r3, #243	; 0xf3
 80082b6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80082b8:	f107 0310 	add.w	r3, r7, #16
 80082bc:	4619      	mov	r1, r3
 80082be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082c0:	f001 ffb6 	bl	800a230 <strcpy>

		}

		if (((option & 4) == 4) &&
 80082c4:	78fb      	ldrb	r3, [r7, #3]
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d030      	beq.n	8008330 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80082ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082d2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d12a      	bne.n	8008330 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80082da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80082e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80082ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ec:	025b      	lsls	r3, r3, #9
 80082ee:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082f4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80082fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008300:	2b00      	cmp	r3, #0
 8008302:	d011      	beq.n	8008328 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800830c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008312:	fb02 f303 	mul.w	r3, r2, r3
 8008316:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008318:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800831c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008320:	425b      	negs	r3, r3
 8008322:	b29b      	uxth	r3, r3
 8008324:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008328:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008330:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	4313      	orrs	r3, r2
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800833e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008348:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800834c:	4618      	mov	r0, r3
 800834e:	3760      	adds	r7, #96	; 0x60
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008360:	f240 6277 	movw	r2, #1655	; 0x677
 8008364:	f04f 0300 	mov.w	r3, #0
 8008368:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800836c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008370:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	fb02 f303 	mul.w	r3, r2, r3
 8008380:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008382:	68bb      	ldr	r3, [r7, #8]
}
 8008384:	4618      	mov	r0, r3
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	bc80      	pop	{r7}
 800838c:	4770      	bx	lr

0800838e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800838e:	b480      	push	{r7}
 8008390:	b087      	sub	sp, #28
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d017      	beq.n	80083d8 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80083ae:	e005      	b.n	80083bc <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	085b      	lsrs	r3, r3, #1
 80083b4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80083b6:	89fb      	ldrh	r3, [r7, #14]
 80083b8:	3301      	adds	r3, #1
 80083ba:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1f4      	bne.n	80083b0 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80083c6:	89fb      	ldrh	r3, [r7, #14]
 80083c8:	021b      	lsls	r3, r3, #8
 80083ca:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80083d4:	4413      	add	r3, r2
 80083d6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80083d8:	8afb      	ldrh	r3, [r7, #22]

}
 80083da:	4618      	mov	r0, r3
 80083dc:	371c      	adds	r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr

080083e4 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80083f6:	88fa      	ldrh	r2, [r7, #6]
 80083f8:	0a12      	lsrs	r2, r2, #8
 80083fa:	b292      	uxth	r2, r2
 80083fc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80083fe:	3301      	adds	r3, #1
 8008400:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008402:	68fb      	ldr	r3, [r7, #12]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	bc80      	pop	{r7}
 800840c:	4770      	bx	lr
	...

08008410 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	4613      	mov	r3, r2
 800841c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	4619      	mov	r1, r3
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f7ff ff94 	bl	8008354 <VL53L0X_calc_macro_period_ps>
 800842c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008434:	4a0a      	ldr	r2, [pc, #40]	; (8008460 <VL53L0X_calc_timeout_mclks+0x50>)
 8008436:	fba2 2303 	umull	r2, r3, r2, r3
 800843a:	099b      	lsrs	r3, r3, #6
 800843c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008444:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	085b      	lsrs	r3, r3, #1
 800844c:	441a      	add	r2, r3
	timeout_period_mclks =
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	fbb2 f3f3 	udiv	r3, r2, r3
 8008454:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008456:	69fb      	ldr	r3, [r7, #28]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3720      	adds	r7, #32
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	10624dd3 	.word	0x10624dd3

08008464 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	807b      	strh	r3, [r7, #2]
 8008470:	4613      	mov	r3, r2
 8008472:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008478:	787b      	ldrb	r3, [r7, #1]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff ff69 	bl	8008354 <VL53L0X_calc_macro_period_ps>
 8008482:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800848a:	4a0a      	ldr	r2, [pc, #40]	; (80084b4 <VL53L0X_calc_timeout_us+0x50>)
 800848c:	fba2 2303 	umull	r2, r3, r2, r3
 8008490:	099b      	lsrs	r3, r3, #6
 8008492:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008494:	887b      	ldrh	r3, [r7, #2]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	fb02 f303 	mul.w	r3, r2, r3
 800849c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80084a0:	4a04      	ldr	r2, [pc, #16]	; (80084b4 <VL53L0X_calc_timeout_us+0x50>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	099b      	lsrs	r3, r3, #6
 80084a8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80084aa:	697b      	ldr	r3, [r7, #20]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	10624dd3 	.word	0x10624dd3

080084b8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08c      	sub	sp, #48	; 0x30
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	460b      	mov	r3, r1
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80084de:	7afb      	ldrb	r3, [r7, #11]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d005      	beq.n	80084f0 <get_sequence_step_timeout+0x38>
 80084e4:	7afb      	ldrb	r3, [r7, #11]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d002      	beq.n	80084f0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80084ea:	7afb      	ldrb	r3, [r7, #11]
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d128      	bne.n	8008542 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80084f0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80084f4:	461a      	mov	r2, r3
 80084f6:	2100      	movs	r1, #0
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7fd fa8a 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 80084fe:	4603      	mov	r3, r0
 8008500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008504:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800850c:	f107 0320 	add.w	r3, r7, #32
 8008510:	461a      	mov	r2, r3
 8008512:	2146      	movs	r1, #70	; 0x46
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f001 fd89 	bl	800a02c <VL53L0X_RdByte>
 800851a:	4603      	mov	r3, r0
 800851c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8008520:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008524:	b29b      	uxth	r3, r3
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff ff5c 	bl	80083e4 <VL53L0X_decode_timeout>
 800852c:	4603      	mov	r3, r0
 800852e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008530:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008536:	4619      	mov	r1, r3
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff ff93 	bl	8008464 <VL53L0X_calc_timeout_us>
 800853e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008540:	e092      	b.n	8008668 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	2b03      	cmp	r3, #3
 8008546:	d135      	bne.n	80085b4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008548:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800854c:	461a      	mov	r2, r3
 800854e:	2100      	movs	r1, #0
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f7fd fa5e 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 8008556:	4603      	mov	r3, r0
 8008558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800855c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008560:	2b00      	cmp	r3, #0
 8008562:	f040 8081 	bne.w	8008668 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008566:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800856a:	461a      	mov	r2, r3
 800856c:	2100      	movs	r1, #0
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f7fd fa4f 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 8008574:	4603      	mov	r3, r0
 8008576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800857a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800857e:	2b00      	cmp	r3, #0
 8008580:	d109      	bne.n	8008596 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008582:	f107 031e 	add.w	r3, r7, #30
 8008586:	461a      	mov	r2, r3
 8008588:	2151      	movs	r1, #81	; 0x51
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f001 fd78 	bl	800a080 <VL53L0X_RdWord>
 8008590:	4603      	mov	r3, r0
 8008592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008596:	8bfb      	ldrh	r3, [r7, #30]
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff ff23 	bl	80083e4 <VL53L0X_decode_timeout>
 800859e:	4603      	mov	r3, r0
 80085a0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80085a2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80085a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085a8:	4619      	mov	r1, r3
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f7ff ff5a 	bl	8008464 <VL53L0X_calc_timeout_us>
 80085b0:	62b8      	str	r0, [r7, #40]	; 0x28
 80085b2:	e059      	b.n	8008668 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80085b4:	7afb      	ldrb	r3, [r7, #11]
 80085b6:	2b04      	cmp	r3, #4
 80085b8:	d156      	bne.n	8008668 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80085ba:	f107 0314 	add.w	r3, r7, #20
 80085be:	4619      	mov	r1, r3
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7fd fb2f 	bl	8005c24 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01d      	beq.n	800860c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80085d0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80085d4:	461a      	mov	r2, r3
 80085d6:	2100      	movs	r1, #0
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7fd fa1a 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 80085de:	4603      	mov	r3, r0
 80085e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80085e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10f      	bne.n	800860c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80085ec:	f107 031e 	add.w	r3, r7, #30
 80085f0:	461a      	mov	r2, r3
 80085f2:	2151      	movs	r1, #81	; 0x51
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f001 fd43 	bl	800a080 <VL53L0X_RdWord>
 80085fa:	4603      	mov	r3, r0
 80085fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008600:	8bfb      	ldrh	r3, [r7, #30]
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff feee 	bl	80083e4 <VL53L0X_decode_timeout>
 8008608:	4603      	mov	r3, r0
 800860a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800860c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008610:	2b00      	cmp	r3, #0
 8008612:	d109      	bne.n	8008628 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008614:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008618:	461a      	mov	r2, r3
 800861a:	2101      	movs	r1, #1
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7fd f9f8 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 8008622:	4603      	mov	r3, r0
 8008624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008628:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10f      	bne.n	8008650 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8008630:	f107 031c 	add.w	r3, r7, #28
 8008634:	461a      	mov	r2, r3
 8008636:	2171      	movs	r1, #113	; 0x71
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f001 fd21 	bl	800a080 <VL53L0X_RdWord>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008644:	8bbb      	ldrh	r3, [r7, #28]
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff fecc 	bl	80083e4 <VL53L0X_decode_timeout>
 800864c:	4603      	mov	r3, r0
 800864e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8008650:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008658:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800865c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800865e:	4619      	mov	r1, r3
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff feff 	bl	8008464 <VL53L0X_calc_timeout_us>
 8008666:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800866c:	601a      	str	r2, [r3, #0]

	return Status;
 800866e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008672:	4618      	mov	r0, r3
 8008674:	3730      	adds	r7, #48	; 0x30
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b08a      	sub	sp, #40	; 0x28
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	460b      	mov	r3, r1
 8008684:	607a      	str	r2, [r7, #4]
 8008686:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008688:	2300      	movs	r3, #0
 800868a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800868e:	7afb      	ldrb	r3, [r7, #11]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <set_sequence_step_timeout+0x26>
 8008694:	7afb      	ldrb	r3, [r7, #11]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d002      	beq.n	80086a0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	2b02      	cmp	r3, #2
 800869e:	d138      	bne.n	8008712 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80086a0:	f107 031b 	add.w	r3, r7, #27
 80086a4:	461a      	mov	r2, r3
 80086a6:	2100      	movs	r1, #0
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f7fd f9b2 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80086b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11a      	bne.n	80086f2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80086bc:	7efb      	ldrb	r3, [r7, #27]
 80086be:	461a      	mov	r2, r3
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f7ff fea4 	bl	8008410 <VL53L0X_calc_timeout_mclks>
 80086c8:	4603      	mov	r3, r0
 80086ca:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80086cc:	8bbb      	ldrh	r3, [r7, #28]
 80086ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d2:	d903      	bls.n	80086dc <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80086d4:	23ff      	movs	r3, #255	; 0xff
 80086d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80086da:	e004      	b.n	80086e6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80086dc:	8bbb      	ldrh	r3, [r7, #28]
 80086de:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80086e0:	3b01      	subs	r3, #1
 80086e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80086e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80086f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f040 80ab 	bne.w	8008852 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80086fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008700:	461a      	mov	r2, r3
 8008702:	2146      	movs	r1, #70	; 0x46
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f001 fc0f 	bl	8009f28 <VL53L0X_WrByte>
 800870a:	4603      	mov	r3, r0
 800870c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8008710:	e09f      	b.n	8008852 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008712:	7afb      	ldrb	r3, [r7, #11]
 8008714:	2b03      	cmp	r3, #3
 8008716:	d135      	bne.n	8008784 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800871c:	2b00      	cmp	r3, #0
 800871e:	d11b      	bne.n	8008758 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008720:	f107 031b 	add.w	r3, r7, #27
 8008724:	461a      	mov	r2, r3
 8008726:	2100      	movs	r1, #0
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7fd f972 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 800872e:	4603      	mov	r3, r0
 8008730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008734:	7efb      	ldrb	r3, [r7, #27]
 8008736:	461a      	mov	r2, r3
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f7ff fe68 	bl	8008410 <VL53L0X_calc_timeout_mclks>
 8008740:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8008742:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008744:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fe21 	bl	800838e <VL53L0X_encode_timeout>
 800874c:	4603      	mov	r3, r0
 800874e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008750:	8b3a      	ldrh	r2, [r7, #24]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008758:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800875c:	2b00      	cmp	r3, #0
 800875e:	d108      	bne.n	8008772 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008760:	8b3b      	ldrh	r3, [r7, #24]
 8008762:	461a      	mov	r2, r3
 8008764:	2151      	movs	r1, #81	; 0x51
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f001 fc02 	bl	8009f70 <VL53L0X_WrWord>
 800876c:	4603      	mov	r3, r0
 800876e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008772:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008776:	2b00      	cmp	r3, #0
 8008778:	d16b      	bne.n	8008852 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008782:	e066      	b.n	8008852 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008784:	7afb      	ldrb	r3, [r7, #11]
 8008786:	2b04      	cmp	r3, #4
 8008788:	d160      	bne.n	800884c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800878a:	f107 0310 	add.w	r3, r7, #16
 800878e:	4619      	mov	r1, r3
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f7fd fa47 	bl	8005c24 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800879a:	7cfb      	ldrb	r3, [r7, #19]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d01d      	beq.n	80087dc <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80087a0:	f107 031b 	add.w	r3, r7, #27
 80087a4:	461a      	mov	r2, r3
 80087a6:	2100      	movs	r1, #0
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f7fd f932 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80087b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10f      	bne.n	80087dc <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80087bc:	f107 0318 	add.w	r3, r7, #24
 80087c0:	461a      	mov	r2, r3
 80087c2:	2151      	movs	r1, #81	; 0x51
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f001 fc5b 	bl	800a080 <VL53L0X_RdWord>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80087d0:	8b3b      	ldrh	r3, [r7, #24]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff fe06 	bl	80083e4 <VL53L0X_decode_timeout>
 80087d8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80087da:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80087dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d109      	bne.n	80087f8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80087e4:	f107 031b 	add.w	r3, r7, #27
 80087e8:	461a      	mov	r2, r3
 80087ea:	2101      	movs	r1, #1
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f7fd f910 	bl	8005a12 <VL53L0X_GetVcselPulsePeriod>
 80087f2:	4603      	mov	r3, r0
 80087f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80087f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d128      	bne.n	8008852 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008800:	7efb      	ldrb	r3, [r7, #27]
 8008802:	461a      	mov	r2, r3
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff fe02 	bl	8008410 <VL53L0X_calc_timeout_mclks>
 800880c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800880e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008810:	6a3a      	ldr	r2, [r7, #32]
 8008812:	4413      	add	r3, r2
 8008814:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8008816:	6a38      	ldr	r0, [r7, #32]
 8008818:	f7ff fdb9 	bl	800838e <VL53L0X_encode_timeout>
 800881c:	4603      	mov	r3, r0
 800881e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8008820:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008824:	2b00      	cmp	r3, #0
 8008826:	d108      	bne.n	800883a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008828:	8bfb      	ldrh	r3, [r7, #30]
 800882a:	461a      	mov	r2, r3
 800882c:	2171      	movs	r1, #113	; 0x71
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f001 fb9e 	bl	8009f70 <VL53L0X_WrWord>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800883a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800883e:	2b00      	cmp	r3, #0
 8008840:	d107      	bne.n	8008852 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800884a:	e002      	b.n	8008852 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800884c:	23fc      	movs	r3, #252	; 0xfc
 800884e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8008852:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008856:	4618      	mov	r0, r3
 8008858:	3728      	adds	r7, #40	; 0x28
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b08a      	sub	sp, #40	; 0x28
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
 800886a:	4613      	mov	r3, r2
 800886c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800886e:	2300      	movs	r3, #0
 8008870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8008874:	230c      	movs	r3, #12
 8008876:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800887a:	2312      	movs	r3, #18
 800887c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8008880:	2308      	movs	r3, #8
 8008882:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8008886:	230e      	movs	r3, #14
 8008888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8008890:	78bb      	ldrb	r3, [r7, #2]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800889c:	23fc      	movs	r3, #252	; 0xfc
 800889e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088a2:	e020      	b.n	80088e6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10d      	bne.n	80088c6 <VL53L0X_set_vcsel_pulse_period+0x68>
 80088aa:	78ba      	ldrb	r2, [r7, #2]
 80088ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d304      	bcc.n	80088be <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80088b4:	78ba      	ldrb	r2, [r7, #2]
 80088b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d903      	bls.n	80088c6 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80088be:	23fc      	movs	r3, #252	; 0xfc
 80088c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088c4:	e00f      	b.n	80088e6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d10c      	bne.n	80088e6 <VL53L0X_set_vcsel_pulse_period+0x88>
 80088cc:	78ba      	ldrb	r2, [r7, #2]
 80088ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d304      	bcc.n	80088e0 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80088d6:	78ba      	ldrb	r2, [r7, #2]
 80088d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088dc:	429a      	cmp	r2, r3
 80088de:	d902      	bls.n	80088e6 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80088e0:	23fc      	movs	r3, #252	; 0xfc
 80088e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80088e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80088ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088f2:	e237      	b.n	8008d64 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80088f4:	78fb      	ldrb	r3, [r7, #3]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d150      	bne.n	800899c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80088fa:	78bb      	ldrb	r3, [r7, #2]
 80088fc:	2b0c      	cmp	r3, #12
 80088fe:	d110      	bne.n	8008922 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8008900:	2218      	movs	r2, #24
 8008902:	2157      	movs	r1, #87	; 0x57
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 fb0f 	bl	8009f28 <VL53L0X_WrByte>
 800890a:	4603      	mov	r3, r0
 800890c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8008910:	2208      	movs	r2, #8
 8008912:	2156      	movs	r1, #86	; 0x56
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 fb07 	bl	8009f28 <VL53L0X_WrByte>
 800891a:	4603      	mov	r3, r0
 800891c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008920:	e17f      	b.n	8008c22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008922:	78bb      	ldrb	r3, [r7, #2]
 8008924:	2b0e      	cmp	r3, #14
 8008926:	d110      	bne.n	800894a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8008928:	2230      	movs	r2, #48	; 0x30
 800892a:	2157      	movs	r1, #87	; 0x57
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 fafb 	bl	8009f28 <VL53L0X_WrByte>
 8008932:	4603      	mov	r3, r0
 8008934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8008938:	2208      	movs	r2, #8
 800893a:	2156      	movs	r1, #86	; 0x56
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 faf3 	bl	8009f28 <VL53L0X_WrByte>
 8008942:	4603      	mov	r3, r0
 8008944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008948:	e16b      	b.n	8008c22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800894a:	78bb      	ldrb	r3, [r7, #2]
 800894c:	2b10      	cmp	r3, #16
 800894e:	d110      	bne.n	8008972 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8008950:	2240      	movs	r2, #64	; 0x40
 8008952:	2157      	movs	r1, #87	; 0x57
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 fae7 	bl	8009f28 <VL53L0X_WrByte>
 800895a:	4603      	mov	r3, r0
 800895c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8008960:	2208      	movs	r2, #8
 8008962:	2156      	movs	r1, #86	; 0x56
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 fadf 	bl	8009f28 <VL53L0X_WrByte>
 800896a:	4603      	mov	r3, r0
 800896c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008970:	e157      	b.n	8008c22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8008972:	78bb      	ldrb	r3, [r7, #2]
 8008974:	2b12      	cmp	r3, #18
 8008976:	f040 8154 	bne.w	8008c22 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800897a:	2250      	movs	r2, #80	; 0x50
 800897c:	2157      	movs	r1, #87	; 0x57
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fad2 	bl	8009f28 <VL53L0X_WrByte>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800898a:	2208      	movs	r2, #8
 800898c:	2156      	movs	r1, #86	; 0x56
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 faca 	bl	8009f28 <VL53L0X_WrByte>
 8008994:	4603      	mov	r3, r0
 8008996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800899a:	e142      	b.n	8008c22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	f040 813f 	bne.w	8008c22 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80089a4:	78bb      	ldrb	r3, [r7, #2]
 80089a6:	2b08      	cmp	r3, #8
 80089a8:	d14c      	bne.n	8008a44 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80089aa:	2210      	movs	r2, #16
 80089ac:	2148      	movs	r1, #72	; 0x48
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 faba 	bl	8009f28 <VL53L0X_WrByte>
 80089b4:	4603      	mov	r3, r0
 80089b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80089ba:	2208      	movs	r2, #8
 80089bc:	2147      	movs	r1, #71	; 0x47
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fab2 	bl	8009f28 <VL53L0X_WrByte>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80089ca:	2202      	movs	r2, #2
 80089cc:	2132      	movs	r1, #50	; 0x32
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 faaa 	bl	8009f28 <VL53L0X_WrByte>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089dc:	4313      	orrs	r3, r2
 80089de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80089e2:	220c      	movs	r2, #12
 80089e4:	2130      	movs	r1, #48	; 0x30
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f001 fa9e 	bl	8009f28 <VL53L0X_WrByte>
 80089ec:	4603      	mov	r3, r0
 80089ee:	461a      	mov	r2, r3
 80089f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089f4:	4313      	orrs	r3, r2
 80089f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80089fa:	2201      	movs	r2, #1
 80089fc:	21ff      	movs	r1, #255	; 0xff
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f001 fa92 	bl	8009f28 <VL53L0X_WrByte>
 8008a04:	4603      	mov	r3, r0
 8008a06:	461a      	mov	r2, r3
 8008a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008a12:	2230      	movs	r2, #48	; 0x30
 8008a14:	2130      	movs	r1, #48	; 0x30
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 fa86 	bl	8009f28 <VL53L0X_WrByte>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a24:	4313      	orrs	r3, r2
 8008a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	21ff      	movs	r1, #255	; 0xff
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 fa7a 	bl	8009f28 <VL53L0X_WrByte>
 8008a34:	4603      	mov	r3, r0
 8008a36:	461a      	mov	r2, r3
 8008a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a42:	e0ee      	b.n	8008c22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8008a44:	78bb      	ldrb	r3, [r7, #2]
 8008a46:	2b0a      	cmp	r3, #10
 8008a48:	d14c      	bne.n	8008ae4 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8008a4a:	2228      	movs	r2, #40	; 0x28
 8008a4c:	2148      	movs	r1, #72	; 0x48
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fa6a 	bl	8009f28 <VL53L0X_WrByte>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8008a5a:	2208      	movs	r2, #8
 8008a5c:	2147      	movs	r1, #71	; 0x47
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fa62 	bl	8009f28 <VL53L0X_WrByte>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008a6a:	2203      	movs	r2, #3
 8008a6c:	2132      	movs	r1, #50	; 0x32
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 fa5a 	bl	8009f28 <VL53L0X_WrByte>
 8008a74:	4603      	mov	r3, r0
 8008a76:	461a      	mov	r2, r3
 8008a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008a82:	2209      	movs	r2, #9
 8008a84:	2130      	movs	r1, #48	; 0x30
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 fa4e 	bl	8009f28 <VL53L0X_WrByte>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	21ff      	movs	r1, #255	; 0xff
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 fa42 	bl	8009f28 <VL53L0X_WrByte>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aac:	4313      	orrs	r3, r2
 8008aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	2130      	movs	r1, #48	; 0x30
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 fa36 	bl	8009f28 <VL53L0X_WrByte>
 8008abc:	4603      	mov	r3, r0
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008aca:	2200      	movs	r2, #0
 8008acc:	21ff      	movs	r1, #255	; 0xff
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fa2a 	bl	8009f28 <VL53L0X_WrByte>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008adc:	4313      	orrs	r3, r2
 8008ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ae2:	e09e      	b.n	8008c22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8008ae4:	78bb      	ldrb	r3, [r7, #2]
 8008ae6:	2b0c      	cmp	r3, #12
 8008ae8:	d14c      	bne.n	8008b84 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8008aea:	2238      	movs	r2, #56	; 0x38
 8008aec:	2148      	movs	r1, #72	; 0x48
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 fa1a 	bl	8009f28 <VL53L0X_WrByte>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8008afa:	2208      	movs	r2, #8
 8008afc:	2147      	movs	r1, #71	; 0x47
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fa12 	bl	8009f28 <VL53L0X_WrByte>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	2132      	movs	r1, #50	; 0x32
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f001 fa0a 	bl	8009f28 <VL53L0X_WrByte>
 8008b14:	4603      	mov	r3, r0
 8008b16:	461a      	mov	r2, r3
 8008b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008b22:	2208      	movs	r2, #8
 8008b24:	2130      	movs	r1, #48	; 0x30
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 f9fe 	bl	8009f28 <VL53L0X_WrByte>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b34:	4313      	orrs	r3, r2
 8008b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	21ff      	movs	r1, #255	; 0xff
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 f9f2 	bl	8009f28 <VL53L0X_WrByte>
 8008b44:	4603      	mov	r3, r0
 8008b46:	461a      	mov	r2, r3
 8008b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008b52:	2220      	movs	r2, #32
 8008b54:	2130      	movs	r1, #48	; 0x30
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 f9e6 	bl	8009f28 <VL53L0X_WrByte>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b64:	4313      	orrs	r3, r2
 8008b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	21ff      	movs	r1, #255	; 0xff
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 f9da 	bl	8009f28 <VL53L0X_WrByte>
 8008b74:	4603      	mov	r3, r0
 8008b76:	461a      	mov	r2, r3
 8008b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b82:	e04e      	b.n	8008c22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008b84:	78bb      	ldrb	r3, [r7, #2]
 8008b86:	2b0e      	cmp	r3, #14
 8008b88:	d14b      	bne.n	8008c22 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8008b8a:	2248      	movs	r2, #72	; 0x48
 8008b8c:	2148      	movs	r1, #72	; 0x48
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 f9ca 	bl	8009f28 <VL53L0X_WrByte>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8008b9a:	2208      	movs	r2, #8
 8008b9c:	2147      	movs	r1, #71	; 0x47
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 f9c2 	bl	8009f28 <VL53L0X_WrByte>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8008baa:	2203      	movs	r2, #3
 8008bac:	2132      	movs	r1, #50	; 0x32
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 f9ba 	bl	8009f28 <VL53L0X_WrByte>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008bc2:	2207      	movs	r2, #7
 8008bc4:	2130      	movs	r1, #48	; 0x30
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 f9ae 	bl	8009f28 <VL53L0X_WrByte>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008bda:	2201      	movs	r2, #1
 8008bdc:	21ff      	movs	r1, #255	; 0xff
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 f9a2 	bl	8009f28 <VL53L0X_WrByte>
 8008be4:	4603      	mov	r3, r0
 8008be6:	461a      	mov	r2, r3
 8008be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bec:	4313      	orrs	r3, r2
 8008bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	2130      	movs	r1, #48	; 0x30
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 f996 	bl	8009f28 <VL53L0X_WrByte>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c04:	4313      	orrs	r3, r2
 8008c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	21ff      	movs	r1, #255	; 0xff
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f001 f98a 	bl	8009f28 <VL53L0X_WrByte>
 8008c14:	4603      	mov	r3, r0
 8008c16:	461a      	mov	r2, r3
 8008c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8008c22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d17e      	bne.n	8008d28 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8008c2a:	78bb      	ldrb	r3, [r7, #2]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fe fe3c 	bl	80078aa <VL53L0X_encode_vcsel_period>
 8008c32:	4603      	mov	r3, r0
 8008c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d045      	beq.n	8008cce <VL53L0X_set_vcsel_pulse_period+0x470>
 8008c42:	e06e      	b.n	8008d22 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008c44:	f107 0314 	add.w	r3, r7, #20
 8008c48:	461a      	mov	r2, r3
 8008c4a:	2103      	movs	r1, #3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff fc33 	bl	80084b8 <get_sequence_step_timeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d109      	bne.n	8008c74 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8008c60:	f107 0310 	add.w	r3, r7, #16
 8008c64:	461a      	mov	r2, r3
 8008c66:	2102      	movs	r1, #2
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff fc25 	bl	80084b8 <get_sequence_step_timeout>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008c74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8008c7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008c80:	461a      	mov	r2, r3
 8008c82:	2150      	movs	r1, #80	; 0x50
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 f94f 	bl	8009f28 <VL53L0X_WrByte>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d108      	bne.n	8008caa <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	2103      	movs	r1, #3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff fceb 	bl	800867a <set_sequence_step_timeout>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8008caa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d108      	bne.n	8008cc4 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	2102      	movs	r1, #2
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff fcde 	bl	800867a <set_sequence_step_timeout>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	78ba      	ldrb	r2, [r7, #2]
 8008cc8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008ccc:	e02c      	b.n	8008d28 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008cce:	f107 0318 	add.w	r3, r7, #24
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	2104      	movs	r1, #4
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff fbee 	bl	80084b8 <get_sequence_step_timeout>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008ce2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d109      	bne.n	8008cfe <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8008cea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008cee:	461a      	mov	r2, r3
 8008cf0:	2170      	movs	r1, #112	; 0x70
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 f918 	bl	8009f28 <VL53L0X_WrByte>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008cfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d108      	bne.n	8008d18 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	2104      	movs	r1, #4
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff fcb4 	bl	800867a <set_sequence_step_timeout>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	78ba      	ldrb	r2, [r7, #2]
 8008d1c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008d20:	e002      	b.n	8008d28 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d22:	23fc      	movs	r3, #252	; 0xfc
 8008d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8008d28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d109      	bne.n	8008d44 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008d36:	69f9      	ldr	r1, [r7, #28]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7fc fe2c 	bl	8005996 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8008d44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d109      	bne.n	8008d60 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8008d4c:	f107 010f 	add.w	r1, r7, #15
 8008d50:	2301      	movs	r3, #1
 8008d52:	2200      	movs	r2, #0
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7fe fcc4 	bl	80076e2 <VL53L0X_perform_phase_calibration>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8008d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3728      	adds	r7, #40	; 0x28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	460b      	mov	r3, r1
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008d7e:	7afb      	ldrb	r3, [r7, #11]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d00a      	beq.n	8008d9e <VL53L0X_get_vcsel_pulse_period+0x32>
 8008d88:	e013      	b.n	8008db2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008d8a:	f107 0316 	add.w	r3, r7, #22
 8008d8e:	461a      	mov	r2, r3
 8008d90:	2150      	movs	r1, #80	; 0x50
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f001 f94a 	bl	800a02c <VL53L0X_RdByte>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008d9c:	e00b      	b.n	8008db6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008d9e:	f107 0316 	add.w	r3, r7, #22
 8008da2:	461a      	mov	r2, r3
 8008da4:	2170      	movs	r1, #112	; 0x70
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f001 f940 	bl	800a02c <VL53L0X_RdByte>
 8008dac:	4603      	mov	r3, r0
 8008dae:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008db0:	e001      	b.n	8008db6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008db2:	23fc      	movs	r3, #252	; 0xfc
 8008db4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d107      	bne.n	8008dce <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008dbe:	7dbb      	ldrb	r3, [r7, #22]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe fd60 	bl	8007886 <VL53L0X_decode_vcsel_period>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	701a      	strb	r2, [r3, #0]

	return Status;
 8008dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b092      	sub	sp, #72	; 0x48
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008dea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008dee:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008df0:	f240 7376 	movw	r3, #1910	; 0x776
 8008df4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8008df6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008dfa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008dfc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8008e02:	f240 234e 	movw	r3, #590	; 0x24e
 8008e06:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8008e08:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008e0e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008e12:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008e14:	f240 2326 	movw	r3, #550	; 0x226
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8008e1e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008e22:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d205      	bcs.n	8008e3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008e30:	23fc      	movs	r3, #252	; 0xfc
 8008e32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8008e36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e3a:	e0aa      	b.n	8008f92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008e48:	f107 0314 	add.w	r3, r7, #20
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7fc fee8 	bl	8005c24 <VL53L0X_GetSequenceStepEnables>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008e5a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d15b      	bne.n	8008f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008e62:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d105      	bne.n	8008e74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008e68:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008e6e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d052      	beq.n	8008f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008e74:	f107 0310 	add.w	r3, r7, #16
 8008e78:	461a      	mov	r2, r3
 8008e7a:	2102      	movs	r1, #2
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff fb1b 	bl	80084b8 <get_sequence_step_timeout>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008e88:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008e90:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e94:	e07d      	b.n	8008f92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8008e96:	7d3b      	ldrb	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00f      	beq.n	8008ebc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008e9c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea0:	4413      	add	r3, r2
 8008ea2:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d204      	bcs.n	8008eb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008eac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008eb4:	e002      	b.n	8008ebc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008eb6:	23fc      	movs	r3, #252	; 0xfc
 8008eb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008ebc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8008ec4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008ec8:	e063      	b.n	8008f92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008eca:	7dbb      	ldrb	r3, [r7, #22]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d011      	beq.n	8008ef4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	4413      	add	r3, r2
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d204      	bcs.n	8008eec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8008eea:	e016      	b.n	8008f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008eec:	23fc      	movs	r3, #252	; 0xfc
 8008eee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008ef2:	e012      	b.n	8008f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8008ef4:	7d7b      	ldrb	r3, [r7, #21]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00f      	beq.n	8008f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008efe:	4413      	add	r3, r2
 8008f00:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008f02:	69fa      	ldr	r2, [r7, #28]
 8008f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d204      	bcs.n	8008f14 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008f0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	643b      	str	r3, [r7, #64]	; 0x40
 8008f12:	e002      	b.n	8008f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008f14:	23fc      	movs	r3, #252	; 0xfc
 8008f16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008f1a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d002      	beq.n	8008f28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008f22:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f26:	e034      	b.n	8008f92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d019      	beq.n	8008f62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008f2e:	f107 030c 	add.w	r3, r7, #12
 8008f32:	461a      	mov	r2, r3
 8008f34:	2103      	movs	r1, #3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff fabe 	bl	80084b8 <get_sequence_step_timeout>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f46:	4413      	add	r3, r2
 8008f48:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d204      	bcs.n	8008f5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008f52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	643b      	str	r3, [r7, #64]	; 0x40
 8008f5a:	e002      	b.n	8008f62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008f5c:	23fc      	movs	r3, #252	; 0xfc
 8008f5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008f62:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d111      	bne.n	8008f8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008f6a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00e      	beq.n	8008f8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008f70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f7a:	2104      	movs	r1, #4
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7ff fb7c 	bl	800867a <set_sequence_step_timeout>
 8008f82:	4603      	mov	r3, r0
 8008f84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008f8e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3748      	adds	r7, #72	; 0x48
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b090      	sub	sp, #64	; 0x40
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008faa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008fae:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008fb0:	f240 7376 	movw	r3, #1910	; 0x776
 8008fb4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8008fb6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008fba:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008fbc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008fc0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008fc2:	f240 234e 	movw	r3, #590	; 0x24e
 8008fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008fc8:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008fcc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008fce:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008fd4:	f240 2326 	movw	r3, #550	; 0x226
 8008fd8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe2:	441a      	add	r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008fe8:	f107 0318 	add.w	r3, r7, #24
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7fc fe18 	bl	8005c24 <VL53L0X_GetSequenceStepEnables>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008ffa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009002:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009006:	e075      	b.n	80090f4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009008:	7e3b      	ldrb	r3, [r7, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d105      	bne.n	800901a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800900e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009014:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009016:	2b00      	cmp	r3, #0
 8009018:	d030      	beq.n	800907c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800901a:	f107 0310 	add.w	r3, r7, #16
 800901e:	461a      	mov	r2, r3
 8009020:	2102      	movs	r1, #2
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff fa48 	bl	80084b8 <get_sequence_step_timeout>
 8009028:	4603      	mov	r3, r0
 800902a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800902e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009032:	2b00      	cmp	r3, #0
 8009034:	d122      	bne.n	800907c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009036:	7e3b      	ldrb	r3, [r7, #24]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d007      	beq.n	800904c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009040:	6939      	ldr	r1, [r7, #16]
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009044:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009046:	441a      	add	r2, r3
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800904c:	7ebb      	ldrb	r3, [r7, #26]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009056:	6939      	ldr	r1, [r7, #16]
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	440b      	add	r3, r1
 800905c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800905e:	441a      	add	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	e00a      	b.n	800907c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009066:	7e7b      	ldrb	r3, [r7, #25]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d007      	beq.n	800907c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009070:	6939      	ldr	r1, [r7, #16]
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009076:	441a      	add	r2, r3
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800907c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009080:	2b00      	cmp	r3, #0
 8009082:	d114      	bne.n	80090ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009084:	7efb      	ldrb	r3, [r7, #27]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d011      	beq.n	80090ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800908a:	f107 030c 	add.w	r3, r7, #12
 800908e:	461a      	mov	r2, r3
 8009090:	2103      	movs	r1, #3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7ff fa10 	bl	80084b8 <get_sequence_step_timeout>
 8009098:	4603      	mov	r3, r0
 800909a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80090a2:	68f9      	ldr	r1, [r7, #12]
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80090a8:	441a      	add	r2, r3
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80090ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d114      	bne.n	80090e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80090b6:	7f3b      	ldrb	r3, [r7, #28]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d011      	beq.n	80090e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80090bc:	f107 0314 	add.w	r3, r7, #20
 80090c0:	461a      	mov	r2, r3
 80090c2:	2104      	movs	r1, #4
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff f9f7 	bl	80084b8 <get_sequence_step_timeout>
 80090ca:	4603      	mov	r3, r0
 80090cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80090d4:	6979      	ldr	r1, [r7, #20]
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80090da:	441a      	add	r2, r3
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80090e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80090f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3740      	adds	r7, #64	; 0x40
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009106:	2300      	movs	r3, #0
 8009108:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800910e:	e0c6      	b.n	800929e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	4413      	add	r3, r2
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	74fb      	strb	r3, [r7, #19]
		Index++;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	3301      	adds	r3, #1
 800911e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009120:	7cfb      	ldrb	r3, [r7, #19]
 8009122:	2bff      	cmp	r3, #255	; 0xff
 8009124:	f040 808d 	bne.w	8009242 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	4413      	add	r3, r2
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	747b      	strb	r3, [r7, #17]
			Index++;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	3301      	adds	r3, #1
 8009136:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009138:	7c7b      	ldrb	r3, [r7, #17]
 800913a:	2b03      	cmp	r3, #3
 800913c:	d87e      	bhi.n	800923c <VL53L0X_load_tuning_settings+0x140>
 800913e:	a201      	add	r2, pc, #4	; (adr r2, 8009144 <VL53L0X_load_tuning_settings+0x48>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	08009155 	.word	0x08009155
 8009148:	0800918f 	.word	0x0800918f
 800914c:	080091c9 	.word	0x080091c9
 8009150:	08009203 	.word	0x08009203
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	4413      	add	r3, r2
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	743b      	strb	r3, [r7, #16]
				Index++;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	3301      	adds	r3, #1
 8009162:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	4413      	add	r3, r2
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	3301      	adds	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009174:	7c3b      	ldrb	r3, [r7, #16]
 8009176:	b29b      	uxth	r3, r3
 8009178:	021b      	lsls	r3, r3, #8
 800917a:	b29a      	uxth	r2, r3
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	b29b      	uxth	r3, r3
 8009180:	4413      	add	r3, r2
 8009182:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	89ba      	ldrh	r2, [r7, #12]
 8009188:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800918c:	e087      	b.n	800929e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	4413      	add	r3, r2
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	743b      	strb	r3, [r7, #16]
				Index++;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	3301      	adds	r3, #1
 800919c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	4413      	add	r3, r2
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	3301      	adds	r3, #1
 80091ac:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80091ae:	7c3b      	ldrb	r3, [r7, #16]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	4413      	add	r3, r2
 80091bc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	89ba      	ldrh	r2, [r7, #12]
 80091c2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 80091c6:	e06a      	b.n	800929e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	4413      	add	r3, r2
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	743b      	strb	r3, [r7, #16]
				Index++;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	3301      	adds	r3, #1
 80091d6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	4413      	add	r3, r2
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	3301      	adds	r3, #1
 80091e6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80091e8:	7c3b      	ldrb	r3, [r7, #16]
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	021b      	lsls	r3, r3, #8
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	4413      	add	r3, r2
 80091f6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	89ba      	ldrh	r2, [r7, #12]
 80091fc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8009200:	e04d      	b.n	800929e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	4413      	add	r3, r2
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	743b      	strb	r3, [r7, #16]
				Index++;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	3301      	adds	r3, #1
 8009210:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	4413      	add	r3, r2
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	3301      	adds	r3, #1
 8009220:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009222:	7c3b      	ldrb	r3, [r7, #16]
 8009224:	b29b      	uxth	r3, r3
 8009226:	021b      	lsls	r3, r3, #8
 8009228:	b29a      	uxth	r2, r3
 800922a:	7bfb      	ldrb	r3, [r7, #15]
 800922c:	b29b      	uxth	r3, r3
 800922e:	4413      	add	r3, r2
 8009230:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	89ba      	ldrh	r2, [r7, #12]
 8009236:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800923a:	e030      	b.n	800929e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800923c:	23fc      	movs	r3, #252	; 0xfc
 800923e:	77fb      	strb	r3, [r7, #31]
 8009240:	e02d      	b.n	800929e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8009242:	7cfb      	ldrb	r3, [r7, #19]
 8009244:	2b04      	cmp	r3, #4
 8009246:	d828      	bhi.n	800929a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	4413      	add	r3, r2
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	3301      	adds	r3, #1
 8009256:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009258:	2300      	movs	r3, #0
 800925a:	61bb      	str	r3, [r7, #24]
 800925c:	e00f      	b.n	800927e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	4413      	add	r3, r2
 8009264:	7819      	ldrb	r1, [r3, #0]
 8009266:	f107 0208 	add.w	r2, r7, #8
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	4413      	add	r3, r2
 800926e:	460a      	mov	r2, r1
 8009270:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	3301      	adds	r3, #1
 8009276:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	3301      	adds	r3, #1
 800927c:	61bb      	str	r3, [r7, #24]
 800927e:	7cfb      	ldrb	r3, [r7, #19]
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	429a      	cmp	r2, r3
 8009284:	dbeb      	blt.n	800925e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009286:	7cfb      	ldrb	r3, [r7, #19]
 8009288:	f107 0208 	add.w	r2, r7, #8
 800928c:	7cb9      	ldrb	r1, [r7, #18]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fdee 	bl	8009e70 <VL53L0X_WriteMulti>
 8009294:	4603      	mov	r3, r0
 8009296:	77fb      	strb	r3, [r7, #31]
 8009298:	e001      	b.n	800929e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800929a:	23fc      	movs	r3, #252	; 0xfc
 800929c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	4413      	add	r3, r2
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <VL53L0X_load_tuning_settings+0x1b8>
 80092aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f43f af2e 	beq.w	8009110 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3720      	adds	r7, #32
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b088      	sub	sp, #32
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092cc:	2300      	movs	r3, #0
 80092ce:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80092d6:	f107 0313 	add.w	r3, r7, #19
 80092da:	4619      	mov	r1, r3
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f7fc fd2d 	bl	8005d3c <VL53L0X_GetXTalkCompensationEnable>
 80092e2:	4603      	mov	r3, r0
 80092e4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80092e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d111      	bne.n	8009312 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80092ee:	7cfb      	ldrb	r3, [r7, #19]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00e      	beq.n	8009312 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	8a9b      	ldrh	r3, [r3, #20]
 80092fe:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	fb02 f303 	mul.w	r3, r2, r3
 8009306:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	3380      	adds	r3, #128	; 0x80
 800930c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009312:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3720      	adds	r7, #32
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b086      	sub	sp, #24
 8009322:	af00      	add	r7, sp, #0
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	60b9      	str	r1, [r7, #8]
 8009328:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800932a:	2300      	movs	r3, #0
 800932c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009336:	f107 0310 	add.w	r3, r7, #16
 800933a:	461a      	mov	r2, r3
 800933c:	68b9      	ldr	r1, [r7, #8]
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff ffbe 	bl	80092c0 <VL53L0X_get_total_xtalk_rate>
 8009344:	4603      	mov	r3, r0
 8009346:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009348:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d105      	bne.n	800935c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	441a      	add	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	601a      	str	r2, [r3, #0]

	return Status;
 800935c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b09a      	sub	sp, #104	; 0x68
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009376:	2312      	movs	r3, #18
 8009378:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800937a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800937e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009380:	2342      	movs	r3, #66	; 0x42
 8009382:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009384:	2306      	movs	r3, #6
 8009386:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009388:	2307      	movs	r3, #7
 800938a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800938c:	2300      	movs	r3, #0
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8009398:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80093a0:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80093a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093a6:	fb02 f303 	mul.w	r3, r2, r3
 80093aa:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80093ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ae:	3380      	adds	r3, #128	; 0x80
 80093b0:	0a1b      	lsrs	r3, r3, #8
 80093b2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80093b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093b8:	fb02 f303 	mul.w	r3, r2, r3
 80093bc:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01a      	beq.n	80093fe <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	029b      	lsls	r3, r3, #10
 80093cc:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80093d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d4:	4413      	add	r3, r2
 80093d6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80093d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80093e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093e4:	4613      	mov	r3, r2
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	4413      	add	r3, r2
 80093ea:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80093ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ee:	fb03 f303 	mul.w	r3, r3, r3
 80093f2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80093f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80093fa:	0c1b      	lsrs	r3, r3, #16
 80093fc:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009402:	fb02 f303 	mul.w	r3, r2, r3
 8009406:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8009408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800940e:	0c1b      	lsrs	r3, r3, #16
 8009410:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	fb03 f303 	mul.w	r3, r3, r3
 8009418:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800941a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800941c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009420:	0c1b      	lsrs	r3, r3, #16
 8009422:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009426:	085a      	lsrs	r2, r3, #1
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	441a      	add	r2, r3
 800942c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800942e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009432:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009438:	fb02 f303 	mul.w	r3, r2, r3
 800943c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009444:	d302      	bcc.n	800944c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8009446:	4b54      	ldr	r3, [pc, #336]	; (8009598 <VL53L0X_calc_dmax+0x230>)
 8009448:	663b      	str	r3, [r7, #96]	; 0x60
 800944a:	e015      	b.n	8009478 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800944c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944e:	085a      	lsrs	r2, r3, #1
 8009450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009452:	441a      	add	r2, r3
 8009454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009456:	fbb2 f3f3 	udiv	r3, r2, r3
 800945a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800945c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800945e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009460:	fb02 f303 	mul.w	r3, r2, r3
 8009464:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009468:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800946c:	0c1b      	lsrs	r3, r3, #16
 800946e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8009470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009472:	fb03 f303 	mul.w	r3, r3, r3
 8009476:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800947a:	039b      	lsls	r3, r3, #14
 800947c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009480:	4a46      	ldr	r2, [pc, #280]	; (800959c <VL53L0X_calc_dmax+0x234>)
 8009482:	fba2 2303 	umull	r2, r3, r2, r3
 8009486:	099b      	lsrs	r3, r3, #6
 8009488:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	fb03 f303 	mul.w	r3, r3, r3
 8009490:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8009492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009494:	fb03 f303 	mul.w	r3, r3, r3
 8009498:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	3308      	adds	r3, #8
 800949e:	091b      	lsrs	r3, r3, #4
 80094a0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80094a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80094aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ac:	4613      	mov	r3, r2
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	4413      	add	r3, r2
 80094b2:	011b      	lsls	r3, r3, #4
 80094b4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80094bc:	0b9b      	lsrs	r3, r3, #14
 80094be:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80094c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094c4:	4413      	add	r3, r2
 80094c6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80094c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ca:	085b      	lsrs	r3, r3, #1
 80094cc:	69ba      	ldr	r2, [r7, #24]
 80094ce:	4413      	add	r3, r2
 80094d0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094da:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	039b      	lsls	r3, r3, #14
 80094e0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	085b      	lsrs	r3, r3, #1
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	4413      	add	r3, r2
 80094ea:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094fa:	fb02 f303 	mul.w	r3, r2, r3
 80094fe:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009506:	4a25      	ldr	r2, [pc, #148]	; (800959c <VL53L0X_calc_dmax+0x234>)
 8009508:	fba2 2303 	umull	r2, r3, r2, r3
 800950c:	099b      	lsrs	r3, r3, #6
 800950e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800951c:	4a1f      	ldr	r2, [pc, #124]	; (800959c <VL53L0X_calc_dmax+0x234>)
 800951e:	fba2 2303 	umull	r2, r3, r2, r3
 8009522:	099b      	lsrs	r3, r3, #6
 8009524:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8009526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009528:	3380      	adds	r3, #128	; 0x80
 800952a:	0a1b      	lsrs	r3, r3, #8
 800952c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d008      	beq.n	8009546 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	085a      	lsrs	r2, r3, #1
 8009538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953a:	441a      	add	r2, r3
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009542:	65bb      	str	r3, [r7, #88]	; 0x58
 8009544:	e001      	b.n	800954a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800954a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800954c:	f7fe f9bf 	bl	80078ce <VL53L0X_isqrt>
 8009550:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d008      	beq.n	800956a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	085a      	lsrs	r2, r3, #1
 800955c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955e:	441a      	add	r2, r3
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	fbb2 f3f3 	udiv	r3, r2, r3
 8009566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009568:	e001      	b.n	800956e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800956e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009570:	f7fe f9ad 	bl	80078ce <VL53L0X_isqrt>
 8009574:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009580:	429a      	cmp	r2, r3
 8009582:	d902      	bls.n	800958a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8009584:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009586:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009588:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800958a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800958e:	4618      	mov	r0, r3
 8009590:	3768      	adds	r7, #104	; 0x68
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	fff00000 	.word	0xfff00000
 800959c:	10624dd3 	.word	0x10624dd3

080095a0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b0b4      	sub	sp, #208	; 0xd0
 80095a4:	af04      	add	r7, sp, #16
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80095ae:	f44f 7348 	mov.w	r3, #800	; 0x320
 80095b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80095b6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80095ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80095be:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80095c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80095c6:	f241 235c 	movw	r3, #4700	; 0x125c
 80095ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80095ce:	4b9e      	ldr	r3, [pc, #632]	; (8009848 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80095d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80095d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80095d8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80095da:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80095de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095e6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80095e8:	4b98      	ldr	r3, [pc, #608]	; (800984c <VL53L0X_calc_sigma_estimate+0x2ac>)
 80095ea:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80095ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095f0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80095f2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80095f6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80095f8:	f240 6377 	movw	r3, #1655	; 0x677
 80095fc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095fe:	2300      	movs	r3, #0
 8009600:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009612:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8009616:	0c1b      	lsrs	r3, r3, #16
 8009618:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8009620:	f107 0310 	add.w	r3, r7, #16
 8009624:	461a      	mov	r2, r3
 8009626:	68b9      	ldr	r1, [r7, #8]
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7ff fe78 	bl	800931e <VL53L0X_get_total_signal_rate>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009634:	f107 0314 	add.w	r3, r7, #20
 8009638:	461a      	mov	r2, r3
 800963a:	68b9      	ldr	r1, [r7, #8]
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f7ff fe3f 	bl	80092c0 <VL53L0X_get_total_xtalk_rate>
 8009642:	4603      	mov	r3, r0
 8009644:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800964e:	fb02 f303 	mul.w	r3, r2, r3
 8009652:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009656:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800965a:	0c1b      	lsrs	r3, r3, #16
 800965c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009664:	fb02 f303 	mul.w	r3, r2, r3
 8009668:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800966c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009672:	429a      	cmp	r2, r3
 8009674:	d902      	bls.n	800967c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009678:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800967c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009680:	2b00      	cmp	r3, #0
 8009682:	d168      	bne.n	8009756 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800968a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009694:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009698:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800969c:	461a      	mov	r2, r3
 800969e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f7fe feb4 	bl	8008410 <VL53L0X_calc_timeout_mclks>
 80096a8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80096b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80096ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80096be:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80096c2:	461a      	mov	r2, r3
 80096c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f7fe fea1 	bl	8008410 <VL53L0X_calc_timeout_mclks>
 80096ce:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80096d0:	2303      	movs	r3, #3
 80096d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80096d6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80096da:	2b08      	cmp	r3, #8
 80096dc:	d102      	bne.n	80096e4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80096de:	2302      	movs	r3, #2
 80096e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80096e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80096ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80096ee:	fb02 f303 	mul.w	r3, r2, r3
 80096f2:	02db      	lsls	r3, r3, #11
 80096f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80096f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009700:	4a53      	ldr	r2, [pc, #332]	; (8009850 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009702:	fba2 2303 	umull	r2, r3, r2, r3
 8009706:	099b      	lsrs	r3, r3, #6
 8009708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800970c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009710:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009712:	fb02 f303 	mul.w	r3, r2, r3
 8009716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800971a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800971e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009722:	4a4b      	ldr	r2, [pc, #300]	; (8009850 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009724:	fba2 2303 	umull	r2, r3, r2, r3
 8009728:	099b      	lsrs	r3, r3, #6
 800972a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	3380      	adds	r3, #128	; 0x80
 8009732:	0a1b      	lsrs	r3, r3, #8
 8009734:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800973c:	fb02 f303 	mul.w	r3, r2, r3
 8009740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009748:	3380      	adds	r3, #128	; 0x80
 800974a:	0a1b      	lsrs	r3, r3, #8
 800974c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	021b      	lsls	r3, r3, #8
 8009754:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009756:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800975e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009762:	e15e      	b.n	8009a22 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8009764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10c      	bne.n	8009784 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009770:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009778:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2200      	movs	r2, #0
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	e14c      	b.n	8009a1e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009784:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009788:	2b00      	cmp	r3, #0
 800978a:	d102      	bne.n	8009792 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800978c:	2301      	movs	r3, #1
 800978e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009792:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009796:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800979a:	041a      	lsls	r2, r3, #16
 800979c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800979e:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80097a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d902      	bls.n	80097b6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80097b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80097b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80097ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80097be:	fb02 f303 	mul.w	r3, r2, r3
 80097c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80097c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80097ca:	4613      	mov	r3, r2
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	4413      	add	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe f87b 	bl	80078ce <VL53L0X_isqrt>
 80097d8:	4603      	mov	r3, r0
 80097da:	005b      	lsls	r3, r3, #1
 80097dc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	891b      	ldrh	r3, [r3, #8]
 80097e2:	461a      	mov	r2, r3
 80097e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097e6:	fb02 f303 	mul.w	r3, r2, r3
 80097ea:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80097ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097ee:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80097f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097f4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80097f6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80097f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80097fc:	4a14      	ldr	r2, [pc, #80]	; (8009850 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80097fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009802:	099b      	lsrs	r3, r3, #6
 8009804:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8009806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009808:	041b      	lsls	r3, r3, #16
 800980a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800980e:	4a10      	ldr	r2, [pc, #64]	; (8009850 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009810:	fba2 2303 	umull	r2, r3, r2, r3
 8009814:	099b      	lsrs	r3, r3, #6
 8009816:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8009818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981a:	021b      	lsls	r3, r3, #8
 800981c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800981e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	fbb2 f3f3 	udiv	r3, r2, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	bfb8      	it	lt
 800982a:	425b      	neglt	r3, r3
 800982c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800982e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	7e1b      	ldrb	r3, [r3, #24]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00b      	beq.n	8009854 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800983c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009844:	e033      	b.n	80098ae <VL53L0X_calc_sigma_estimate+0x30e>
 8009846:	bf00      	nop
 8009848:	028f87ae 	.word	0x028f87ae
 800984c:	0006999a 	.word	0x0006999a
 8009850:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800985a:	fbb2 f3f3 	udiv	r3, r2, r3
 800985e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8009862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009864:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800986c:	fb02 f303 	mul.w	r3, r2, r3
 8009870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009874:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800987a:	4413      	add	r3, r2
 800987c:	0c1b      	lsrs	r3, r3, #16
 800987e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8009882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009886:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800988a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800988e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009892:	085b      	lsrs	r3, r3, #1
 8009894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800989c:	fb03 f303 	mul.w	r3, r3, r3
 80098a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80098a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098a8:	0b9b      	lsrs	r3, r3, #14
 80098aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80098ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098b4:	fb02 f303 	mul.w	r3, r2, r3
 80098b8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80098c0:	0c1b      	lsrs	r3, r3, #16
 80098c2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	fb03 f303 	mul.w	r3, r3, r3
 80098ca:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80098cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80098d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80098d8:	0c1b      	lsrs	r3, r3, #16
 80098da:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80098dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098de:	fb03 f303 	mul.w	r3, r3, r3
 80098e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80098e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	4413      	add	r3, r2
 80098ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80098ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ee:	f7fd ffee 	bl	80078ce <VL53L0X_isqrt>
 80098f2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	041b      	lsls	r3, r3, #16
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	3332      	adds	r3, #50	; 0x32
 80098fe:	4a4b      	ldr	r2, [pc, #300]	; (8009a2c <VL53L0X_calc_sigma_estimate+0x48c>)
 8009900:	fba2 2303 	umull	r2, r3, r2, r3
 8009904:	095a      	lsrs	r2, r3, #5
 8009906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009908:	fbb2 f3f3 	udiv	r3, r2, r3
 800990c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8009910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009914:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8009918:	fb02 f303 	mul.w	r3, r2, r3
 800991c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009924:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009928:	3308      	adds	r3, #8
 800992a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800992e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009932:	4a3f      	ldr	r2, [pc, #252]	; (8009a30 <VL53L0X_calc_sigma_estimate+0x490>)
 8009934:	fba2 2303 	umull	r2, r3, r2, r3
 8009938:	0b5b      	lsrs	r3, r3, #13
 800993a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800993e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009942:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009944:	429a      	cmp	r2, r3
 8009946:	d902      	bls.n	800994e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8009948:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800994a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800994e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009956:	4413      	add	r3, r2
 8009958:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800995c:	4a35      	ldr	r2, [pc, #212]	; (8009a34 <VL53L0X_calc_sigma_estimate+0x494>)
 800995e:	fba2 2303 	umull	r2, r3, r2, r3
 8009962:	099b      	lsrs	r3, r3, #6
 8009964:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800996a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800996e:	441a      	add	r2, r3
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	fbb2 f3f3 	udiv	r3, r2, r3
 8009976:	4618      	mov	r0, r3
 8009978:	f7fd ffa9 	bl	80078ce <VL53L0X_isqrt>
 800997c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	021b      	lsls	r3, r3, #8
 8009982:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800998a:	4a2a      	ldr	r2, [pc, #168]	; (8009a34 <VL53L0X_calc_sigma_estimate+0x494>)
 800998c:	fba2 2303 	umull	r2, r3, r2, r3
 8009990:	099b      	lsrs	r3, r3, #6
 8009992:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009998:	fb03 f303 	mul.w	r3, r3, r3
 800999c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	fb03 f303 	mul.w	r3, r3, r3
 80099a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80099a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	4413      	add	r3, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fd ff8e 	bl	80078ce <VL53L0X_isqrt>
 80099b2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099ba:	fb02 f303 	mul.w	r3, r2, r3
 80099be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80099c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d009      	beq.n	80099dc <VL53L0X_calc_sigma_estimate+0x43c>
 80099c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d005      	beq.n	80099dc <VL53L0X_calc_sigma_estimate+0x43c>
 80099d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80099d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099d8:	429a      	cmp	r2, r3
 80099da:	d903      	bls.n	80099e4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80099dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80099ea:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80099f6:	6939      	ldr	r1, [r7, #16]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	9303      	str	r3, [sp, #12]
 80099fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a00:	9302      	str	r3, [sp, #8]
 8009a02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7ff fca8 	bl	8009368 <VL53L0X_calc_dmax>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a1e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	37c0      	adds	r7, #192	; 0xc0
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	51eb851f 	.word	0x51eb851f
 8009a30:	d1b71759 	.word	0xd1b71759
 8009a34:	10624dd3 	.word	0x10624dd3

08009a38 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b090      	sub	sp, #64	; 0x40
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	607a      	str	r2, [r7, #4]
 8009a42:	461a      	mov	r2, r3
 8009a44:	460b      	mov	r3, r1
 8009a46:	72fb      	strb	r3, [r7, #11]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009a8a:	7afb      	ldrb	r3, [r7, #11]
 8009a8c:	10db      	asrs	r3, r3, #3
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	f003 030f 	and.w	r3, r3, #15
 8009a94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009a98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d017      	beq.n	8009ad0 <VL53L0X_get_pal_range_status+0x98>
 8009aa0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009aa4:	2b05      	cmp	r3, #5
 8009aa6:	d013      	beq.n	8009ad0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009aa8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009aac:	2b07      	cmp	r3, #7
 8009aae:	d00f      	beq.n	8009ad0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009ab0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ab4:	2b0c      	cmp	r3, #12
 8009ab6:	d00b      	beq.n	8009ad0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009ab8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009abc:	2b0d      	cmp	r3, #13
 8009abe:	d007      	beq.n	8009ad0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8009ac0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ac4:	2b0e      	cmp	r3, #14
 8009ac6:	d003      	beq.n	8009ad0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8009ac8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009acc:	2b0f      	cmp	r3, #15
 8009ace:	d103      	bne.n	8009ad8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009ad6:	e002      	b.n	8009ade <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009ade:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d109      	bne.n	8009afa <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009ae6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009aea:	461a      	mov	r2, r3
 8009aec:	2100      	movs	r1, #0
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7fc f9f8 	bl	8005ee4 <VL53L0X_GetLimitCheckEnable>
 8009af4:	4603      	mov	r3, r0
 8009af6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8009afa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d02e      	beq.n	8009b60 <VL53L0X_get_pal_range_status+0x128>
 8009b02:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d12a      	bne.n	8009b60 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8009b0a:	f107 0310 	add.w	r3, r7, #16
 8009b0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009b12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7ff fd43 	bl	80095a0 <VL53L0X_calc_sigma_estimate>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8009b20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d103      	bne.n	8009b30 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b2e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8009b30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d113      	bne.n	8009b60 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8009b38:	f107 0320 	add.w	r3, r7, #32
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	2100      	movs	r1, #0
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7fc fa53 	bl	8005fec <VL53L0X_GetLimitCheckValue>
 8009b46:	4603      	mov	r3, r0
 8009b48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d006      	beq.n	8009b60 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8009b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b54:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d902      	bls.n	8009b60 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009b60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d109      	bne.n	8009b7c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009b68:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	2102      	movs	r1, #2
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f7fc f9b7 	bl	8005ee4 <VL53L0X_GetLimitCheckEnable>
 8009b76:	4603      	mov	r3, r0
 8009b78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009b7c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d044      	beq.n	8009c0e <VL53L0X_get_pal_range_status+0x1d6>
 8009b84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d140      	bne.n	8009c0e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009b8c:	f107 031c 	add.w	r3, r7, #28
 8009b90:	461a      	mov	r2, r3
 8009b92:	2102      	movs	r1, #2
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7fc fa29 	bl	8005fec <VL53L0X_GetLimitCheckValue>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009ba0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d107      	bne.n	8009bb8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009ba8:	2201      	movs	r2, #1
 8009baa:	21ff      	movs	r1, #255	; 0xff
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f9bb 	bl	8009f28 <VL53L0X_WrByte>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8009bb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d109      	bne.n	8009bd4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8009bc0:	f107 0316 	add.w	r3, r7, #22
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	21b6      	movs	r1, #182	; 0xb6
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f000 fa59 	bl	800a080 <VL53L0X_RdWord>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8009bd4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d107      	bne.n	8009bec <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009bdc:	2200      	movs	r2, #0
 8009bde:	21ff      	movs	r1, #255	; 0xff
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 f9a1 	bl	8009f28 <VL53L0X_WrByte>
 8009be6:	4603      	mov	r3, r0
 8009be8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8009bec:	8afb      	ldrh	r3, [r7, #22]
 8009bee:	025b      	lsls	r3, r3, #9
 8009bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bf6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d006      	beq.n	8009c0e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8009c00:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8009c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d902      	bls.n	8009c0e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009c0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d109      	bne.n	8009c2a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	2103      	movs	r1, #3
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7fc f960 	bl	8005ee4 <VL53L0X_GetLimitCheckEnable>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8009c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d023      	beq.n	8009c7a <VL53L0X_get_pal_range_status+0x242>
 8009c32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d11f      	bne.n	8009c7a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8009c3a:	893b      	ldrh	r3, [r7, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d102      	bne.n	8009c46 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	637b      	str	r3, [r7, #52]	; 0x34
 8009c44:	e005      	b.n	8009c52 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	021a      	lsls	r2, r3, #8
 8009c4a:	893b      	ldrh	r3, [r7, #8]
 8009c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c50:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009c52:	f107 0318 	add.w	r3, r7, #24
 8009c56:	461a      	mov	r2, r3
 8009c58:	2103      	movs	r1, #3
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f7fc f9c6 	bl	8005fec <VL53L0X_GetLimitCheckValue>
 8009c60:	4603      	mov	r3, r0
 8009c62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d006      	beq.n	8009c7a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009c6c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8009c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d202      	bcs.n	8009c7a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009c74:	2301      	movs	r3, #1
 8009c76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d14a      	bne.n	8009d18 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8009c82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d103      	bne.n	8009c92 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c8c:	22ff      	movs	r2, #255	; 0xff
 8009c8e:	701a      	strb	r2, [r3, #0]
 8009c90:	e042      	b.n	8009d18 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009c92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d007      	beq.n	8009caa <VL53L0X_get_pal_range_status+0x272>
 8009c9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d003      	beq.n	8009caa <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8009ca2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d103      	bne.n	8009cb2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cac:	2205      	movs	r2, #5
 8009cae:	701a      	strb	r2, [r3, #0]
 8009cb0:	e032      	b.n	8009d18 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8009cb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cb6:	2b06      	cmp	r3, #6
 8009cb8:	d003      	beq.n	8009cc2 <VL53L0X_get_pal_range_status+0x28a>
 8009cba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cbe:	2b09      	cmp	r3, #9
 8009cc0:	d103      	bne.n	8009cca <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8009cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc4:	2204      	movs	r2, #4
 8009cc6:	701a      	strb	r2, [r3, #0]
 8009cc8:	e026      	b.n	8009d18 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009cca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	d007      	beq.n	8009ce2 <VL53L0X_get_pal_range_status+0x2aa>
 8009cd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cd6:	2b0a      	cmp	r3, #10
 8009cd8:	d003      	beq.n	8009ce2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009cda:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d103      	bne.n	8009cea <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8009ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce4:	2203      	movs	r2, #3
 8009ce6:	701a      	strb	r2, [r3, #0]
 8009ce8:	e016      	b.n	8009d18 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009cea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cee:	2b04      	cmp	r3, #4
 8009cf0:	d003      	beq.n	8009cfa <VL53L0X_get_pal_range_status+0x2c2>
 8009cf2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d103      	bne.n	8009d02 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	701a      	strb	r2, [r3, #0]
 8009d00:	e00a      	b.n	8009d18 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8009d02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d103      	bne.n	8009d12 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8009d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	701a      	strb	r2, [r3, #0]
 8009d10:	e002      	b.n	8009d18 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8009d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d14:	2200      	movs	r2, #0
 8009d16:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d102      	bne.n	8009d26 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d22:	2200      	movs	r2, #0
 8009d24:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009d26:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7fc f8d8 	bl	8005ee4 <VL53L0X_GetLimitCheckEnable>
 8009d34:	4603      	mov	r3, r0
 8009d36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009d3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d14f      	bne.n	8009de2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8009d42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <VL53L0X_get_pal_range_status+0x31a>
 8009d4a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d103      	bne.n	8009d5a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8009d52:	2301      	movs	r3, #1
 8009d54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d58:	e002      	b.n	8009d60 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009d66:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009d6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d6e:	2b04      	cmp	r3, #4
 8009d70:	d003      	beq.n	8009d7a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8009d72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d103      	bne.n	8009d82 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d80:	e002      	b.n	8009d88 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009d8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8009d92:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <VL53L0X_get_pal_range_status+0x36a>
 8009d9a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d103      	bne.n	8009daa <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8009da2:	2301      	movs	r3, #1
 8009da4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da8:	e002      	b.n	8009db0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009db6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009dba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <VL53L0X_get_pal_range_status+0x392>
 8009dc2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d103      	bne.n	8009dd2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd0:	e002      	b.n	8009dd8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009dde:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009de2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3740      	adds	r7, #64	; 0x40
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b088      	sub	sp, #32
 8009df2:	af02      	add	r7, sp, #8
 8009df4:	60f8      	str	r0, [r7, #12]
 8009df6:	60b9      	str	r1, [r7, #8]
 8009df8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	330a      	adds	r3, #10
 8009dfe:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009e0c:	b299      	uxth	r1, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	4613      	mov	r3, r2
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	f7f8 f839 	bl	8001e90 <HAL_I2C_Master_Transmit>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009e22:	693b      	ldr	r3, [r7, #16]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af02      	add	r7, sp, #8
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	330a      	adds	r3, #10
 8009e3c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009e4a:	f043 0301 	orr.w	r3, r3, #1
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	b299      	uxth	r1, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	f7f8 f915 	bl	800208c <HAL_I2C_Master_Receive>
 8009e62:	4603      	mov	r3, r0
 8009e64:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009e66:	693b      	ldr	r3, [r7, #16]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	607a      	str	r2, [r7, #4]
 8009e7a:	603b      	str	r3, [r7, #0]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e80:	2300      	movs	r3, #0
 8009e82:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b3f      	cmp	r3, #63	; 0x3f
 8009e88:	d902      	bls.n	8009e90 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8009e8a:	f06f 0303 	mvn.w	r3, #3
 8009e8e:	e016      	b.n	8009ebe <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8009e90:	4a0d      	ldr	r2, [pc, #52]	; (8009ec8 <VL53L0X_WriteMulti+0x58>)
 8009e92:	7afb      	ldrb	r3, [r7, #11]
 8009e94:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	480c      	ldr	r0, [pc, #48]	; (8009ecc <VL53L0X_WriteMulti+0x5c>)
 8009e9c:	f000 f9d0 	bl	800a240 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	4908      	ldr	r1, [pc, #32]	; (8009ec8 <VL53L0X_WriteMulti+0x58>)
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f7ff ffa0 	bl	8009dee <_I2CWrite>
 8009eae:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009eb6:	23ec      	movs	r3, #236	; 0xec
 8009eb8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200007a4 	.word	0x200007a4
 8009ecc:	200007a5 	.word	0x200007a5

08009ed0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	607a      	str	r2, [r7, #4]
 8009eda:	603b      	str	r3, [r7, #0]
 8009edc:	460b      	mov	r3, r1
 8009ede:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009ee4:	f107 030b 	add.w	r3, r7, #11
 8009ee8:	2201      	movs	r2, #1
 8009eea:	4619      	mov	r1, r3
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f7ff ff7e 	bl	8009dee <_I2CWrite>
 8009ef2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009efa:	23ec      	movs	r3, #236	; 0xec
 8009efc:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009efe:	e00c      	b.n	8009f1a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7ff ff91 	bl	8009e2c <_I2CRead>
 8009f0a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009f12:	23ec      	movs	r3, #236	; 0xec
 8009f14:	75fb      	strb	r3, [r7, #23]
 8009f16:	e000      	b.n	8009f1a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8009f18:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70fb      	strb	r3, [r7, #3]
 8009f34:	4613      	mov	r3, r2
 8009f36:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009f3c:	4a0b      	ldr	r2, [pc, #44]	; (8009f6c <VL53L0X_WrByte+0x44>)
 8009f3e:	78fb      	ldrb	r3, [r7, #3]
 8009f40:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8009f42:	4a0a      	ldr	r2, [pc, #40]	; (8009f6c <VL53L0X_WrByte+0x44>)
 8009f44:	78bb      	ldrb	r3, [r7, #2]
 8009f46:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009f48:	2202      	movs	r2, #2
 8009f4a:	4908      	ldr	r1, [pc, #32]	; (8009f6c <VL53L0X_WrByte+0x44>)
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff ff4e 	bl	8009dee <_I2CWrite>
 8009f52:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009f5a:	23ec      	movs	r3, #236	; 0xec
 8009f5c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	200007a4 	.word	0x200007a4

08009f70 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009f84:	4a0e      	ldr	r2, [pc, #56]	; (8009fc0 <VL53L0X_WrWord+0x50>)
 8009f86:	78fb      	ldrb	r3, [r7, #3]
 8009f88:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8009f8a:	883b      	ldrh	r3, [r7, #0]
 8009f8c:	0a1b      	lsrs	r3, r3, #8
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	4b0b      	ldr	r3, [pc, #44]	; (8009fc0 <VL53L0X_WrWord+0x50>)
 8009f94:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8009f96:	883b      	ldrh	r3, [r7, #0]
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	4b09      	ldr	r3, [pc, #36]	; (8009fc0 <VL53L0X_WrWord+0x50>)
 8009f9c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009f9e:	2203      	movs	r2, #3
 8009fa0:	4907      	ldr	r1, [pc, #28]	; (8009fc0 <VL53L0X_WrWord+0x50>)
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7ff ff23 	bl	8009dee <_I2CWrite>
 8009fa8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009fb0:	23ec      	movs	r3, #236	; 0xec
 8009fb2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	200007a4 	.word	0x200007a4

08009fc4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	70fb      	strb	r3, [r7, #3]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70bb      	strb	r3, [r7, #2]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8009fe2:	f107 020e 	add.w	r2, r7, #14
 8009fe6:	78fb      	ldrb	r3, [r7, #3]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f81e 	bl	800a02c <VL53L0X_RdByte>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8009ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d110      	bne.n	800a01e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8009ffc:	7bba      	ldrb	r2, [r7, #14]
 8009ffe:	78bb      	ldrb	r3, [r7, #2]
 800a000:	4013      	ands	r3, r2
 800a002:	b2da      	uxtb	r2, r3
 800a004:	787b      	ldrb	r3, [r7, #1]
 800a006:	4313      	orrs	r3, r2
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800a00c:	7bba      	ldrb	r2, [r7, #14]
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff ff88 	bl	8009f28 <VL53L0X_WrByte>
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]
 800a01c:	e000      	b.n	800a020 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800a01e:	bf00      	nop
done:
    return Status;
 800a020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	460b      	mov	r3, r1
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a03a:	2300      	movs	r3, #0
 800a03c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a03e:	f107 030b 	add.w	r3, r7, #11
 800a042:	2201      	movs	r2, #1
 800a044:	4619      	mov	r1, r3
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7ff fed1 	bl	8009dee <_I2CWrite>
 800a04c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d002      	beq.n	800a05a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a054:	23ec      	movs	r3, #236	; 0xec
 800a056:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a058:	e00c      	b.n	800a074 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800a05a:	2201      	movs	r2, #1
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7ff fee4 	bl	8009e2c <_I2CRead>
 800a064:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a06c:	23ec      	movs	r3, #236	; 0xec
 800a06e:	75fb      	strb	r3, [r7, #23]
 800a070:	e000      	b.n	800a074 <VL53L0X_RdByte+0x48>
    }
done:
 800a072:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800a074:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	460b      	mov	r3, r1
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a08e:	2300      	movs	r3, #0
 800a090:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a092:	f107 030b 	add.w	r3, r7, #11
 800a096:	2201      	movs	r2, #1
 800a098:	4619      	mov	r1, r3
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7ff fea7 	bl	8009dee <_I2CWrite>
 800a0a0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a0a8:	23ec      	movs	r3, #236	; 0xec
 800a0aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a0ac:	e017      	b.n	800a0de <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	490e      	ldr	r1, [pc, #56]	; (800a0ec <VL53L0X_RdWord+0x6c>)
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f7ff feba 	bl	8009e2c <_I2CRead>
 800a0b8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a0c0:	23ec      	movs	r3, #236	; 0xec
 800a0c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a0c4:	e00b      	b.n	800a0de <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800a0c6:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <VL53L0X_RdWord+0x6c>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	4b06      	ldr	r3, [pc, #24]	; (800a0ec <VL53L0X_RdWord+0x6c>)
 800a0d2:	785b      	ldrb	r3, [r3, #1]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	4413      	add	r3, r2
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800a0de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	200007a4 	.word	0x200007a4

0800a0f0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	607a      	str	r2, [r7, #4]
 800a0fc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0fe:	2300      	movs	r3, #0
 800a100:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800a102:	f107 030b 	add.w	r3, r7, #11
 800a106:	2201      	movs	r2, #1
 800a108:	4619      	mov	r1, r3
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7ff fe6f 	bl	8009dee <_I2CWrite>
 800a110:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a118:	23ec      	movs	r3, #236	; 0xec
 800a11a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a11c:	e01b      	b.n	800a156 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800a11e:	2204      	movs	r2, #4
 800a120:	4910      	ldr	r1, [pc, #64]	; (800a164 <VL53L0X_RdDWord+0x74>)
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff fe82 	bl	8009e2c <_I2CRead>
 800a128:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a130:	23ec      	movs	r3, #236	; 0xec
 800a132:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a134:	e00f      	b.n	800a156 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800a136:	4b0b      	ldr	r3, [pc, #44]	; (800a164 <VL53L0X_RdDWord+0x74>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	061a      	lsls	r2, r3, #24
 800a13c:	4b09      	ldr	r3, [pc, #36]	; (800a164 <VL53L0X_RdDWord+0x74>)
 800a13e:	785b      	ldrb	r3, [r3, #1]
 800a140:	041b      	lsls	r3, r3, #16
 800a142:	441a      	add	r2, r3
 800a144:	4b07      	ldr	r3, [pc, #28]	; (800a164 <VL53L0X_RdDWord+0x74>)
 800a146:	789b      	ldrb	r3, [r3, #2]
 800a148:	021b      	lsls	r3, r3, #8
 800a14a:	4413      	add	r3, r2
 800a14c:	4a05      	ldr	r2, [pc, #20]	; (800a164 <VL53L0X_RdDWord+0x74>)
 800a14e:	78d2      	ldrb	r2, [r2, #3]
 800a150:	441a      	add	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800a156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	200007a4 	.word	0x200007a4

0800a168 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800a174:	2002      	movs	r0, #2
 800a176:	f7f6 fd1f 	bl	8000bb8 <HAL_Delay>
    return status;
 800a17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
	...

0800a188 <siprintf>:
 800a188:	b40e      	push	{r1, r2, r3}
 800a18a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a18e:	b500      	push	{lr}
 800a190:	b09c      	sub	sp, #112	; 0x70
 800a192:	ab1d      	add	r3, sp, #116	; 0x74
 800a194:	9002      	str	r0, [sp, #8]
 800a196:	9006      	str	r0, [sp, #24]
 800a198:	9107      	str	r1, [sp, #28]
 800a19a:	9104      	str	r1, [sp, #16]
 800a19c:	4808      	ldr	r0, [pc, #32]	; (800a1c0 <siprintf+0x38>)
 800a19e:	4909      	ldr	r1, [pc, #36]	; (800a1c4 <siprintf+0x3c>)
 800a1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a4:	9105      	str	r1, [sp, #20]
 800a1a6:	6800      	ldr	r0, [r0, #0]
 800a1a8:	a902      	add	r1, sp, #8
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	f000 f9a4 	bl	800a4f8 <_svfiprintf_r>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	9b02      	ldr	r3, [sp, #8]
 800a1b4:	701a      	strb	r2, [r3, #0]
 800a1b6:	b01c      	add	sp, #112	; 0x70
 800a1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1bc:	b003      	add	sp, #12
 800a1be:	4770      	bx	lr
 800a1c0:	2000031c 	.word	0x2000031c
 800a1c4:	ffff0208 	.word	0xffff0208

0800a1c8 <memset>:
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	4402      	add	r2, r0
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d100      	bne.n	800a1d2 <memset+0xa>
 800a1d0:	4770      	bx	lr
 800a1d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1d6:	e7f9      	b.n	800a1cc <memset+0x4>

0800a1d8 <__errno>:
 800a1d8:	4b01      	ldr	r3, [pc, #4]	; (800a1e0 <__errno+0x8>)
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	2000031c 	.word	0x2000031c

0800a1e4 <__libc_init_array>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	2600      	movs	r6, #0
 800a1e8:	4d0c      	ldr	r5, [pc, #48]	; (800a21c <__libc_init_array+0x38>)
 800a1ea:	4c0d      	ldr	r4, [pc, #52]	; (800a220 <__libc_init_array+0x3c>)
 800a1ec:	1b64      	subs	r4, r4, r5
 800a1ee:	10a4      	asrs	r4, r4, #2
 800a1f0:	42a6      	cmp	r6, r4
 800a1f2:	d109      	bne.n	800a208 <__libc_init_array+0x24>
 800a1f4:	f000 fc82 	bl	800aafc <_init>
 800a1f8:	2600      	movs	r6, #0
 800a1fa:	4d0a      	ldr	r5, [pc, #40]	; (800a224 <__libc_init_array+0x40>)
 800a1fc:	4c0a      	ldr	r4, [pc, #40]	; (800a228 <__libc_init_array+0x44>)
 800a1fe:	1b64      	subs	r4, r4, r5
 800a200:	10a4      	asrs	r4, r4, #2
 800a202:	42a6      	cmp	r6, r4
 800a204:	d105      	bne.n	800a212 <__libc_init_array+0x2e>
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	f855 3b04 	ldr.w	r3, [r5], #4
 800a20c:	4798      	blx	r3
 800a20e:	3601      	adds	r6, #1
 800a210:	e7ee      	b.n	800a1f0 <__libc_init_array+0xc>
 800a212:	f855 3b04 	ldr.w	r3, [r5], #4
 800a216:	4798      	blx	r3
 800a218:	3601      	adds	r6, #1
 800a21a:	e7f2      	b.n	800a202 <__libc_init_array+0x1e>
 800a21c:	0800ab9c 	.word	0x0800ab9c
 800a220:	0800ab9c 	.word	0x0800ab9c
 800a224:	0800ab9c 	.word	0x0800ab9c
 800a228:	0800aba0 	.word	0x0800aba0

0800a22c <__retarget_lock_acquire_recursive>:
 800a22c:	4770      	bx	lr

0800a22e <__retarget_lock_release_recursive>:
 800a22e:	4770      	bx	lr

0800a230 <strcpy>:
 800a230:	4603      	mov	r3, r0
 800a232:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a236:	f803 2b01 	strb.w	r2, [r3], #1
 800a23a:	2a00      	cmp	r2, #0
 800a23c:	d1f9      	bne.n	800a232 <strcpy+0x2>
 800a23e:	4770      	bx	lr

0800a240 <memcpy>:
 800a240:	440a      	add	r2, r1
 800a242:	4291      	cmp	r1, r2
 800a244:	f100 33ff 	add.w	r3, r0, #4294967295
 800a248:	d100      	bne.n	800a24c <memcpy+0xc>
 800a24a:	4770      	bx	lr
 800a24c:	b510      	push	{r4, lr}
 800a24e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a252:	4291      	cmp	r1, r2
 800a254:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a258:	d1f9      	bne.n	800a24e <memcpy+0xe>
 800a25a:	bd10      	pop	{r4, pc}

0800a25c <_free_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4605      	mov	r5, r0
 800a260:	2900      	cmp	r1, #0
 800a262:	d040      	beq.n	800a2e6 <_free_r+0x8a>
 800a264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a268:	1f0c      	subs	r4, r1, #4
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	bfb8      	it	lt
 800a26e:	18e4      	addlt	r4, r4, r3
 800a270:	f000 f8dc 	bl	800a42c <__malloc_lock>
 800a274:	4a1c      	ldr	r2, [pc, #112]	; (800a2e8 <_free_r+0x8c>)
 800a276:	6813      	ldr	r3, [r2, #0]
 800a278:	b933      	cbnz	r3, 800a288 <_free_r+0x2c>
 800a27a:	6063      	str	r3, [r4, #4]
 800a27c:	6014      	str	r4, [r2, #0]
 800a27e:	4628      	mov	r0, r5
 800a280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a284:	f000 b8d8 	b.w	800a438 <__malloc_unlock>
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d908      	bls.n	800a29e <_free_r+0x42>
 800a28c:	6820      	ldr	r0, [r4, #0]
 800a28e:	1821      	adds	r1, r4, r0
 800a290:	428b      	cmp	r3, r1
 800a292:	bf01      	itttt	eq
 800a294:	6819      	ldreq	r1, [r3, #0]
 800a296:	685b      	ldreq	r3, [r3, #4]
 800a298:	1809      	addeq	r1, r1, r0
 800a29a:	6021      	streq	r1, [r4, #0]
 800a29c:	e7ed      	b.n	800a27a <_free_r+0x1e>
 800a29e:	461a      	mov	r2, r3
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	b10b      	cbz	r3, 800a2a8 <_free_r+0x4c>
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d9fa      	bls.n	800a29e <_free_r+0x42>
 800a2a8:	6811      	ldr	r1, [r2, #0]
 800a2aa:	1850      	adds	r0, r2, r1
 800a2ac:	42a0      	cmp	r0, r4
 800a2ae:	d10b      	bne.n	800a2c8 <_free_r+0x6c>
 800a2b0:	6820      	ldr	r0, [r4, #0]
 800a2b2:	4401      	add	r1, r0
 800a2b4:	1850      	adds	r0, r2, r1
 800a2b6:	4283      	cmp	r3, r0
 800a2b8:	6011      	str	r1, [r2, #0]
 800a2ba:	d1e0      	bne.n	800a27e <_free_r+0x22>
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	4408      	add	r0, r1
 800a2c2:	6010      	str	r0, [r2, #0]
 800a2c4:	6053      	str	r3, [r2, #4]
 800a2c6:	e7da      	b.n	800a27e <_free_r+0x22>
 800a2c8:	d902      	bls.n	800a2d0 <_free_r+0x74>
 800a2ca:	230c      	movs	r3, #12
 800a2cc:	602b      	str	r3, [r5, #0]
 800a2ce:	e7d6      	b.n	800a27e <_free_r+0x22>
 800a2d0:	6820      	ldr	r0, [r4, #0]
 800a2d2:	1821      	adds	r1, r4, r0
 800a2d4:	428b      	cmp	r3, r1
 800a2d6:	bf01      	itttt	eq
 800a2d8:	6819      	ldreq	r1, [r3, #0]
 800a2da:	685b      	ldreq	r3, [r3, #4]
 800a2dc:	1809      	addeq	r1, r1, r0
 800a2de:	6021      	streq	r1, [r4, #0]
 800a2e0:	6063      	str	r3, [r4, #4]
 800a2e2:	6054      	str	r4, [r2, #4]
 800a2e4:	e7cb      	b.n	800a27e <_free_r+0x22>
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	20000924 	.word	0x20000924

0800a2ec <sbrk_aligned>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	4e0e      	ldr	r6, [pc, #56]	; (800a328 <sbrk_aligned+0x3c>)
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	6831      	ldr	r1, [r6, #0]
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	b911      	cbnz	r1, 800a2fe <sbrk_aligned+0x12>
 800a2f8:	f000 fbaa 	bl	800aa50 <_sbrk_r>
 800a2fc:	6030      	str	r0, [r6, #0]
 800a2fe:	4621      	mov	r1, r4
 800a300:	4628      	mov	r0, r5
 800a302:	f000 fba5 	bl	800aa50 <_sbrk_r>
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	d00a      	beq.n	800a320 <sbrk_aligned+0x34>
 800a30a:	1cc4      	adds	r4, r0, #3
 800a30c:	f024 0403 	bic.w	r4, r4, #3
 800a310:	42a0      	cmp	r0, r4
 800a312:	d007      	beq.n	800a324 <sbrk_aligned+0x38>
 800a314:	1a21      	subs	r1, r4, r0
 800a316:	4628      	mov	r0, r5
 800a318:	f000 fb9a 	bl	800aa50 <_sbrk_r>
 800a31c:	3001      	adds	r0, #1
 800a31e:	d101      	bne.n	800a324 <sbrk_aligned+0x38>
 800a320:	f04f 34ff 	mov.w	r4, #4294967295
 800a324:	4620      	mov	r0, r4
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	20000928 	.word	0x20000928

0800a32c <_malloc_r>:
 800a32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a330:	1ccd      	adds	r5, r1, #3
 800a332:	f025 0503 	bic.w	r5, r5, #3
 800a336:	3508      	adds	r5, #8
 800a338:	2d0c      	cmp	r5, #12
 800a33a:	bf38      	it	cc
 800a33c:	250c      	movcc	r5, #12
 800a33e:	2d00      	cmp	r5, #0
 800a340:	4607      	mov	r7, r0
 800a342:	db01      	blt.n	800a348 <_malloc_r+0x1c>
 800a344:	42a9      	cmp	r1, r5
 800a346:	d905      	bls.n	800a354 <_malloc_r+0x28>
 800a348:	230c      	movs	r3, #12
 800a34a:	2600      	movs	r6, #0
 800a34c:	603b      	str	r3, [r7, #0]
 800a34e:	4630      	mov	r0, r6
 800a350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a428 <_malloc_r+0xfc>
 800a358:	f000 f868 	bl	800a42c <__malloc_lock>
 800a35c:	f8d8 3000 	ldr.w	r3, [r8]
 800a360:	461c      	mov	r4, r3
 800a362:	bb5c      	cbnz	r4, 800a3bc <_malloc_r+0x90>
 800a364:	4629      	mov	r1, r5
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff ffc0 	bl	800a2ec <sbrk_aligned>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	4604      	mov	r4, r0
 800a370:	d155      	bne.n	800a41e <_malloc_r+0xf2>
 800a372:	f8d8 4000 	ldr.w	r4, [r8]
 800a376:	4626      	mov	r6, r4
 800a378:	2e00      	cmp	r6, #0
 800a37a:	d145      	bne.n	800a408 <_malloc_r+0xdc>
 800a37c:	2c00      	cmp	r4, #0
 800a37e:	d048      	beq.n	800a412 <_malloc_r+0xe6>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	4631      	mov	r1, r6
 800a384:	4638      	mov	r0, r7
 800a386:	eb04 0903 	add.w	r9, r4, r3
 800a38a:	f000 fb61 	bl	800aa50 <_sbrk_r>
 800a38e:	4581      	cmp	r9, r0
 800a390:	d13f      	bne.n	800a412 <_malloc_r+0xe6>
 800a392:	6821      	ldr	r1, [r4, #0]
 800a394:	4638      	mov	r0, r7
 800a396:	1a6d      	subs	r5, r5, r1
 800a398:	4629      	mov	r1, r5
 800a39a:	f7ff ffa7 	bl	800a2ec <sbrk_aligned>
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d037      	beq.n	800a412 <_malloc_r+0xe6>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	442b      	add	r3, r5
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d038      	beq.n	800a422 <_malloc_r+0xf6>
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	42a2      	cmp	r2, r4
 800a3b4:	d12b      	bne.n	800a40e <_malloc_r+0xe2>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	605a      	str	r2, [r3, #4]
 800a3ba:	e00f      	b.n	800a3dc <_malloc_r+0xb0>
 800a3bc:	6822      	ldr	r2, [r4, #0]
 800a3be:	1b52      	subs	r2, r2, r5
 800a3c0:	d41f      	bmi.n	800a402 <_malloc_r+0xd6>
 800a3c2:	2a0b      	cmp	r2, #11
 800a3c4:	d917      	bls.n	800a3f6 <_malloc_r+0xca>
 800a3c6:	1961      	adds	r1, r4, r5
 800a3c8:	42a3      	cmp	r3, r4
 800a3ca:	6025      	str	r5, [r4, #0]
 800a3cc:	bf18      	it	ne
 800a3ce:	6059      	strne	r1, [r3, #4]
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	bf08      	it	eq
 800a3d4:	f8c8 1000 	streq.w	r1, [r8]
 800a3d8:	5162      	str	r2, [r4, r5]
 800a3da:	604b      	str	r3, [r1, #4]
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f104 060b 	add.w	r6, r4, #11
 800a3e2:	f000 f829 	bl	800a438 <__malloc_unlock>
 800a3e6:	f026 0607 	bic.w	r6, r6, #7
 800a3ea:	1d23      	adds	r3, r4, #4
 800a3ec:	1af2      	subs	r2, r6, r3
 800a3ee:	d0ae      	beq.n	800a34e <_malloc_r+0x22>
 800a3f0:	1b9b      	subs	r3, r3, r6
 800a3f2:	50a3      	str	r3, [r4, r2]
 800a3f4:	e7ab      	b.n	800a34e <_malloc_r+0x22>
 800a3f6:	42a3      	cmp	r3, r4
 800a3f8:	6862      	ldr	r2, [r4, #4]
 800a3fa:	d1dd      	bne.n	800a3b8 <_malloc_r+0x8c>
 800a3fc:	f8c8 2000 	str.w	r2, [r8]
 800a400:	e7ec      	b.n	800a3dc <_malloc_r+0xb0>
 800a402:	4623      	mov	r3, r4
 800a404:	6864      	ldr	r4, [r4, #4]
 800a406:	e7ac      	b.n	800a362 <_malloc_r+0x36>
 800a408:	4634      	mov	r4, r6
 800a40a:	6876      	ldr	r6, [r6, #4]
 800a40c:	e7b4      	b.n	800a378 <_malloc_r+0x4c>
 800a40e:	4613      	mov	r3, r2
 800a410:	e7cc      	b.n	800a3ac <_malloc_r+0x80>
 800a412:	230c      	movs	r3, #12
 800a414:	4638      	mov	r0, r7
 800a416:	603b      	str	r3, [r7, #0]
 800a418:	f000 f80e 	bl	800a438 <__malloc_unlock>
 800a41c:	e797      	b.n	800a34e <_malloc_r+0x22>
 800a41e:	6025      	str	r5, [r4, #0]
 800a420:	e7dc      	b.n	800a3dc <_malloc_r+0xb0>
 800a422:	605b      	str	r3, [r3, #4]
 800a424:	deff      	udf	#255	; 0xff
 800a426:	bf00      	nop
 800a428:	20000924 	.word	0x20000924

0800a42c <__malloc_lock>:
 800a42c:	4801      	ldr	r0, [pc, #4]	; (800a434 <__malloc_lock+0x8>)
 800a42e:	f7ff befd 	b.w	800a22c <__retarget_lock_acquire_recursive>
 800a432:	bf00      	nop
 800a434:	20000920 	.word	0x20000920

0800a438 <__malloc_unlock>:
 800a438:	4801      	ldr	r0, [pc, #4]	; (800a440 <__malloc_unlock+0x8>)
 800a43a:	f7ff bef8 	b.w	800a22e <__retarget_lock_release_recursive>
 800a43e:	bf00      	nop
 800a440:	20000920 	.word	0x20000920

0800a444 <__ssputs_r>:
 800a444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a448:	461f      	mov	r7, r3
 800a44a:	688e      	ldr	r6, [r1, #8]
 800a44c:	4682      	mov	sl, r0
 800a44e:	42be      	cmp	r6, r7
 800a450:	460c      	mov	r4, r1
 800a452:	4690      	mov	r8, r2
 800a454:	680b      	ldr	r3, [r1, #0]
 800a456:	d82c      	bhi.n	800a4b2 <__ssputs_r+0x6e>
 800a458:	898a      	ldrh	r2, [r1, #12]
 800a45a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a45e:	d026      	beq.n	800a4ae <__ssputs_r+0x6a>
 800a460:	6965      	ldr	r5, [r4, #20]
 800a462:	6909      	ldr	r1, [r1, #16]
 800a464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a468:	eba3 0901 	sub.w	r9, r3, r1
 800a46c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a470:	1c7b      	adds	r3, r7, #1
 800a472:	444b      	add	r3, r9
 800a474:	106d      	asrs	r5, r5, #1
 800a476:	429d      	cmp	r5, r3
 800a478:	bf38      	it	cc
 800a47a:	461d      	movcc	r5, r3
 800a47c:	0553      	lsls	r3, r2, #21
 800a47e:	d527      	bpl.n	800a4d0 <__ssputs_r+0x8c>
 800a480:	4629      	mov	r1, r5
 800a482:	f7ff ff53 	bl	800a32c <_malloc_r>
 800a486:	4606      	mov	r6, r0
 800a488:	b360      	cbz	r0, 800a4e4 <__ssputs_r+0xa0>
 800a48a:	464a      	mov	r2, r9
 800a48c:	6921      	ldr	r1, [r4, #16]
 800a48e:	f7ff fed7 	bl	800a240 <memcpy>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a49c:	81a3      	strh	r3, [r4, #12]
 800a49e:	6126      	str	r6, [r4, #16]
 800a4a0:	444e      	add	r6, r9
 800a4a2:	6026      	str	r6, [r4, #0]
 800a4a4:	463e      	mov	r6, r7
 800a4a6:	6165      	str	r5, [r4, #20]
 800a4a8:	eba5 0509 	sub.w	r5, r5, r9
 800a4ac:	60a5      	str	r5, [r4, #8]
 800a4ae:	42be      	cmp	r6, r7
 800a4b0:	d900      	bls.n	800a4b4 <__ssputs_r+0x70>
 800a4b2:	463e      	mov	r6, r7
 800a4b4:	4632      	mov	r2, r6
 800a4b6:	4641      	mov	r1, r8
 800a4b8:	6820      	ldr	r0, [r4, #0]
 800a4ba:	f000 faaf 	bl	800aa1c <memmove>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	68a3      	ldr	r3, [r4, #8]
 800a4c2:	1b9b      	subs	r3, r3, r6
 800a4c4:	60a3      	str	r3, [r4, #8]
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	4433      	add	r3, r6
 800a4ca:	6023      	str	r3, [r4, #0]
 800a4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d0:	462a      	mov	r2, r5
 800a4d2:	f000 fadb 	bl	800aa8c <_realloc_r>
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d1e0      	bne.n	800a49e <__ssputs_r+0x5a>
 800a4dc:	4650      	mov	r0, sl
 800a4de:	6921      	ldr	r1, [r4, #16]
 800a4e0:	f7ff febc 	bl	800a25c <_free_r>
 800a4e4:	230c      	movs	r3, #12
 800a4e6:	f8ca 3000 	str.w	r3, [sl]
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4f4:	81a3      	strh	r3, [r4, #12]
 800a4f6:	e7e9      	b.n	800a4cc <__ssputs_r+0x88>

0800a4f8 <_svfiprintf_r>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	4698      	mov	r8, r3
 800a4fe:	898b      	ldrh	r3, [r1, #12]
 800a500:	4607      	mov	r7, r0
 800a502:	061b      	lsls	r3, r3, #24
 800a504:	460d      	mov	r5, r1
 800a506:	4614      	mov	r4, r2
 800a508:	b09d      	sub	sp, #116	; 0x74
 800a50a:	d50e      	bpl.n	800a52a <_svfiprintf_r+0x32>
 800a50c:	690b      	ldr	r3, [r1, #16]
 800a50e:	b963      	cbnz	r3, 800a52a <_svfiprintf_r+0x32>
 800a510:	2140      	movs	r1, #64	; 0x40
 800a512:	f7ff ff0b 	bl	800a32c <_malloc_r>
 800a516:	6028      	str	r0, [r5, #0]
 800a518:	6128      	str	r0, [r5, #16]
 800a51a:	b920      	cbnz	r0, 800a526 <_svfiprintf_r+0x2e>
 800a51c:	230c      	movs	r3, #12
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	e0d0      	b.n	800a6c8 <_svfiprintf_r+0x1d0>
 800a526:	2340      	movs	r3, #64	; 0x40
 800a528:	616b      	str	r3, [r5, #20]
 800a52a:	2300      	movs	r3, #0
 800a52c:	9309      	str	r3, [sp, #36]	; 0x24
 800a52e:	2320      	movs	r3, #32
 800a530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a534:	2330      	movs	r3, #48	; 0x30
 800a536:	f04f 0901 	mov.w	r9, #1
 800a53a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a53e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a6e0 <_svfiprintf_r+0x1e8>
 800a542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a546:	4623      	mov	r3, r4
 800a548:	469a      	mov	sl, r3
 800a54a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a54e:	b10a      	cbz	r2, 800a554 <_svfiprintf_r+0x5c>
 800a550:	2a25      	cmp	r2, #37	; 0x25
 800a552:	d1f9      	bne.n	800a548 <_svfiprintf_r+0x50>
 800a554:	ebba 0b04 	subs.w	fp, sl, r4
 800a558:	d00b      	beq.n	800a572 <_svfiprintf_r+0x7a>
 800a55a:	465b      	mov	r3, fp
 800a55c:	4622      	mov	r2, r4
 800a55e:	4629      	mov	r1, r5
 800a560:	4638      	mov	r0, r7
 800a562:	f7ff ff6f 	bl	800a444 <__ssputs_r>
 800a566:	3001      	adds	r0, #1
 800a568:	f000 80a9 	beq.w	800a6be <_svfiprintf_r+0x1c6>
 800a56c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a56e:	445a      	add	r2, fp
 800a570:	9209      	str	r2, [sp, #36]	; 0x24
 800a572:	f89a 3000 	ldrb.w	r3, [sl]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 80a1 	beq.w	800a6be <_svfiprintf_r+0x1c6>
 800a57c:	2300      	movs	r3, #0
 800a57e:	f04f 32ff 	mov.w	r2, #4294967295
 800a582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a586:	f10a 0a01 	add.w	sl, sl, #1
 800a58a:	9304      	str	r3, [sp, #16]
 800a58c:	9307      	str	r3, [sp, #28]
 800a58e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a592:	931a      	str	r3, [sp, #104]	; 0x68
 800a594:	4654      	mov	r4, sl
 800a596:	2205      	movs	r2, #5
 800a598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59c:	4850      	ldr	r0, [pc, #320]	; (800a6e0 <_svfiprintf_r+0x1e8>)
 800a59e:	f000 fa67 	bl	800aa70 <memchr>
 800a5a2:	9a04      	ldr	r2, [sp, #16]
 800a5a4:	b9d8      	cbnz	r0, 800a5de <_svfiprintf_r+0xe6>
 800a5a6:	06d0      	lsls	r0, r2, #27
 800a5a8:	bf44      	itt	mi
 800a5aa:	2320      	movmi	r3, #32
 800a5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5b0:	0711      	lsls	r1, r2, #28
 800a5b2:	bf44      	itt	mi
 800a5b4:	232b      	movmi	r3, #43	; 0x2b
 800a5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a5be:	2b2a      	cmp	r3, #42	; 0x2a
 800a5c0:	d015      	beq.n	800a5ee <_svfiprintf_r+0xf6>
 800a5c2:	4654      	mov	r4, sl
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	f04f 0c0a 	mov.w	ip, #10
 800a5ca:	9a07      	ldr	r2, [sp, #28]
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5d2:	3b30      	subs	r3, #48	; 0x30
 800a5d4:	2b09      	cmp	r3, #9
 800a5d6:	d94d      	bls.n	800a674 <_svfiprintf_r+0x17c>
 800a5d8:	b1b0      	cbz	r0, 800a608 <_svfiprintf_r+0x110>
 800a5da:	9207      	str	r2, [sp, #28]
 800a5dc:	e014      	b.n	800a608 <_svfiprintf_r+0x110>
 800a5de:	eba0 0308 	sub.w	r3, r0, r8
 800a5e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	46a2      	mov	sl, r4
 800a5ea:	9304      	str	r3, [sp, #16]
 800a5ec:	e7d2      	b.n	800a594 <_svfiprintf_r+0x9c>
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	1d19      	adds	r1, r3, #4
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	9103      	str	r1, [sp, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bfbb      	ittet	lt
 800a5fa:	425b      	neglt	r3, r3
 800a5fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a600:	9307      	strge	r3, [sp, #28]
 800a602:	9307      	strlt	r3, [sp, #28]
 800a604:	bfb8      	it	lt
 800a606:	9204      	strlt	r2, [sp, #16]
 800a608:	7823      	ldrb	r3, [r4, #0]
 800a60a:	2b2e      	cmp	r3, #46	; 0x2e
 800a60c:	d10c      	bne.n	800a628 <_svfiprintf_r+0x130>
 800a60e:	7863      	ldrb	r3, [r4, #1]
 800a610:	2b2a      	cmp	r3, #42	; 0x2a
 800a612:	d134      	bne.n	800a67e <_svfiprintf_r+0x186>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	3402      	adds	r4, #2
 800a618:	1d1a      	adds	r2, r3, #4
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	9203      	str	r2, [sp, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	bfb8      	it	lt
 800a622:	f04f 33ff 	movlt.w	r3, #4294967295
 800a626:	9305      	str	r3, [sp, #20]
 800a628:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a6e4 <_svfiprintf_r+0x1ec>
 800a62c:	2203      	movs	r2, #3
 800a62e:	4650      	mov	r0, sl
 800a630:	7821      	ldrb	r1, [r4, #0]
 800a632:	f000 fa1d 	bl	800aa70 <memchr>
 800a636:	b138      	cbz	r0, 800a648 <_svfiprintf_r+0x150>
 800a638:	2240      	movs	r2, #64	; 0x40
 800a63a:	9b04      	ldr	r3, [sp, #16]
 800a63c:	eba0 000a 	sub.w	r0, r0, sl
 800a640:	4082      	lsls	r2, r0
 800a642:	4313      	orrs	r3, r2
 800a644:	3401      	adds	r4, #1
 800a646:	9304      	str	r3, [sp, #16]
 800a648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a64c:	2206      	movs	r2, #6
 800a64e:	4826      	ldr	r0, [pc, #152]	; (800a6e8 <_svfiprintf_r+0x1f0>)
 800a650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a654:	f000 fa0c 	bl	800aa70 <memchr>
 800a658:	2800      	cmp	r0, #0
 800a65a:	d038      	beq.n	800a6ce <_svfiprintf_r+0x1d6>
 800a65c:	4b23      	ldr	r3, [pc, #140]	; (800a6ec <_svfiprintf_r+0x1f4>)
 800a65e:	bb1b      	cbnz	r3, 800a6a8 <_svfiprintf_r+0x1b0>
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	3307      	adds	r3, #7
 800a664:	f023 0307 	bic.w	r3, r3, #7
 800a668:	3308      	adds	r3, #8
 800a66a:	9303      	str	r3, [sp, #12]
 800a66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a66e:	4433      	add	r3, r6
 800a670:	9309      	str	r3, [sp, #36]	; 0x24
 800a672:	e768      	b.n	800a546 <_svfiprintf_r+0x4e>
 800a674:	460c      	mov	r4, r1
 800a676:	2001      	movs	r0, #1
 800a678:	fb0c 3202 	mla	r2, ip, r2, r3
 800a67c:	e7a6      	b.n	800a5cc <_svfiprintf_r+0xd4>
 800a67e:	2300      	movs	r3, #0
 800a680:	f04f 0c0a 	mov.w	ip, #10
 800a684:	4619      	mov	r1, r3
 800a686:	3401      	adds	r4, #1
 800a688:	9305      	str	r3, [sp, #20]
 800a68a:	4620      	mov	r0, r4
 800a68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a690:	3a30      	subs	r2, #48	; 0x30
 800a692:	2a09      	cmp	r2, #9
 800a694:	d903      	bls.n	800a69e <_svfiprintf_r+0x1a6>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0c6      	beq.n	800a628 <_svfiprintf_r+0x130>
 800a69a:	9105      	str	r1, [sp, #20]
 800a69c:	e7c4      	b.n	800a628 <_svfiprintf_r+0x130>
 800a69e:	4604      	mov	r4, r0
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6a6:	e7f0      	b.n	800a68a <_svfiprintf_r+0x192>
 800a6a8:	ab03      	add	r3, sp, #12
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <_svfiprintf_r+0x1f8>)
 800a6b2:	a904      	add	r1, sp, #16
 800a6b4:	f3af 8000 	nop.w
 800a6b8:	1c42      	adds	r2, r0, #1
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	d1d6      	bne.n	800a66c <_svfiprintf_r+0x174>
 800a6be:	89ab      	ldrh	r3, [r5, #12]
 800a6c0:	065b      	lsls	r3, r3, #25
 800a6c2:	f53f af2d 	bmi.w	800a520 <_svfiprintf_r+0x28>
 800a6c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6c8:	b01d      	add	sp, #116	; 0x74
 800a6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ce:	ab03      	add	r3, sp, #12
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	462a      	mov	r2, r5
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <_svfiprintf_r+0x1f8>)
 800a6d8:	a904      	add	r1, sp, #16
 800a6da:	f000 f87d 	bl	800a7d8 <_printf_i>
 800a6de:	e7eb      	b.n	800a6b8 <_svfiprintf_r+0x1c0>
 800a6e0:	0800ab66 	.word	0x0800ab66
 800a6e4:	0800ab6c 	.word	0x0800ab6c
 800a6e8:	0800ab70 	.word	0x0800ab70
 800a6ec:	00000000 	.word	0x00000000
 800a6f0:	0800a445 	.word	0x0800a445

0800a6f4 <_printf_common>:
 800a6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f8:	4616      	mov	r6, r2
 800a6fa:	4699      	mov	r9, r3
 800a6fc:	688a      	ldr	r2, [r1, #8]
 800a6fe:	690b      	ldr	r3, [r1, #16]
 800a700:	4607      	mov	r7, r0
 800a702:	4293      	cmp	r3, r2
 800a704:	bfb8      	it	lt
 800a706:	4613      	movlt	r3, r2
 800a708:	6033      	str	r3, [r6, #0]
 800a70a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a70e:	460c      	mov	r4, r1
 800a710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a714:	b10a      	cbz	r2, 800a71a <_printf_common+0x26>
 800a716:	3301      	adds	r3, #1
 800a718:	6033      	str	r3, [r6, #0]
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	0699      	lsls	r1, r3, #26
 800a71e:	bf42      	ittt	mi
 800a720:	6833      	ldrmi	r3, [r6, #0]
 800a722:	3302      	addmi	r3, #2
 800a724:	6033      	strmi	r3, [r6, #0]
 800a726:	6825      	ldr	r5, [r4, #0]
 800a728:	f015 0506 	ands.w	r5, r5, #6
 800a72c:	d106      	bne.n	800a73c <_printf_common+0x48>
 800a72e:	f104 0a19 	add.w	sl, r4, #25
 800a732:	68e3      	ldr	r3, [r4, #12]
 800a734:	6832      	ldr	r2, [r6, #0]
 800a736:	1a9b      	subs	r3, r3, r2
 800a738:	42ab      	cmp	r3, r5
 800a73a:	dc2b      	bgt.n	800a794 <_printf_common+0xa0>
 800a73c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a740:	1e13      	subs	r3, r2, #0
 800a742:	6822      	ldr	r2, [r4, #0]
 800a744:	bf18      	it	ne
 800a746:	2301      	movne	r3, #1
 800a748:	0692      	lsls	r2, r2, #26
 800a74a:	d430      	bmi.n	800a7ae <_printf_common+0xba>
 800a74c:	4649      	mov	r1, r9
 800a74e:	4638      	mov	r0, r7
 800a750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a754:	47c0      	blx	r8
 800a756:	3001      	adds	r0, #1
 800a758:	d023      	beq.n	800a7a2 <_printf_common+0xae>
 800a75a:	6823      	ldr	r3, [r4, #0]
 800a75c:	6922      	ldr	r2, [r4, #16]
 800a75e:	f003 0306 	and.w	r3, r3, #6
 800a762:	2b04      	cmp	r3, #4
 800a764:	bf14      	ite	ne
 800a766:	2500      	movne	r5, #0
 800a768:	6833      	ldreq	r3, [r6, #0]
 800a76a:	f04f 0600 	mov.w	r6, #0
 800a76e:	bf08      	it	eq
 800a770:	68e5      	ldreq	r5, [r4, #12]
 800a772:	f104 041a 	add.w	r4, r4, #26
 800a776:	bf08      	it	eq
 800a778:	1aed      	subeq	r5, r5, r3
 800a77a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a77e:	bf08      	it	eq
 800a780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a784:	4293      	cmp	r3, r2
 800a786:	bfc4      	itt	gt
 800a788:	1a9b      	subgt	r3, r3, r2
 800a78a:	18ed      	addgt	r5, r5, r3
 800a78c:	42b5      	cmp	r5, r6
 800a78e:	d11a      	bne.n	800a7c6 <_printf_common+0xd2>
 800a790:	2000      	movs	r0, #0
 800a792:	e008      	b.n	800a7a6 <_printf_common+0xb2>
 800a794:	2301      	movs	r3, #1
 800a796:	4652      	mov	r2, sl
 800a798:	4649      	mov	r1, r9
 800a79a:	4638      	mov	r0, r7
 800a79c:	47c0      	blx	r8
 800a79e:	3001      	adds	r0, #1
 800a7a0:	d103      	bne.n	800a7aa <_printf_common+0xb6>
 800a7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7aa:	3501      	adds	r5, #1
 800a7ac:	e7c1      	b.n	800a732 <_printf_common+0x3e>
 800a7ae:	2030      	movs	r0, #48	; 0x30
 800a7b0:	18e1      	adds	r1, r4, r3
 800a7b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7bc:	4422      	add	r2, r4
 800a7be:	3302      	adds	r3, #2
 800a7c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7c4:	e7c2      	b.n	800a74c <_printf_common+0x58>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	4638      	mov	r0, r7
 800a7ce:	47c0      	blx	r8
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	d0e6      	beq.n	800a7a2 <_printf_common+0xae>
 800a7d4:	3601      	adds	r6, #1
 800a7d6:	e7d9      	b.n	800a78c <_printf_common+0x98>

0800a7d8 <_printf_i>:
 800a7d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7dc:	7e0f      	ldrb	r7, [r1, #24]
 800a7de:	4691      	mov	r9, r2
 800a7e0:	2f78      	cmp	r7, #120	; 0x78
 800a7e2:	4680      	mov	r8, r0
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	469a      	mov	sl, r3
 800a7e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7ee:	d807      	bhi.n	800a800 <_printf_i+0x28>
 800a7f0:	2f62      	cmp	r7, #98	; 0x62
 800a7f2:	d80a      	bhi.n	800a80a <_printf_i+0x32>
 800a7f4:	2f00      	cmp	r7, #0
 800a7f6:	f000 80d5 	beq.w	800a9a4 <_printf_i+0x1cc>
 800a7fa:	2f58      	cmp	r7, #88	; 0x58
 800a7fc:	f000 80c1 	beq.w	800a982 <_printf_i+0x1aa>
 800a800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a808:	e03a      	b.n	800a880 <_printf_i+0xa8>
 800a80a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a80e:	2b15      	cmp	r3, #21
 800a810:	d8f6      	bhi.n	800a800 <_printf_i+0x28>
 800a812:	a101      	add	r1, pc, #4	; (adr r1, 800a818 <_printf_i+0x40>)
 800a814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a818:	0800a871 	.word	0x0800a871
 800a81c:	0800a885 	.word	0x0800a885
 800a820:	0800a801 	.word	0x0800a801
 800a824:	0800a801 	.word	0x0800a801
 800a828:	0800a801 	.word	0x0800a801
 800a82c:	0800a801 	.word	0x0800a801
 800a830:	0800a885 	.word	0x0800a885
 800a834:	0800a801 	.word	0x0800a801
 800a838:	0800a801 	.word	0x0800a801
 800a83c:	0800a801 	.word	0x0800a801
 800a840:	0800a801 	.word	0x0800a801
 800a844:	0800a98b 	.word	0x0800a98b
 800a848:	0800a8b1 	.word	0x0800a8b1
 800a84c:	0800a945 	.word	0x0800a945
 800a850:	0800a801 	.word	0x0800a801
 800a854:	0800a801 	.word	0x0800a801
 800a858:	0800a9ad 	.word	0x0800a9ad
 800a85c:	0800a801 	.word	0x0800a801
 800a860:	0800a8b1 	.word	0x0800a8b1
 800a864:	0800a801 	.word	0x0800a801
 800a868:	0800a801 	.word	0x0800a801
 800a86c:	0800a94d 	.word	0x0800a94d
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	1d1a      	adds	r2, r3, #4
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	602a      	str	r2, [r5, #0]
 800a878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a87c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a880:	2301      	movs	r3, #1
 800a882:	e0a0      	b.n	800a9c6 <_printf_i+0x1ee>
 800a884:	6820      	ldr	r0, [r4, #0]
 800a886:	682b      	ldr	r3, [r5, #0]
 800a888:	0607      	lsls	r7, r0, #24
 800a88a:	f103 0104 	add.w	r1, r3, #4
 800a88e:	6029      	str	r1, [r5, #0]
 800a890:	d501      	bpl.n	800a896 <_printf_i+0xbe>
 800a892:	681e      	ldr	r6, [r3, #0]
 800a894:	e003      	b.n	800a89e <_printf_i+0xc6>
 800a896:	0646      	lsls	r6, r0, #25
 800a898:	d5fb      	bpl.n	800a892 <_printf_i+0xba>
 800a89a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	da03      	bge.n	800a8aa <_printf_i+0xd2>
 800a8a2:	232d      	movs	r3, #45	; 0x2d
 800a8a4:	4276      	negs	r6, r6
 800a8a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8aa:	230a      	movs	r3, #10
 800a8ac:	4859      	ldr	r0, [pc, #356]	; (800aa14 <_printf_i+0x23c>)
 800a8ae:	e012      	b.n	800a8d6 <_printf_i+0xfe>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	6820      	ldr	r0, [r4, #0]
 800a8b4:	1d19      	adds	r1, r3, #4
 800a8b6:	6029      	str	r1, [r5, #0]
 800a8b8:	0605      	lsls	r5, r0, #24
 800a8ba:	d501      	bpl.n	800a8c0 <_printf_i+0xe8>
 800a8bc:	681e      	ldr	r6, [r3, #0]
 800a8be:	e002      	b.n	800a8c6 <_printf_i+0xee>
 800a8c0:	0641      	lsls	r1, r0, #25
 800a8c2:	d5fb      	bpl.n	800a8bc <_printf_i+0xe4>
 800a8c4:	881e      	ldrh	r6, [r3, #0]
 800a8c6:	2f6f      	cmp	r7, #111	; 0x6f
 800a8c8:	bf0c      	ite	eq
 800a8ca:	2308      	moveq	r3, #8
 800a8cc:	230a      	movne	r3, #10
 800a8ce:	4851      	ldr	r0, [pc, #324]	; (800aa14 <_printf_i+0x23c>)
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8d6:	6865      	ldr	r5, [r4, #4]
 800a8d8:	2d00      	cmp	r5, #0
 800a8da:	bfa8      	it	ge
 800a8dc:	6821      	ldrge	r1, [r4, #0]
 800a8de:	60a5      	str	r5, [r4, #8]
 800a8e0:	bfa4      	itt	ge
 800a8e2:	f021 0104 	bicge.w	r1, r1, #4
 800a8e6:	6021      	strge	r1, [r4, #0]
 800a8e8:	b90e      	cbnz	r6, 800a8ee <_printf_i+0x116>
 800a8ea:	2d00      	cmp	r5, #0
 800a8ec:	d04b      	beq.n	800a986 <_printf_i+0x1ae>
 800a8ee:	4615      	mov	r5, r2
 800a8f0:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8f4:	fb03 6711 	mls	r7, r3, r1, r6
 800a8f8:	5dc7      	ldrb	r7, [r0, r7]
 800a8fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8fe:	4637      	mov	r7, r6
 800a900:	42bb      	cmp	r3, r7
 800a902:	460e      	mov	r6, r1
 800a904:	d9f4      	bls.n	800a8f0 <_printf_i+0x118>
 800a906:	2b08      	cmp	r3, #8
 800a908:	d10b      	bne.n	800a922 <_printf_i+0x14a>
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	07de      	lsls	r6, r3, #31
 800a90e:	d508      	bpl.n	800a922 <_printf_i+0x14a>
 800a910:	6923      	ldr	r3, [r4, #16]
 800a912:	6861      	ldr	r1, [r4, #4]
 800a914:	4299      	cmp	r1, r3
 800a916:	bfde      	ittt	le
 800a918:	2330      	movle	r3, #48	; 0x30
 800a91a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a91e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a922:	1b52      	subs	r2, r2, r5
 800a924:	6122      	str	r2, [r4, #16]
 800a926:	464b      	mov	r3, r9
 800a928:	4621      	mov	r1, r4
 800a92a:	4640      	mov	r0, r8
 800a92c:	f8cd a000 	str.w	sl, [sp]
 800a930:	aa03      	add	r2, sp, #12
 800a932:	f7ff fedf 	bl	800a6f4 <_printf_common>
 800a936:	3001      	adds	r0, #1
 800a938:	d14a      	bne.n	800a9d0 <_printf_i+0x1f8>
 800a93a:	f04f 30ff 	mov.w	r0, #4294967295
 800a93e:	b004      	add	sp, #16
 800a940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	f043 0320 	orr.w	r3, r3, #32
 800a94a:	6023      	str	r3, [r4, #0]
 800a94c:	2778      	movs	r7, #120	; 0x78
 800a94e:	4832      	ldr	r0, [pc, #200]	; (800aa18 <_printf_i+0x240>)
 800a950:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	6829      	ldr	r1, [r5, #0]
 800a958:	061f      	lsls	r7, r3, #24
 800a95a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a95e:	d402      	bmi.n	800a966 <_printf_i+0x18e>
 800a960:	065f      	lsls	r7, r3, #25
 800a962:	bf48      	it	mi
 800a964:	b2b6      	uxthmi	r6, r6
 800a966:	07df      	lsls	r7, r3, #31
 800a968:	bf48      	it	mi
 800a96a:	f043 0320 	orrmi.w	r3, r3, #32
 800a96e:	6029      	str	r1, [r5, #0]
 800a970:	bf48      	it	mi
 800a972:	6023      	strmi	r3, [r4, #0]
 800a974:	b91e      	cbnz	r6, 800a97e <_printf_i+0x1a6>
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	f023 0320 	bic.w	r3, r3, #32
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	2310      	movs	r3, #16
 800a980:	e7a6      	b.n	800a8d0 <_printf_i+0xf8>
 800a982:	4824      	ldr	r0, [pc, #144]	; (800aa14 <_printf_i+0x23c>)
 800a984:	e7e4      	b.n	800a950 <_printf_i+0x178>
 800a986:	4615      	mov	r5, r2
 800a988:	e7bd      	b.n	800a906 <_printf_i+0x12e>
 800a98a:	682b      	ldr	r3, [r5, #0]
 800a98c:	6826      	ldr	r6, [r4, #0]
 800a98e:	1d18      	adds	r0, r3, #4
 800a990:	6961      	ldr	r1, [r4, #20]
 800a992:	6028      	str	r0, [r5, #0]
 800a994:	0635      	lsls	r5, r6, #24
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	d501      	bpl.n	800a99e <_printf_i+0x1c6>
 800a99a:	6019      	str	r1, [r3, #0]
 800a99c:	e002      	b.n	800a9a4 <_printf_i+0x1cc>
 800a99e:	0670      	lsls	r0, r6, #25
 800a9a0:	d5fb      	bpl.n	800a99a <_printf_i+0x1c2>
 800a9a2:	8019      	strh	r1, [r3, #0]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4615      	mov	r5, r2
 800a9a8:	6123      	str	r3, [r4, #16]
 800a9aa:	e7bc      	b.n	800a926 <_printf_i+0x14e>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	1d1a      	adds	r2, r3, #4
 800a9b2:	602a      	str	r2, [r5, #0]
 800a9b4:	681d      	ldr	r5, [r3, #0]
 800a9b6:	6862      	ldr	r2, [r4, #4]
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f000 f859 	bl	800aa70 <memchr>
 800a9be:	b108      	cbz	r0, 800a9c4 <_printf_i+0x1ec>
 800a9c0:	1b40      	subs	r0, r0, r5
 800a9c2:	6060      	str	r0, [r4, #4]
 800a9c4:	6863      	ldr	r3, [r4, #4]
 800a9c6:	6123      	str	r3, [r4, #16]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ce:	e7aa      	b.n	800a926 <_printf_i+0x14e>
 800a9d0:	462a      	mov	r2, r5
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	4640      	mov	r0, r8
 800a9d6:	6923      	ldr	r3, [r4, #16]
 800a9d8:	47d0      	blx	sl
 800a9da:	3001      	adds	r0, #1
 800a9dc:	d0ad      	beq.n	800a93a <_printf_i+0x162>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	079b      	lsls	r3, r3, #30
 800a9e2:	d413      	bmi.n	800aa0c <_printf_i+0x234>
 800a9e4:	68e0      	ldr	r0, [r4, #12]
 800a9e6:	9b03      	ldr	r3, [sp, #12]
 800a9e8:	4298      	cmp	r0, r3
 800a9ea:	bfb8      	it	lt
 800a9ec:	4618      	movlt	r0, r3
 800a9ee:	e7a6      	b.n	800a93e <_printf_i+0x166>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4632      	mov	r2, r6
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	4640      	mov	r0, r8
 800a9f8:	47d0      	blx	sl
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d09d      	beq.n	800a93a <_printf_i+0x162>
 800a9fe:	3501      	adds	r5, #1
 800aa00:	68e3      	ldr	r3, [r4, #12]
 800aa02:	9903      	ldr	r1, [sp, #12]
 800aa04:	1a5b      	subs	r3, r3, r1
 800aa06:	42ab      	cmp	r3, r5
 800aa08:	dcf2      	bgt.n	800a9f0 <_printf_i+0x218>
 800aa0a:	e7eb      	b.n	800a9e4 <_printf_i+0x20c>
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	f104 0619 	add.w	r6, r4, #25
 800aa12:	e7f5      	b.n	800aa00 <_printf_i+0x228>
 800aa14:	0800ab77 	.word	0x0800ab77
 800aa18:	0800ab88 	.word	0x0800ab88

0800aa1c <memmove>:
 800aa1c:	4288      	cmp	r0, r1
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	eb01 0402 	add.w	r4, r1, r2
 800aa24:	d902      	bls.n	800aa2c <memmove+0x10>
 800aa26:	4284      	cmp	r4, r0
 800aa28:	4623      	mov	r3, r4
 800aa2a:	d807      	bhi.n	800aa3c <memmove+0x20>
 800aa2c:	1e43      	subs	r3, r0, #1
 800aa2e:	42a1      	cmp	r1, r4
 800aa30:	d008      	beq.n	800aa44 <memmove+0x28>
 800aa32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa3a:	e7f8      	b.n	800aa2e <memmove+0x12>
 800aa3c:	4601      	mov	r1, r0
 800aa3e:	4402      	add	r2, r0
 800aa40:	428a      	cmp	r2, r1
 800aa42:	d100      	bne.n	800aa46 <memmove+0x2a>
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa4e:	e7f7      	b.n	800aa40 <memmove+0x24>

0800aa50 <_sbrk_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	2300      	movs	r3, #0
 800aa54:	4d05      	ldr	r5, [pc, #20]	; (800aa6c <_sbrk_r+0x1c>)
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f5 ffe8 	bl	8000a30 <_sbrk>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_sbrk_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_sbrk_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	2000091c 	.word	0x2000091c

0800aa70 <memchr>:
 800aa70:	4603      	mov	r3, r0
 800aa72:	b510      	push	{r4, lr}
 800aa74:	b2c9      	uxtb	r1, r1
 800aa76:	4402      	add	r2, r0
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	d101      	bne.n	800aa82 <memchr+0x12>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e003      	b.n	800aa8a <memchr+0x1a>
 800aa82:	7804      	ldrb	r4, [r0, #0]
 800aa84:	3301      	adds	r3, #1
 800aa86:	428c      	cmp	r4, r1
 800aa88:	d1f6      	bne.n	800aa78 <memchr+0x8>
 800aa8a:	bd10      	pop	{r4, pc}

0800aa8c <_realloc_r>:
 800aa8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa90:	4680      	mov	r8, r0
 800aa92:	4614      	mov	r4, r2
 800aa94:	460e      	mov	r6, r1
 800aa96:	b921      	cbnz	r1, 800aaa2 <_realloc_r+0x16>
 800aa98:	4611      	mov	r1, r2
 800aa9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9e:	f7ff bc45 	b.w	800a32c <_malloc_r>
 800aaa2:	b92a      	cbnz	r2, 800aab0 <_realloc_r+0x24>
 800aaa4:	f7ff fbda 	bl	800a25c <_free_r>
 800aaa8:	4625      	mov	r5, r4
 800aaaa:	4628      	mov	r0, r5
 800aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab0:	f000 f81b 	bl	800aaea <_malloc_usable_size_r>
 800aab4:	4284      	cmp	r4, r0
 800aab6:	4607      	mov	r7, r0
 800aab8:	d802      	bhi.n	800aac0 <_realloc_r+0x34>
 800aaba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aabe:	d812      	bhi.n	800aae6 <_realloc_r+0x5a>
 800aac0:	4621      	mov	r1, r4
 800aac2:	4640      	mov	r0, r8
 800aac4:	f7ff fc32 	bl	800a32c <_malloc_r>
 800aac8:	4605      	mov	r5, r0
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d0ed      	beq.n	800aaaa <_realloc_r+0x1e>
 800aace:	42bc      	cmp	r4, r7
 800aad0:	4622      	mov	r2, r4
 800aad2:	4631      	mov	r1, r6
 800aad4:	bf28      	it	cs
 800aad6:	463a      	movcs	r2, r7
 800aad8:	f7ff fbb2 	bl	800a240 <memcpy>
 800aadc:	4631      	mov	r1, r6
 800aade:	4640      	mov	r0, r8
 800aae0:	f7ff fbbc 	bl	800a25c <_free_r>
 800aae4:	e7e1      	b.n	800aaaa <_realloc_r+0x1e>
 800aae6:	4635      	mov	r5, r6
 800aae8:	e7df      	b.n	800aaaa <_realloc_r+0x1e>

0800aaea <_malloc_usable_size_r>:
 800aaea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaee:	1f18      	subs	r0, r3, #4
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bfbc      	itt	lt
 800aaf4:	580b      	ldrlt	r3, [r1, r0]
 800aaf6:	18c0      	addlt	r0, r0, r3
 800aaf8:	4770      	bx	lr
	...

0800aafc <_init>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	bf00      	nop
 800ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab02:	bc08      	pop	{r3}
 800ab04:	469e      	mov	lr, r3
 800ab06:	4770      	bx	lr

0800ab08 <_fini>:
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0a:	bf00      	nop
 800ab0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0e:	bc08      	pop	{r3}
 800ab10:	469e      	mov	lr, r3
 800ab12:	4770      	bx	lr
