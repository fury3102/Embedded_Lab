
test4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080054d8  080054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005568  08005568  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005568  08005568  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005568  08005568  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005568  08005568  00015568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  080055e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080055e0  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d67d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002094  00000000  00000000  0002d716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  00030368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001825f  00000000  00000000  00030e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f04f  00000000  00000000  000490bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a79f  00000000  00000000  0005810e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e28ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003568  00000000  00000000  000e2900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080054c0 	.word	0x080054c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080054c0 	.word	0x080054c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <Read16>:
#include "INA219.h"
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;
uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af04      	add	r7, sp, #16
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	2302      	movs	r3, #2
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	f001 fec4 	bl	80029ac <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000c24:	7b3b      	ldrb	r3, [r7, #12]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	b29b      	uxth	r3, r3
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <INA219_ReadBusVoltage>:
	addr[1] = (Value >> 0) & 0xff; // lower byte
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
}

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8000c44:	2102      	movs	r1, #2
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffd6 	bl	8000bf8 <Read16>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8000c50:	89fb      	ldrh	r3, [r7, #14]
 8000c52:	08db      	lsrs	r3, r3, #3
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	b29b      	uxth	r3, r3

}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ffc3 	bl	8000bf8 <Read16>
 8000c72:	4603      	mov	r3, r0
 8000c74:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000c76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ffe8 	bl	8000c62 <INA219_ReadCurrent_raw>
 8000c92:	4603      	mov	r3, r0
 8000c94:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8000c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <INA219_ReadCurrent+0x2c>)
 8000c9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ca4:	b21b      	sxth	r3, r3
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000008c 	.word	0x2000008c
 8000cb4:	00000000 	.word	0x00000000

08000cb8 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ff98 	bl	8000bf8 <Read16>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fb98 	bl	8000404 <__aeabi_i2d>
 8000cd4:	a308      	add	r3, pc, #32	; (adr r3, 8000cf8 <INA219_ReadShuntVolage+0x40>)
 8000cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cda:	f7ff fbfd 	bl	80004d8 <__aeabi_dmul>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f7ff fe09 	bl	80008fc <__aeabi_d2uiz>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29b      	uxth	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	47ae147b 	.word	0x47ae147b
 8000cfc:	3f847ae1 	.word	0x3f847ae1

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b09d      	sub	sp, #116	; 0x74
 8000d04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f000 fc27 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f889 	bl	8000e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 f9a1 	bl	8001054 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d12:	f000 f91d 	bl	8000f50 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d16:	f000 f949 	bl	8000fac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d1a:	f000 f971 	bl	8001000 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d1e:	f000 f8d9 	bl	8000ed4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //INA219_setPowerMode(&ina219, INA219_CONFIG_MODE_ADCOFF);
  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8000d22:	4837      	ldr	r0, [pc, #220]	; (8000e00 <main+0x100>)
 8000d24:	f000 fe7c 	bl	8001a20 <HAL_ADC_Start_IT>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <main+0x32>
    {
      Error_Handler();
 8000d2e:	f000 f9db 	bl	80010e8 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Chờ cho quá trình chuyển đổi ADC hoàn thành
	  	  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000d32:	2164      	movs	r1, #100	; 0x64
 8000d34:	4832      	ldr	r0, [pc, #200]	; (8000e00 <main+0x100>)
 8000d36:	f000 fd6d 	bl	8001814 <HAL_ADC_PollForConversion>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d11e      	bne.n	8000d7e <main+0x7e>
	  		  // Đọc giá trị từ ADC
	  	      uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000d40:	482f      	ldr	r0, [pc, #188]	; (8000e00 <main+0x100>)
 8000d42:	f000 ff23 	bl	8001b8c <HAL_ADC_GetValue>
 8000d46:	6678      	str	r0, [r7, #100]	; 0x64
	  	      // Chuyển đổi giá trị ADC sang giá trị nhiệt độ
	  	      temp = (adcValue * 3.3) / 4095;
 8000d48:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d4a:	f7ff fb4b 	bl	80003e4 <__aeabi_ui2d>
 8000d4e:	a328      	add	r3, pc, #160	; (adr r3, 8000df0 <main+0xf0>)
 8000d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d54:	f7ff fbc0 	bl	80004d8 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	a325      	add	r3, pc, #148	; (adr r3, 8000df8 <main+0xf8>)
 8000d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d66:	f7ff fce1 	bl	800072c <__aeabi_ddiv>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	4610      	mov	r0, r2
 8000d70:	4619      	mov	r1, r3
 8000d72:	f7ff fdc3 	bl	80008fc <__aeabi_d2uiz>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <main+0x104>)
 8000d7c:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  	  	  vbus = (INA219_ReadBusVoltage(&ina219));
 8000d7e:	4822      	ldr	r0, [pc, #136]	; (8000e08 <main+0x108>)
 8000d80:	f7ff ff5c 	bl	8000c3c <INA219_ReadBusVoltage>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <main+0x10c>)
 8000d8a:	801a      	strh	r2, [r3, #0]
	  	  	  	  vshunt =  (INA219_ReadShuntVolage(&ina219));
 8000d8c:	481e      	ldr	r0, [pc, #120]	; (8000e08 <main+0x108>)
 8000d8e:	f7ff ff93 	bl	8000cb8 <INA219_ReadShuntVolage>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <main+0x110>)
 8000d98:	801a      	strh	r2, [r3, #0]
	  	  	  	  current = INA219_ReadCurrent(&ina219);
 8000d9a:	481b      	ldr	r0, [pc, #108]	; (8000e08 <main+0x108>)
 8000d9c:	f7ff ff72 	bl	8000c84 <INA219_ReadCurrent>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <main+0x114>)
 8000da6:	801a      	strh	r2, [r3, #0]
	  	  	  	  	  	  char uartData[100];
	  	  		  	  	  sprintf(uartData, "T:%d\nSHUNT:%d\nBUS:%d,I:%d",temp,vbus, vshunt,current);
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <main+0x104>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <main+0x10c>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	461c      	mov	r4, r3
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <main+0x110>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <main+0x114>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	9200      	str	r2, [sp, #0]
 8000dc4:	4623      	mov	r3, r4
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	4913      	ldr	r1, [pc, #76]	; (8000e18 <main+0x118>)
 8000dca:	f003 feff 	bl	8004bcc <siprintf>
	  	  		  	  	  HAL_UART_Transmit(&huart1, (uint8_t *)uartData, strlen(uartData), HAL_MAX_DELAY);
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff f9bd 	bl	8000150 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4639      	mov	r1, r7
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	480e      	ldr	r0, [pc, #56]	; (8000e1c <main+0x11c>)
 8000de2:	f003 f8ed 	bl	8003fc0 <HAL_UART_Transmit>
	  	  		  	 	  HAL_Delay(1000);
 8000de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dea:	f000 fc17 	bl	800161c <HAL_Delay>
  {
 8000dee:	e7a0      	b.n	8000d32 <main+0x32>
 8000df0:	66666666 	.word	0x66666666
 8000df4:	400a6666 	.word	0x400a6666
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	40affe00 	.word	0x40affe00
 8000e00:	20000090 	.word	0x20000090
 8000e04:	200001b2 	.word	0x200001b2
 8000e08:	200001a4 	.word	0x200001a4
 8000e0c:	200001ac 	.word	0x200001ac
 8000e10:	200001ae 	.word	0x200001ae
 8000e14:	200001b0 	.word	0x200001b0
 8000e18:	080054d8 	.word	0x080054d8
 8000e1c:	20000114 	.word	0x20000114

08000e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b094      	sub	sp, #80	; 0x50
 8000e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e2a:	2228      	movs	r2, #40	; 0x28
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fec4 	bl	8004bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e50:	2301      	movs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e6c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e76:	4618      	mov	r0, r3
 8000e78:	f002 fad6 	bl	8003428 <HAL_RCC_OscConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e82:	f000 f931 	bl	80010e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e86:	230f      	movs	r3, #15
 8000e88:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e96:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fd42 	bl	800392c <HAL_RCC_ClockConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000eae:	f000 f91b 	bl	80010e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 fec3 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ec8:	f000 f90e 	bl	80010e8 <Error_Handler>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3750      	adds	r7, #80	; 0x50
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_ADC1_Init+0x74>)
 8000ee6:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <MX_ADC1_Init+0x78>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_ADC1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_ADC1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_ADC1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_ADC1_Init+0x74>)
 8000efe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_ADC1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_ADC1_Init+0x74>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_ADC1_Init+0x74>)
 8000f12:	f000 fba7 	bl	8001664 <HAL_ADC_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f000 f8e4 	bl	80010e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_ADC1_Init+0x74>)
 8000f32:	f000 feff 	bl	8001d34 <HAL_ADC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f3c:	f000 f8d4 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000090 	.word	0x20000090
 8000f4c:	40012400 	.word	0x40012400

08000f50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <MX_I2C1_Init+0x54>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f5c:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <MX_I2C1_Init+0x58>)
 8000f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_I2C1_Init+0x50>)
 8000f8e:	f001 fbc9 	bl	8002724 <HAL_I2C_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f98:	f000 f8a6 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200000c0 	.word	0x200000c0
 8000fa4:	40005400 	.word	0x40005400
 8000fa8:	000186a0 	.word	0x000186a0

08000fac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <MX_USART1_UART_Init+0x50>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_USART1_UART_Init+0x4c>)
 8000fe4:	f002 ff9c 	bl	8003f20 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fee:	f000 f87b 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000114 	.word	0x20000114
 8000ffc:	40013800 	.word	0x40013800

08001000 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_USART2_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART2_UART_Init+0x4c>)
 8001038:	f002 ff72 	bl	8003f20 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 f851 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000015c 	.word	0x2000015c
 8001050:	40004400 	.word	0x40004400

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_GPIO_Init+0x8c>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <MX_GPIO_Init+0x8c>)
 800106e:	f043 0320 	orr.w	r3, r3, #32
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_GPIO_Init+0x8c>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0320 	and.w	r3, r3, #32
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_GPIO_Init+0x8c>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <MX_GPIO_Init+0x8c>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_GPIO_Init+0x8c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_GPIO_Init+0x8c>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <MX_GPIO_Init+0x8c>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_GPIO_Init+0x8c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2138      	movs	r1, #56	; 0x38
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <MX_GPIO_Init+0x90>)
 80010b6:	f001 fb1d 	bl	80026f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80010ba:	2338      	movs	r3, #56	; 0x38
 80010bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_GPIO_Init+0x90>)
 80010d2:	f001 f98b 	bl	80023ec <HAL_GPIO_Init>

}
 80010d6:	bf00      	nop
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <Error_Handler+0x8>
 80010f2:	0000      	movs	r0, r0
 80010f4:	0000      	movs	r0, r0
	...

080010f8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END Error_Handler_Debug */
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	 if (hadc == &hadc1) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <HAL_ADC_ConvCpltCallback+0x98>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d135      	bne.n	8001174 <HAL_ADC_ConvCpltCallback+0x7c>
	        // Đọc giá trị nhiệt độ từ ADC
	        uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8001108:	4821      	ldr	r0, [pc, #132]	; (8001190 <HAL_ADC_ConvCpltCallback+0x98>)
 800110a:	f000 fd3f 	bl	8001b8c <HAL_ADC_GetValue>
 800110e:	60f8      	str	r0, [r7, #12]
	        float voltage = (float)adcValue/4095.0*3.3;
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff fd19 	bl	8000b48 <__aeabi_ui2f>
 8001116:	4603      	mov	r3, r0
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f985 	bl	8000428 <__aeabi_f2d>
 800111e:	a318      	add	r3, pc, #96	; (adr r3, 8001180 <HAL_ADC_ConvCpltCallback+0x88>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fb02 	bl	800072c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	a315      	add	r3, pc, #84	; (adr r3, 8001188 <HAL_ADC_ConvCpltCallback+0x90>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff f9cf 	bl	80004d8 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fbfb 	bl	800093c <__aeabi_d2f>
 8001146:	4603      	mov	r3, r0
 8001148:	60bb      	str	r3, [r7, #8]

	        // Chuyển đổi giá trị ADC sang giá trị nhiệt độ
	        temp = voltage*10.0;
 800114a:	68b8      	ldr	r0, [r7, #8]
 800114c:	f7ff f96c 	bl	8000428 <__aeabi_f2d>
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001156:	f7ff f9bf 	bl	80004d8 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fbcb 	bl	80008fc <__aeabi_d2uiz>
 8001166:	4603      	mov	r3, r0
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_ADC_ConvCpltCallback+0xa0>)
 800116c:	801a      	strh	r2, [r3, #0]
	        HAL_ADC_Start_IT(&hadc1);
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <HAL_ADC_ConvCpltCallback+0x98>)
 8001170:	f000 fc56 	bl	8001a20 <HAL_ADC_Start_IT>
	    }
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	00000000 	.word	0x00000000
 8001184:	40affe00 	.word	0x40affe00
 8001188:	66666666 	.word	0x66666666
 800118c:	400a6666 	.word	0x400a6666
 8001190:	20000090 	.word	0x20000090
 8001194:	40240000 	.word	0x40240000
 8001198:	200001b2 	.word	0x200001b2

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_MspInit+0x5c>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_MspInit+0x5c>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6193      	str	r3, [r2, #24]
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_MspInit+0x5c>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_MspInit+0x5c>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_MspInit+0x5c>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_MspInit+0x5c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_MspInit+0x60>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_MspInit+0x60>)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000

08001200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a18      	ldr	r2, [pc, #96]	; (800127c <HAL_ADC_MspInit+0x7c>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d129      	bne.n	8001274 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_ADC_MspInit+0x80>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a16      	ldr	r2, [pc, #88]	; (8001280 <HAL_ADC_MspInit+0x80>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_ADC_MspInit+0x80>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_ADC_MspInit+0x80>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_ADC_MspInit+0x80>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_ADC_MspInit+0x80>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001250:	2310      	movs	r3, #16
 8001252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001254:	2303      	movs	r3, #3
 8001256:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4619      	mov	r1, r3
 800125e:	4809      	ldr	r0, [pc, #36]	; (8001284 <HAL_ADC_MspInit+0x84>)
 8001260:	f001 f8c4 	bl	80023ec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2012      	movs	r0, #18
 800126a:	f000 ffd6 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800126e:	2012      	movs	r0, #18
 8001270:	f000 ffef 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40012400 	.word	0x40012400
 8001280:	40021000 	.word	0x40021000
 8001284:	40010800 	.word	0x40010800

08001288 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <HAL_I2C_MspInit+0x70>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d123      	bne.n	80012f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_I2C_MspInit+0x74>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a13      	ldr	r2, [pc, #76]	; (80012fc <HAL_I2C_MspInit+0x74>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_I2C_MspInit+0x74>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c0:	23c0      	movs	r3, #192	; 0xc0
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	480b      	ldr	r0, [pc, #44]	; (8001300 <HAL_I2C_MspInit+0x78>)
 80012d4:	f001 f88a 	bl	80023ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_I2C_MspInit+0x74>)
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_I2C_MspInit+0x74>)
 80012de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e2:	61d3      	str	r3, [r2, #28]
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_I2C_MspInit+0x74>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40005400 	.word	0x40005400
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010c00 	.word	0x40010c00

08001304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0318 	add.w	r3, r7, #24
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a3b      	ldr	r2, [pc, #236]	; (800140c <HAL_UART_MspInit+0x108>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d13a      	bne.n	800139a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001324:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <HAL_UART_MspInit+0x10c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a39      	ldr	r2, [pc, #228]	; (8001410 <HAL_UART_MspInit+0x10c>)
 800132a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b37      	ldr	r3, [pc, #220]	; (8001410 <HAL_UART_MspInit+0x10c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b34      	ldr	r3, [pc, #208]	; (8001410 <HAL_UART_MspInit+0x10c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a33      	ldr	r2, [pc, #204]	; (8001410 <HAL_UART_MspInit+0x10c>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b31      	ldr	r3, [pc, #196]	; (8001410 <HAL_UART_MspInit+0x10c>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0318 	add.w	r3, r7, #24
 8001366:	4619      	mov	r1, r3
 8001368:	482a      	ldr	r0, [pc, #168]	; (8001414 <HAL_UART_MspInit+0x110>)
 800136a:	f001 f83f 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800136e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4619      	mov	r1, r3
 8001382:	4824      	ldr	r0, [pc, #144]	; (8001414 <HAL_UART_MspInit+0x110>)
 8001384:	f001 f832 	bl	80023ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2025      	movs	r0, #37	; 0x25
 800138e:	f000 ff44 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001392:	2025      	movs	r0, #37	; 0x25
 8001394:	f000 ff5d 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001398:	e034      	b.n	8001404 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <HAL_UART_MspInit+0x114>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d12f      	bne.n	8001404 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_UART_MspInit+0x10c>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <HAL_UART_MspInit+0x10c>)
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ae:	61d3      	str	r3, [r2, #28]
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_UART_MspInit+0x10c>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_UART_MspInit+0x10c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a13      	ldr	r2, [pc, #76]	; (8001410 <HAL_UART_MspInit+0x10c>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_UART_MspInit+0x10c>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d4:	2304      	movs	r3, #4
 80013d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	4619      	mov	r1, r3
 80013e6:	480b      	ldr	r0, [pc, #44]	; (8001414 <HAL_UART_MspInit+0x110>)
 80013e8:	f001 f800 	bl	80023ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ec:	2308      	movs	r3, #8
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_UART_MspInit+0x110>)
 8001400:	f000 fff4 	bl	80023ec <HAL_GPIO_Init>
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40013800 	.word	0x40013800
 8001410:	40021000 	.word	0x40021000
 8001414:	40010800 	.word	0x40010800
 8001418:	40004400 	.word	0x40004400

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001462:	f000 f8bf 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <ADC1_2_IRQHandler+0x10>)
 8001472:	f000 fb97 	bl	8001ba4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000090 	.word	0x20000090

08001480 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <USART1_IRQHandler+0x10>)
 8001486:	f002 fe1f 	bl	80040c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000114 	.word	0x20000114

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f003 fb50 	bl	8004b68 <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	220c      	movs	r2, #12
 80014cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <_sbrk+0x64>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20005000 	.word	0x20005000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	200001b4 	.word	0x200001b4
 80014fc:	200001d0 	.word	0x200001d0

08001500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800150c:	f7ff fff8 	bl	8001500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001512:	490c      	ldr	r1, [pc, #48]	; (8001544 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001528:	4c09      	ldr	r4, [pc, #36]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f003 fb1d 	bl	8004b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153a:	f7ff fbe1 	bl	8000d00 <main>
  bx lr
 800153e:	4770      	bx	lr
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001548:	08005570 	.word	0x08005570
  ldr r2, =_sbss
 800154c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001550:	200001cc 	.word	0x200001cc

08001554 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <CAN1_RX1_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x28>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_Init+0x28>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 fe4b 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	200f      	movs	r0, #15
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fe12 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fe63 	bl	800226e <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 fe2b 	bl	800221a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x1c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x20>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <HAL_IncTick+0x20>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000008 	.word	0x20000008
 8001604:	200001b8 	.word	0x200001b8

08001608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <HAL_GetTick+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	200001b8 	.word	0x200001b8

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff fff0 	bl	8001608 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffe0 	bl	8001608 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008

08001664 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0be      	b.n	8001804 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	2b00      	cmp	r3, #0
 8001692:	d109      	bne.n	80016a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fdac 	bl	8001200 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fc95 	bl	8001fd8 <ADC_ConversionStop_Disable>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 8099 	bne.w	80017f2 <HAL_ADC_Init+0x18e>
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 8095 	bne.w	80017f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016d0:	f023 0302 	bic.w	r3, r3, #2
 80016d4:	f043 0202 	orr.w	r2, r3, #2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7b1b      	ldrb	r3, [r3, #12]
 80016ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016fc:	d003      	beq.n	8001706 <HAL_ADC_Init+0xa2>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <HAL_ADC_Init+0xa8>
 8001706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170a:	e000      	b.n	800170e <HAL_ADC_Init+0xaa>
 800170c:	2300      	movs	r3, #0
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7d1b      	ldrb	r3, [r3, #20]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d119      	bne.n	8001750 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7b1b      	ldrb	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d109      	bne.n	8001738 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	3b01      	subs	r3, #1
 800172a:	035a      	lsls	r2, r3, #13
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	e00b      	b.n	8001750 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	f043 0220 	orr.w	r2, r3, #32
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	430a      	orrs	r2, r1
 8001762:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_ADC_Init+0x1a8>)
 800176c:	4013      	ands	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	430b      	orrs	r3, r1
 8001776:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001780:	d003      	beq.n	800178a <HAL_ADC_Init+0x126>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d104      	bne.n	8001794 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	3b01      	subs	r3, #1
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_ADC_Init+0x1ac>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d10b      	bne.n	80017d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	f043 0201 	orr.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017ce:	e018      	b.n	8001802 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f023 0312 	bic.w	r3, r3, #18
 80017d8:	f043 0210 	orr.w	r2, r3, #16
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017f0:	e007      	b.n	8001802 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	f043 0210 	orr.w	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	ffe1f7fd 	.word	0xffe1f7fd
 8001810:	ff1f0efe 	.word	0xff1f0efe

08001814 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800182a:	f7ff feed 	bl	8001608 <HAL_GetTick>
 800182e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	f043 0220 	orr.w	r2, r3, #32
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0d3      	b.n	80019fe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d131      	bne.n	80018c8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800186e:	2b00      	cmp	r3, #0
 8001870:	d12a      	bne.n	80018c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001872:	e021      	b.n	80018b8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187a:	d01d      	beq.n	80018b8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <HAL_ADC_PollForConversion+0x7e>
 8001882:	f7ff fec1 	bl	8001608 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d212      	bcs.n	80018b8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10b      	bne.n	80018b8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	f043 0204 	orr.w	r2, r3, #4
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0a2      	b.n	80019fe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0d6      	beq.n	8001874 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018c6:	e070      	b.n	80019aa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80018c8:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <HAL_ADC_PollForConversion+0x1f4>)
 80018ca:	681c      	ldr	r4, [r3, #0]
 80018cc:	2002      	movs	r0, #2
 80018ce:	f002 fa71 	bl	8003db4 <HAL_RCCEx_GetPeriphCLKFreq>
 80018d2:	4603      	mov	r3, r0
 80018d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6919      	ldr	r1, [r3, #16]
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_ADC_PollForConversion+0x1f8>)
 80018e0:	400b      	ands	r3, r1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_ADC_PollForConversion+0x104>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68d9      	ldr	r1, [r3, #12]
 80018ec:	4b48      	ldr	r3, [pc, #288]	; (8001a10 <HAL_ADC_PollForConversion+0x1fc>)
 80018ee:	400b      	ands	r3, r1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d111      	bne.n	8001918 <HAL_ADC_PollForConversion+0x104>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6919      	ldr	r1, [r3, #16]
 80018fa:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <HAL_ADC_PollForConversion+0x200>)
 80018fc:	400b      	ands	r3, r1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d108      	bne.n	8001914 <HAL_ADC_PollForConversion+0x100>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68d9      	ldr	r1, [r3, #12]
 8001908:	4b43      	ldr	r3, [pc, #268]	; (8001a18 <HAL_ADC_PollForConversion+0x204>)
 800190a:	400b      	ands	r3, r1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_ADC_PollForConversion+0x100>
 8001910:	2314      	movs	r3, #20
 8001912:	e020      	b.n	8001956 <HAL_ADC_PollForConversion+0x142>
 8001914:	2329      	movs	r3, #41	; 0x29
 8001916:	e01e      	b.n	8001956 <HAL_ADC_PollForConversion+0x142>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6919      	ldr	r1, [r3, #16]
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_ADC_PollForConversion+0x200>)
 8001920:	400b      	ands	r3, r1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_ADC_PollForConversion+0x120>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68d9      	ldr	r1, [r3, #12]
 800192c:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <HAL_ADC_PollForConversion+0x204>)
 800192e:	400b      	ands	r3, r1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00d      	beq.n	8001950 <HAL_ADC_PollForConversion+0x13c>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6919      	ldr	r1, [r3, #16]
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_ADC_PollForConversion+0x208>)
 800193c:	400b      	ands	r3, r1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d108      	bne.n	8001954 <HAL_ADC_PollForConversion+0x140>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68d9      	ldr	r1, [r3, #12]
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_ADC_PollForConversion+0x208>)
 800194a:	400b      	ands	r3, r1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_ADC_PollForConversion+0x140>
 8001950:	2354      	movs	r3, #84	; 0x54
 8001952:	e000      	b.n	8001956 <HAL_ADC_PollForConversion+0x142>
 8001954:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800195c:	e021      	b.n	80019a2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d01a      	beq.n	800199c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_ADC_PollForConversion+0x168>
 800196c:	f7ff fe4c 	bl	8001608 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d20f      	bcs.n	800199c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d90b      	bls.n	800199c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	f043 0204 	orr.w	r2, r3, #4
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e030      	b.n	80019fe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3301      	adds	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d8d9      	bhi.n	800195e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f06f 0212 	mvn.w	r2, #18
 80019b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019ce:	d115      	bne.n	80019fc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d111      	bne.n	80019fc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d105      	bne.n	80019fc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	24924924 	.word	0x24924924
 8001a10:	00924924 	.word	0x00924924
 8001a14:	12492492 	.word	0x12492492
 8001a18:	00492492 	.word	0x00492492
 8001a1c:	00249249 	.word	0x00249249

08001a20 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_Start_IT+0x1a>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e0a0      	b.n	8001b7c <HAL_ADC_Start_IT+0x15c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fa6e 	bl	8001f24 <ADC_Enable>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 808f 	bne.w	8001b72 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a45      	ldr	r2, [pc, #276]	; (8001b84 <HAL_ADC_Start_IT+0x164>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d105      	bne.n	8001a7e <HAL_ADC_Start_IT+0x5e>
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <HAL_ADC_Start_IT+0x168>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d115      	bne.n	8001aaa <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d026      	beq.n	8001ae6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aa0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aa8:	e01d      	b.n	8001ae6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a33      	ldr	r2, [pc, #204]	; (8001b88 <HAL_ADC_Start_IT+0x168>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d004      	beq.n	8001aca <HAL_ADC_Start_IT+0xaa>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a2f      	ldr	r2, [pc, #188]	; (8001b84 <HAL_ADC_Start_IT+0x164>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_ADC_Start_IT+0xc6>
 8001aca:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_ADC_Start_IT+0x168>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ade:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	f023 0206 	bic.w	r2, r3, #6
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001afe:	e002      	b.n	8001b06 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f06f 0202 	mvn.w	r2, #2
 8001b16:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b36:	d113      	bne.n	8001b60 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b3c:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_ADC_Start_IT+0x164>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d105      	bne.n	8001b4e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_ADC_Start_IT+0x168>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	e00c      	b.n	8001b7a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	e003      	b.n	8001b7a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40012800 	.word	0x40012800
 8001b88:	40012400 	.word	0x40012400

08001b8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d03e      	beq.n	8001c44 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d039      	beq.n	8001c44 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d105      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bf2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bf6:	d11d      	bne.n	8001c34 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d119      	bne.n	8001c34 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0220 	bic.w	r2, r2, #32
 8001c0e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fa5f 	bl	80010f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f06f 0212 	mvn.w	r2, #18
 8001c42:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d04d      	beq.n	8001cea <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d048      	beq.n	8001cea <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001c7a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001c7e:	d012      	beq.n	8001ca6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d125      	bne.n	8001cda <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c9c:	d11d      	bne.n	8001cda <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d119      	bne.n	8001cda <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f9bd 	bl	800205a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 020c 	mvn.w	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d012      	beq.n	8001d1a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00d      	beq.n	8001d1a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f809 	bl	8001d22 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0201 	mvn.w	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x20>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e0dc      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1da>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d81c      	bhi.n	8001d9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3b05      	subs	r3, #5
 8001d76:	221f      	movs	r2, #31
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4019      	ands	r1, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b05      	subs	r3, #5
 8001d90:	fa00 f203 	lsl.w	r2, r0, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d9c:	e03c      	b.n	8001e18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d81c      	bhi.n	8001de0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b23      	subs	r3, #35	; 0x23
 8001db8:	221f      	movs	r2, #31
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	4019      	ands	r1, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b23      	subs	r3, #35	; 0x23
 8001dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dde:	e01b      	b.n	8001e18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b41      	subs	r3, #65	; 0x41
 8001df2:	221f      	movs	r2, #31
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	4019      	ands	r1, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b41      	subs	r3, #65	; 0x41
 8001e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d91c      	bls.n	8001e5a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68d9      	ldr	r1, [r3, #12]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b1e      	subs	r3, #30
 8001e32:	2207      	movs	r2, #7
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4019      	ands	r1, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6898      	ldr	r0, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b1e      	subs	r3, #30
 8001e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	60da      	str	r2, [r3, #12]
 8001e58:	e019      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6919      	ldr	r1, [r3, #16]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4019      	ands	r1, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6898      	ldr	r0, [r3, #8]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d003      	beq.n	8001e9e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e9a:	2b11      	cmp	r3, #17
 8001e9c:	d132      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d125      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d126      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ec4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d11a      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_ADC_ConfigChannel+0x1e8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	0c9a      	lsrs	r2, r3, #18
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x1b2>
 8001ef2:	e007      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	40012400 	.word	0x40012400
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	431bde83 	.word	0x431bde83

08001f24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d040      	beq.n	8001fc4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f52:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <ADC_Enable+0xac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <ADC_Enable+0xb0>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	0c9b      	lsrs	r3, r3, #18
 8001f5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f60:	e002      	b.n	8001f68 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f6e:	f7ff fb4b 	bl	8001608 <HAL_GetTick>
 8001f72:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f74:	e01f      	b.n	8001fb6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f76:	f7ff fb47 	bl	8001608 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d918      	bls.n	8001fb6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d011      	beq.n	8001fb6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	f043 0210 	orr.w	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e007      	b.n	8001fc6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d1d8      	bne.n	8001f76 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	431bde83 	.word	0x431bde83

08001fd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d12e      	bne.n	8002050 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002002:	f7ff fb01 	bl	8001608 <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002008:	e01b      	b.n	8002042 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800200a:	f7ff fafd 	bl	8001608 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d914      	bls.n	8002042 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d10d      	bne.n	8002042 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e007      	b.n	8002052 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	d0dc      	beq.n	800200a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4906      	ldr	r1, [pc, #24]	; (8002104 <__NVIC_EnableIRQ+0x34>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff90 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff2d 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff42 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff90 	bl	800215c <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5f 	bl	8002108 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff35 	bl	80020d0 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffa2 	bl	80021c0 <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d008      	beq.n	80022b0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2204      	movs	r2, #4
 80022a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e020      	b.n	80022f2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 020e 	bic.w	r2, r2, #14
 80022be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f202 	lsl.w	r2, r1, r2
 80022de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d005      	beq.n	8002320 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2204      	movs	r2, #4
 8002318:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e051      	b.n	80023c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 020e 	bic.w	r2, r2, #14
 800232e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_DMA_Abort_IT+0xd4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d029      	beq.n	800239e <HAL_DMA_Abort_IT+0xa2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <HAL_DMA_Abort_IT+0xd8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d022      	beq.n	800239a <HAL_DMA_Abort_IT+0x9e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <HAL_DMA_Abort_IT+0xdc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01a      	beq.n	8002394 <HAL_DMA_Abort_IT+0x98>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_DMA_Abort_IT+0xe0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d012      	beq.n	800238e <HAL_DMA_Abort_IT+0x92>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_DMA_Abort_IT+0xe4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00a      	beq.n	8002388 <HAL_DMA_Abort_IT+0x8c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_DMA_Abort_IT+0xe8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d102      	bne.n	8002382 <HAL_DMA_Abort_IT+0x86>
 800237c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002380:	e00e      	b.n	80023a0 <HAL_DMA_Abort_IT+0xa4>
 8002382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002386:	e00b      	b.n	80023a0 <HAL_DMA_Abort_IT+0xa4>
 8002388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800238c:	e008      	b.n	80023a0 <HAL_DMA_Abort_IT+0xa4>
 800238e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002392:	e005      	b.n	80023a0 <HAL_DMA_Abort_IT+0xa4>
 8002394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002398:	e002      	b.n	80023a0 <HAL_DMA_Abort_IT+0xa4>
 800239a:	2310      	movs	r3, #16
 800239c:	e000      	b.n	80023a0 <HAL_DMA_Abort_IT+0xa4>
 800239e:	2301      	movs	r3, #1
 80023a0:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <HAL_DMA_Abort_IT+0xec>)
 80023a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
    } 
  }
  return status;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40020008 	.word	0x40020008
 80023d4:	4002001c 	.word	0x4002001c
 80023d8:	40020030 	.word	0x40020030
 80023dc:	40020044 	.word	0x40020044
 80023e0:	40020058 	.word	0x40020058
 80023e4:	4002006c 	.word	0x4002006c
 80023e8:	40020000 	.word	0x40020000

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b08b      	sub	sp, #44	; 0x2c
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fe:	e169      	b.n	80026d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002400:	2201      	movs	r2, #1
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 8158 	bne.w	80026ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4a9a      	ldr	r2, [pc, #616]	; (800268c <HAL_GPIO_Init+0x2a0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d05e      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
 8002428:	4a98      	ldr	r2, [pc, #608]	; (800268c <HAL_GPIO_Init+0x2a0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d875      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 800242e:	4a98      	ldr	r2, [pc, #608]	; (8002690 <HAL_GPIO_Init+0x2a4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d058      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
 8002434:	4a96      	ldr	r2, [pc, #600]	; (8002690 <HAL_GPIO_Init+0x2a4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d86f      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 800243a:	4a96      	ldr	r2, [pc, #600]	; (8002694 <HAL_GPIO_Init+0x2a8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d052      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
 8002440:	4a94      	ldr	r2, [pc, #592]	; (8002694 <HAL_GPIO_Init+0x2a8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d869      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 8002446:	4a94      	ldr	r2, [pc, #592]	; (8002698 <HAL_GPIO_Init+0x2ac>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d04c      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
 800244c:	4a92      	ldr	r2, [pc, #584]	; (8002698 <HAL_GPIO_Init+0x2ac>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d863      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 8002452:	4a92      	ldr	r2, [pc, #584]	; (800269c <HAL_GPIO_Init+0x2b0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d046      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
 8002458:	4a90      	ldr	r2, [pc, #576]	; (800269c <HAL_GPIO_Init+0x2b0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d85d      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 800245e:	2b12      	cmp	r3, #18
 8002460:	d82a      	bhi.n	80024b8 <HAL_GPIO_Init+0xcc>
 8002462:	2b12      	cmp	r3, #18
 8002464:	d859      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <HAL_GPIO_Init+0x80>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	080024e7 	.word	0x080024e7
 8002470:	080024c1 	.word	0x080024c1
 8002474:	080024d3 	.word	0x080024d3
 8002478:	08002515 	.word	0x08002515
 800247c:	0800251b 	.word	0x0800251b
 8002480:	0800251b 	.word	0x0800251b
 8002484:	0800251b 	.word	0x0800251b
 8002488:	0800251b 	.word	0x0800251b
 800248c:	0800251b 	.word	0x0800251b
 8002490:	0800251b 	.word	0x0800251b
 8002494:	0800251b 	.word	0x0800251b
 8002498:	0800251b 	.word	0x0800251b
 800249c:	0800251b 	.word	0x0800251b
 80024a0:	0800251b 	.word	0x0800251b
 80024a4:	0800251b 	.word	0x0800251b
 80024a8:	0800251b 	.word	0x0800251b
 80024ac:	0800251b 	.word	0x0800251b
 80024b0:	080024c9 	.word	0x080024c9
 80024b4:	080024dd 	.word	0x080024dd
 80024b8:	4a79      	ldr	r2, [pc, #484]	; (80026a0 <HAL_GPIO_Init+0x2b4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024be:	e02c      	b.n	800251a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	623b      	str	r3, [r7, #32]
          break;
 80024c6:	e029      	b.n	800251c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	3304      	adds	r3, #4
 80024ce:	623b      	str	r3, [r7, #32]
          break;
 80024d0:	e024      	b.n	800251c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	3308      	adds	r3, #8
 80024d8:	623b      	str	r3, [r7, #32]
          break;
 80024da:	e01f      	b.n	800251c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	330c      	adds	r3, #12
 80024e2:	623b      	str	r3, [r7, #32]
          break;
 80024e4:	e01a      	b.n	800251c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024ee:	2304      	movs	r3, #4
 80024f0:	623b      	str	r3, [r7, #32]
          break;
 80024f2:	e013      	b.n	800251c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024fc:	2308      	movs	r3, #8
 80024fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	611a      	str	r2, [r3, #16]
          break;
 8002506:	e009      	b.n	800251c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002508:	2308      	movs	r3, #8
 800250a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	615a      	str	r2, [r3, #20]
          break;
 8002512:	e003      	b.n	800251c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
          break;
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x130>
          break;
 800251a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2bff      	cmp	r3, #255	; 0xff
 8002520:	d801      	bhi.n	8002526 <HAL_GPIO_Init+0x13a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	e001      	b.n	800252a <HAL_GPIO_Init+0x13e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2bff      	cmp	r3, #255	; 0xff
 8002530:	d802      	bhi.n	8002538 <HAL_GPIO_Init+0x14c>
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	e002      	b.n	800253e <HAL_GPIO_Init+0x152>
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	3b08      	subs	r3, #8
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	210f      	movs	r1, #15
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	401a      	ands	r2, r3
 8002550:	6a39      	ldr	r1, [r7, #32]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	431a      	orrs	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80b1 	beq.w	80026ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800256c:	4b4d      	ldr	r3, [pc, #308]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002584:	4a48      	ldr	r2, [pc, #288]	; (80026a8 <HAL_GPIO_Init+0x2bc>)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a40      	ldr	r2, [pc, #256]	; (80026ac <HAL_GPIO_Init+0x2c0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d013      	beq.n	80025d8 <HAL_GPIO_Init+0x1ec>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a3f      	ldr	r2, [pc, #252]	; (80026b0 <HAL_GPIO_Init+0x2c4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00d      	beq.n	80025d4 <HAL_GPIO_Init+0x1e8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a3e      	ldr	r2, [pc, #248]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d007      	beq.n	80025d0 <HAL_GPIO_Init+0x1e4>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a3d      	ldr	r2, [pc, #244]	; (80026b8 <HAL_GPIO_Init+0x2cc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d101      	bne.n	80025cc <HAL_GPIO_Init+0x1e0>
 80025c8:	2303      	movs	r3, #3
 80025ca:	e006      	b.n	80025da <HAL_GPIO_Init+0x1ee>
 80025cc:	2304      	movs	r3, #4
 80025ce:	e004      	b.n	80025da <HAL_GPIO_Init+0x1ee>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e002      	b.n	80025da <HAL_GPIO_Init+0x1ee>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_GPIO_Init+0x1ee>
 80025d8:	2300      	movs	r3, #0
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	f002 0203 	and.w	r2, r2, #3
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	4093      	lsls	r3, r2
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025ea:	492f      	ldr	r1, [pc, #188]	; (80026a8 <HAL_GPIO_Init+0x2bc>)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	492c      	ldr	r1, [pc, #176]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	43db      	mvns	r3, r3
 800261a:	4928      	ldr	r1, [pc, #160]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 800261c:	4013      	ands	r3, r2
 800261e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800262c:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4922      	ldr	r1, [pc, #136]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	60cb      	str	r3, [r1, #12]
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	43db      	mvns	r3, r3
 8002642:	491e      	ldr	r1, [pc, #120]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002644:	4013      	ands	r3, r2
 8002646:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4918      	ldr	r1, [pc, #96]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	43db      	mvns	r3, r3
 800266a:	4914      	ldr	r1, [pc, #80]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 800266c:	4013      	ands	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d021      	beq.n	80026c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	490e      	ldr	r1, [pc, #56]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]
 8002688:	e021      	b.n	80026ce <HAL_GPIO_Init+0x2e2>
 800268a:	bf00      	nop
 800268c:	10320000 	.word	0x10320000
 8002690:	10310000 	.word	0x10310000
 8002694:	10220000 	.word	0x10220000
 8002698:	10210000 	.word	0x10210000
 800269c:	10120000 	.word	0x10120000
 80026a0:	10110000 	.word	0x10110000
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40010000 	.word	0x40010000
 80026ac:	40010800 	.word	0x40010800
 80026b0:	40010c00 	.word	0x40010c00
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40011400 	.word	0x40011400
 80026bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_GPIO_Init+0x304>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	4909      	ldr	r1, [pc, #36]	; (80026f0 <HAL_GPIO_Init+0x304>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	3301      	adds	r3, #1
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f47f ae8e 	bne.w	8002400 <HAL_GPIO_Init+0x14>
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	372c      	adds	r7, #44	; 0x2c
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	40010400 	.word	0x40010400

080026f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
 8002700:	4613      	mov	r3, r2
 8002702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002704:	787b      	ldrb	r3, [r7, #1]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002710:	e003      	b.n	800271a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	041a      	lsls	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	611a      	str	r2, [r3, #16]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e12b      	b.n	800298e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fd9c 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002788:	f001 fa18 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a81      	ldr	r2, [pc, #516]	; (8002998 <HAL_I2C_Init+0x274>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d807      	bhi.n	80027a8 <HAL_I2C_Init+0x84>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a80      	ldr	r2, [pc, #512]	; (800299c <HAL_I2C_Init+0x278>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e006      	b.n	80027b6 <HAL_I2C_Init+0x92>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a7d      	ldr	r2, [pc, #500]	; (80029a0 <HAL_I2C_Init+0x27c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0e7      	b.n	800298e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a78      	ldr	r2, [pc, #480]	; (80029a4 <HAL_I2C_Init+0x280>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9b      	lsrs	r3, r3, #18
 80027c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a6a      	ldr	r2, [pc, #424]	; (8002998 <HAL_I2C_Init+0x274>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d802      	bhi.n	80027f8 <HAL_I2C_Init+0xd4>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3301      	adds	r3, #1
 80027f6:	e009      	b.n	800280c <HAL_I2C_Init+0xe8>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	4a69      	ldr	r2, [pc, #420]	; (80029a8 <HAL_I2C_Init+0x284>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	3301      	adds	r3, #1
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800281e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	495c      	ldr	r1, [pc, #368]	; (8002998 <HAL_I2C_Init+0x274>)
 8002828:	428b      	cmp	r3, r1
 800282a:	d819      	bhi.n	8002860 <HAL_I2C_Init+0x13c>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e59      	subs	r1, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fbb1 f3f3 	udiv	r3, r1, r3
 800283a:	1c59      	adds	r1, r3, #1
 800283c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002840:	400b      	ands	r3, r1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_I2C_Init+0x138>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1e59      	subs	r1, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fbb1 f3f3 	udiv	r3, r1, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285a:	e051      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 800285c:	2304      	movs	r3, #4
 800285e:	e04f      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d111      	bne.n	800288c <HAL_I2C_Init+0x168>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e012      	b.n	80028b2 <HAL_I2C_Init+0x18e>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	0099      	lsls	r1, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Init+0x196>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e022      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10e      	bne.n	80028e0 <HAL_I2C_Init+0x1bc>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1e58      	subs	r0, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	440b      	add	r3, r1
 80028d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028de:	e00f      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	0099      	lsls	r1, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	6809      	ldr	r1, [r1, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800292e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6911      	ldr	r1, [r2, #16]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68d2      	ldr	r2, [r2, #12]
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	430b      	orrs	r3, r1
 8002942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	000186a0 	.word	0x000186a0
 800299c:	001e847f 	.word	0x001e847f
 80029a0:	003d08ff 	.word	0x003d08ff
 80029a4:	431bde83 	.word	0x431bde83
 80029a8:	10624dd3 	.word	0x10624dd3

080029ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08c      	sub	sp, #48	; 0x30
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	817b      	strh	r3, [r7, #10]
 80029be:	460b      	mov	r3, r1
 80029c0:	813b      	strh	r3, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ca:	f7fe fe1d 	bl	8001608 <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b20      	cmp	r3, #32
 80029da:	f040 8244 	bne.w	8002e66 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2319      	movs	r3, #25
 80029e4:	2201      	movs	r2, #1
 80029e6:	4982      	ldr	r1, [pc, #520]	; (8002bf0 <HAL_I2C_Mem_Read+0x244>)
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fb2f 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
 80029f6:	e237      	b.n	8002e68 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_I2C_Mem_Read+0x5a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e230      	b.n	8002e68 <HAL_I2C_Mem_Read+0x4bc>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d007      	beq.n	8002a2c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2222      	movs	r2, #34	; 0x22
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2240      	movs	r2, #64	; 0x40
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a62      	ldr	r2, [pc, #392]	; (8002bf4 <HAL_I2C_Mem_Read+0x248>)
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a6e:	88f8      	ldrh	r0, [r7, #6]
 8002a70:	893a      	ldrh	r2, [r7, #8]
 8002a72:	8979      	ldrh	r1, [r7, #10]
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f9fc 	bl	8002e7c <I2C_RequestMemoryRead>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e1ec      	b.n	8002e68 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d113      	bne.n	8002abe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e1c0      	b.n	8002e40 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d11e      	bne.n	8002b04 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad6:	b672      	cpsid	i
}
 8002ad8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b00:	b662      	cpsie	i
}
 8002b02:	e035      	b.n	8002b70 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d11e      	bne.n	8002b4a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b1c:	b672      	cpsid	i
}
 8002b1e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b46:	b662      	cpsie	i
}
 8002b48:	e012      	b.n	8002b70 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b58:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b70:	e166      	b.n	8002e40 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	f200 811f 	bhi.w	8002dba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d123      	bne.n	8002bcc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fbc1 	bl	8003310 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e167      	b.n	8002e68 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bca:	e139      	b.n	8002e40 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d152      	bne.n	8002c7a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4906      	ldr	r1, [pc, #24]	; (8002bf8 <HAL_I2C_Mem_Read+0x24c>)
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fa34 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e13c      	b.n	8002e68 <HAL_I2C_Mem_Read+0x4bc>
 8002bee:	bf00      	nop
 8002bf0:	00100002 	.word	0x00100002
 8002bf4:	ffff0000 	.word	0xffff0000
 8002bf8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfc:	b672      	cpsid	i
}
 8002bfe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c42:	b662      	cpsie	i
}
 8002c44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c78:	e0e2      	b.n	8002e40 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	2200      	movs	r2, #0
 8002c82:	497b      	ldr	r1, [pc, #492]	; (8002e70 <HAL_I2C_Mem_Read+0x4c4>)
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f9e1 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0e9      	b.n	8002e68 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca4:	b672      	cpsid	i
}
 8002ca6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cda:	4b66      	ldr	r3, [pc, #408]	; (8002e74 <HAL_I2C_Mem_Read+0x4c8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	08db      	lsrs	r3, r3, #3
 8002ce0:	4a65      	ldr	r2, [pc, #404]	; (8002e78 <HAL_I2C_Mem_Read+0x4cc>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a1a      	lsrs	r2, r3, #8
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00da      	lsls	r2, r3, #3
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d118      	bne.n	8002d32 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f043 0220 	orr.w	r2, r3, #32
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002d22:	b662      	cpsie	i
}
 8002d24:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e09a      	b.n	8002e68 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d1d9      	bne.n	8002cf4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d82:	b662      	cpsie	i
}
 8002d84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002db8:	e042      	b.n	8002e40 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 faa6 	bl	8003310 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e04c      	b.n	8002e68 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d118      	bne.n	8002e40 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f ae94 	bne.w	8002b72 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
  }
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3728      	adds	r7, #40	; 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	00010004 	.word	0x00010004
 8002e74:	20000000 	.word	0x20000000
 8002e78:	14f8b589 	.word	0x14f8b589

08002e7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	813b      	strh	r3, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f8c2 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002edc:	d103      	bne.n	8002ee6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0aa      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eea:	897b      	ldrh	r3, [r7, #10]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ef8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	4952      	ldr	r1, [pc, #328]	; (8003048 <I2C_RequestMemoryRead+0x1cc>)
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f91d 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e097      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f9a8 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d107      	bne.n	8002f4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e076      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f58:	893b      	ldrh	r3, [r7, #8]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	e021      	b.n	8002fa8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f64:	893b      	ldrh	r3, [r7, #8]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f74:	6a39      	ldr	r1, [r7, #32]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f982 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d107      	bne.n	8002f9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e050      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f9e:	893b      	ldrh	r3, [r7, #8]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	6a39      	ldr	r1, [r7, #32]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f967 	bl	8003280 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d107      	bne.n	8002fd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e035      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f82b 	bl	800304c <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300a:	d103      	bne.n	8003014 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e013      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003018:	897b      	ldrh	r3, [r7, #10]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	6a3a      	ldr	r2, [r7, #32]
 800302c:	4906      	ldr	r1, [pc, #24]	; (8003048 <I2C_RequestMemoryRead+0x1cc>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f886 	bl	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	00010002 	.word	0x00010002

0800304c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305c:	e048      	b.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d044      	beq.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fe facf 	bl	8001608 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d139      	bne.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10d      	bne.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	43da      	mvns	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	4013      	ands	r3, r2
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	e00c      	b.n	80030bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d116      	bne.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e023      	b.n	8003138 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	0c1b      	lsrs	r3, r3, #16
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d10d      	bne.n	8003116 <I2C_WaitOnFlagUntilTimeout+0xca>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	43da      	mvns	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	e00c      	b.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	43da      	mvns	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	429a      	cmp	r2, r3
 8003134:	d093      	beq.n	800305e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800314e:	e071      	b.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d123      	bne.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e067      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d041      	beq.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b0:	f7fe fa2a 	bl	8001608 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d302      	bcc.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d136      	bne.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10c      	bne.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e00b      	b.n	8003202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e021      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10c      	bne.n	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	43da      	mvns	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4013      	ands	r3, r2
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e00b      	b.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4013      	ands	r3, r2
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f af6d 	bne.w	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800328c:	e034      	b.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f89b 	bl	80033ca <I2C_IsAcknowledgeFailed>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e034      	b.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d028      	beq.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fe f9af 	bl	8001608 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11d      	bne.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b80      	cmp	r3, #128	; 0x80
 80032c8:	d016      	beq.n	80032f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e007      	b.n	8003308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003302:	2b80      	cmp	r3, #128	; 0x80
 8003304:	d1c3      	bne.n	800328e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800331c:	e049      	b.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b10      	cmp	r3, #16
 800332a:	d119      	bne.n	8003360 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0210 	mvn.w	r2, #16
 8003334:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e030      	b.n	80033c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003360:	f7fe f952 	bl	8001608 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	429a      	cmp	r2, r3
 800336e:	d302      	bcc.n	8003376 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11d      	bne.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d016      	beq.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f043 0220 	orr.w	r2, r3, #32
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e007      	b.n	80033c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d1ae      	bne.n	800331e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d11b      	bne.n	800341a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
	...

08003428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e272      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8087 	beq.w	8003556 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003448:	4b92      	ldr	r3, [pc, #584]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b04      	cmp	r3, #4
 8003452:	d00c      	beq.n	800346e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003454:	4b8f      	ldr	r3, [pc, #572]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d112      	bne.n	8003486 <HAL_RCC_OscConfig+0x5e>
 8003460:	4b8c      	ldr	r3, [pc, #560]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d10b      	bne.n	8003486 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346e:	4b89      	ldr	r3, [pc, #548]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d06c      	beq.n	8003554 <HAL_RCC_OscConfig+0x12c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d168      	bne.n	8003554 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e24c      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x76>
 8003490:	4b80      	ldr	r3, [pc, #512]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a7f      	ldr	r2, [pc, #508]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e02e      	b.n	80034fc <HAL_RCC_OscConfig+0xd4>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x98>
 80034a6:	4b7b      	ldr	r3, [pc, #492]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a7a      	ldr	r2, [pc, #488]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b78      	ldr	r3, [pc, #480]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a77      	ldr	r2, [pc, #476]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e01d      	b.n	80034fc <HAL_RCC_OscConfig+0xd4>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0xbc>
 80034ca:	4b72      	ldr	r3, [pc, #456]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a71      	ldr	r2, [pc, #452]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b6f      	ldr	r3, [pc, #444]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a6e      	ldr	r2, [pc, #440]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e00b      	b.n	80034fc <HAL_RCC_OscConfig+0xd4>
 80034e4:	4b6b      	ldr	r3, [pc, #428]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6a      	ldr	r2, [pc, #424]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b68      	ldr	r3, [pc, #416]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a67      	ldr	r2, [pc, #412]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe f880 	bl	8001608 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe f87c 	bl	8001608 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e200      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	4b5d      	ldr	r3, [pc, #372]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0xe4>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe f86c 	bl	8001608 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe f868 	bl	8001608 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e1ec      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003546:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x10c>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d063      	beq.n	800362a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003562:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800356e:	4b49      	ldr	r3, [pc, #292]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b08      	cmp	r3, #8
 8003578:	d11c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x18c>
 800357a:	4b46      	ldr	r3, [pc, #280]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d116      	bne.n	80035b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003586:	4b43      	ldr	r3, [pc, #268]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_RCC_OscConfig+0x176>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e1c0      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4939      	ldr	r1, [pc, #228]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b2:	e03a      	b.n	800362a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d020      	beq.n	80035fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035bc:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_RCC_OscConfig+0x270>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe f821 	bl	8001608 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ca:	f7fe f81d 	bl	8001608 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e1a1      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4927      	ldr	r1, [pc, #156]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]
 80035fc:	e015      	b.n	800362a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fe:	4b26      	ldr	r3, [pc, #152]	; (8003698 <HAL_RCC_OscConfig+0x270>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe f800 	bl	8001608 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360c:	f7fd fffc 	bl	8001608 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e180      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d03a      	beq.n	80036ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d019      	beq.n	8003672 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363e:	4b17      	ldr	r3, [pc, #92]	; (800369c <HAL_RCC_OscConfig+0x274>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003644:	f7fd ffe0 	bl	8001608 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364c:	f7fd ffdc 	bl	8001608 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e160      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800366a:	2001      	movs	r0, #1
 800366c:	f000 face 	bl	8003c0c <RCC_Delay>
 8003670:	e01c      	b.n	80036ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <HAL_RCC_OscConfig+0x274>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003678:	f7fd ffc6 	bl	8001608 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367e:	e00f      	b.n	80036a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003680:	f7fd ffc2 	bl	8001608 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d908      	bls.n	80036a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e146      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	42420000 	.word	0x42420000
 800369c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	4b92      	ldr	r3, [pc, #584]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e9      	bne.n	8003680 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a6 	beq.w	8003806 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b8b      	ldr	r3, [pc, #556]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b88      	ldr	r3, [pc, #544]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	4a87      	ldr	r2, [pc, #540]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	61d3      	str	r3, [r2, #28]
 80036d6:	4b85      	ldr	r3, [pc, #532]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b82      	ldr	r3, [pc, #520]	; (80038f0 <HAL_RCC_OscConfig+0x4c8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d118      	bne.n	8003724 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f2:	4b7f      	ldr	r3, [pc, #508]	; (80038f0 <HAL_RCC_OscConfig+0x4c8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7e      	ldr	r2, [pc, #504]	; (80038f0 <HAL_RCC_OscConfig+0x4c8>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7fd ff83 	bl	8001608 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003706:	f7fd ff7f 	bl	8001608 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b64      	cmp	r3, #100	; 0x64
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e103      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	4b75      	ldr	r3, [pc, #468]	; (80038f0 <HAL_RCC_OscConfig+0x4c8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x312>
 800372c:	4b6f      	ldr	r3, [pc, #444]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4a6e      	ldr	r2, [pc, #440]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6213      	str	r3, [r2, #32]
 8003738:	e02d      	b.n	8003796 <HAL_RCC_OscConfig+0x36e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x334>
 8003742:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4a69      	ldr	r2, [pc, #420]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6213      	str	r3, [r2, #32]
 800374e:	4b67      	ldr	r3, [pc, #412]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	4a66      	ldr	r2, [pc, #408]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	6213      	str	r3, [r2, #32]
 800375a:	e01c      	b.n	8003796 <HAL_RCC_OscConfig+0x36e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d10c      	bne.n	800377e <HAL_RCC_OscConfig+0x356>
 8003764:	4b61      	ldr	r3, [pc, #388]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a60      	ldr	r2, [pc, #384]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6213      	str	r3, [r2, #32]
 8003770:	4b5e      	ldr	r3, [pc, #376]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4a5d      	ldr	r2, [pc, #372]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6213      	str	r3, [r2, #32]
 800377c:	e00b      	b.n	8003796 <HAL_RCC_OscConfig+0x36e>
 800377e:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4a5a      	ldr	r2, [pc, #360]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6213      	str	r3, [r2, #32]
 800378a:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	4a57      	ldr	r2, [pc, #348]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d015      	beq.n	80037ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379e:	f7fd ff33 	bl	8001608 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fd ff2f 	bl	8001608 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0b1      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	4b4b      	ldr	r3, [pc, #300]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ee      	beq.n	80037a6 <HAL_RCC_OscConfig+0x37e>
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ca:	f7fd ff1d 	bl	8001608 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fd ff19 	bl	8001608 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e09b      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e8:	4b40      	ldr	r3, [pc, #256]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ee      	bne.n	80037d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b3c      	ldr	r3, [pc, #240]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	4a3b      	ldr	r2, [pc, #236]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003804:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8087 	beq.w	800391e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003810:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d061      	beq.n	80038e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d146      	bne.n	80038b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003824:	4b33      	ldr	r3, [pc, #204]	; (80038f4 <HAL_RCC_OscConfig+0x4cc>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fd feed 	bl	8001608 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003832:	f7fd fee9 	bl	8001608 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e06d      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003844:	4b29      	ldr	r3, [pc, #164]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f0      	bne.n	8003832 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d108      	bne.n	800386c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	4921      	ldr	r1, [pc, #132]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800386c:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a19      	ldr	r1, [r3, #32]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	430b      	orrs	r3, r1
 800387e:	491b      	ldr	r1, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_RCC_OscConfig+0x4cc>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7fd febd 	bl	8001608 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003892:	f7fd feb9 	bl	8001608 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e03d      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x46a>
 80038b0:	e035      	b.n	800391e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_RCC_OscConfig+0x4cc>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fd fea6 	bl	8001608 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fd fea2 	bl	8001608 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e026      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x498>
 80038de:	e01e      	b.n	800391e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d107      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e019      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40007000 	.word	0x40007000
 80038f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_OscConfig+0x500>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	429a      	cmp	r2, r3
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d001      	beq.n	800391e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000

0800392c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0d0      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d910      	bls.n	8003970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b67      	ldr	r3, [pc, #412]	; (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0207 	bic.w	r2, r3, #7
 8003956:	4965      	ldr	r1, [pc, #404]	; (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b63      	ldr	r3, [pc, #396]	; (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0b8      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003988:	4b59      	ldr	r3, [pc, #356]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a58      	ldr	r2, [pc, #352]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003992:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a0:	4b53      	ldr	r3, [pc, #332]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a52      	ldr	r2, [pc, #328]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ac:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	494d      	ldr	r1, [pc, #308]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d040      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d115      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e07f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ea:	4b41      	ldr	r3, [pc, #260]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e073      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fa:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e06b      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a0a:	4b39      	ldr	r3, [pc, #228]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4936      	ldr	r1, [pc, #216]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a1c:	f7fd fdf4 	bl	8001608 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a24:	f7fd fdf0 	bl	8001608 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e053      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	4b2d      	ldr	r3, [pc, #180]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 020c 	and.w	r2, r3, #12
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d1eb      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b27      	ldr	r3, [pc, #156]	; (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d210      	bcs.n	8003a7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 0207 	bic.w	r2, r3, #7
 8003a62:	4922      	ldr	r1, [pc, #136]	; (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e032      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4916      	ldr	r1, [pc, #88]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	490e      	ldr	r1, [pc, #56]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aba:	f000 f821 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	490a      	ldr	r1, [pc, #40]	; (8003af4 <HAL_RCC_ClockConfig+0x1c8>)
 8003acc:	5ccb      	ldrb	r3, [r1, r3]
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x1d0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd fd52 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40021000 	.word	0x40021000
 8003af4:	080054f4 	.word	0x080054f4
 8003af8:	20000000 	.word	0x20000000
 8003afc:	20000004 	.word	0x20000004

08003b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d002      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x30>
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0x36>
 8003b2e:	e027      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b32:	613b      	str	r3, [r7, #16]
      break;
 8003b34:	e027      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	0c9b      	lsrs	r3, r3, #18
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b40:	5cd3      	ldrb	r3, [r2, r3]
 8003b42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	0c5b      	lsrs	r3, r3, #17
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b5a:	5cd3      	ldrb	r3, [r2, r3]
 8003b5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b62:	fb03 f202 	mul.w	r2, r3, r2
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e004      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a0c      	ldr	r2, [pc, #48]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	613b      	str	r3, [r7, #16]
      break;
 8003b7e:	e002      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b82:	613b      	str	r3, [r7, #16]
      break;
 8003b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b86:	693b      	ldr	r3, [r7, #16]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	007a1200 	.word	0x007a1200
 8003b9c:	0800550c 	.word	0x0800550c
 8003ba0:	0800551c 	.word	0x0800551c
 8003ba4:	003d0900 	.word	0x003d0900

08003ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bac:	4b02      	ldr	r3, [pc, #8]	; (8003bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	20000000 	.word	0x20000000

08003bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc0:	f7ff fff2 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4903      	ldr	r1, [pc, #12]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	08005504 	.word	0x08005504

08003be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be8:	f7ff ffde 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	0adb      	lsrs	r3, r3, #11
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4903      	ldr	r1, [pc, #12]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08005504 	.word	0x08005504

08003c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <RCC_Delay+0x34>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <RCC_Delay+0x38>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	0a5b      	lsrs	r3, r3, #9
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c28:	bf00      	nop
  }
  while (Delay --);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	60fa      	str	r2, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f9      	bne.n	8003c28 <RCC_Delay+0x1c>
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	20000000 	.word	0x20000000
 8003c44:	10624dd3 	.word	0x10624dd3

08003c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d07d      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c68:	4b4f      	ldr	r3, [pc, #316]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c74:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	4a4b      	ldr	r2, [pc, #300]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	61d3      	str	r3, [r2, #28]
 8003c80:	4b49      	ldr	r3, [pc, #292]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	4b46      	ldr	r3, [pc, #280]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d118      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9c:	4b43      	ldr	r3, [pc, #268]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a42      	ldr	r2, [pc, #264]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fcae 	bl	8001608 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cae:	e008      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb0:	f7fd fcaa 	bl	8001608 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e06d      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b3a      	ldr	r3, [pc, #232]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cce:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d02e      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d027      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cec:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf6:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d02:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d014      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fd fc79 	bl	8001608 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fd fc75 	bl	8001608 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e036      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ee      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4917      	ldr	r1, [pc, #92]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	490b      	ldr	r1, [pc, #44]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4904      	ldr	r1, [pc, #16]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40007000 	.word	0x40007000
 8003db0:	42420440 	.word	0x42420440

08003db4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	f200 808a 	bhi.w	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d045      	beq.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d075      	beq.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003dea:	e082      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003dec:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003df2:	4b45      	ldr	r3, [pc, #276]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d07b      	beq.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	0c9b      	lsrs	r3, r3, #18
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	4a41      	ldr	r2, [pc, #260]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003e08:	5cd3      	ldrb	r3, [r2, r3]
 8003e0a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d015      	beq.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e16:	4b3c      	ldr	r3, [pc, #240]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	0c5b      	lsrs	r3, r3, #17
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	4a3b      	ldr	r2, [pc, #236]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003e22:	5cd3      	ldrb	r3, [r2, r3]
 8003e24:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e30:	4a38      	ldr	r2, [pc, #224]	; (8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	e004      	b.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4a34      	ldr	r2, [pc, #208]	; (8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e4c:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e58:	d102      	bne.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	61bb      	str	r3, [r7, #24]
      break;
 8003e5e:	e04a      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]
      break;
 8003e6e:	e042      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e80:	d108      	bne.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	e01f      	b.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9e:	d109      	bne.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003eac:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e00f      	b.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ebe:	d11c      	bne.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d016      	beq.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003ecc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ed0:	61bb      	str	r3, [r7, #24]
      break;
 8003ed2:	e012      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ed4:	e011      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ed6:	f7ff fe85 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	0b9b      	lsrs	r3, r3, #14
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	61bb      	str	r3, [r7, #24]
      break;
 8003ef0:	e004      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003efa:	bf00      	nop
    }
  }
  return (frequency);
 8003efc:	69bb      	ldr	r3, [r7, #24]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	08005520 	.word	0x08005520
 8003f10:	08005530 	.word	0x08005530
 8003f14:	007a1200 	.word	0x007a1200
 8003f18:	003d0900 	.word	0x003d0900
 8003f1c:	aaaaaaab 	.word	0xaaaaaaab

08003f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e042      	b.n	8003fb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fd f9dc 	bl	8001304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2224      	movs	r2, #36	; 0x24
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fd71 	bl	8004a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	; 0x28
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d16d      	bne.n	80040bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_UART_Transmit+0x2c>
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e066      	b.n	80040be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2221      	movs	r2, #33	; 0x21
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ffe:	f7fd fb03 	bl	8001608 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d108      	bne.n	800402c <HAL_UART_Transmit+0x6c>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e003      	b.n	8004034 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004034:	e02a      	b.n	800408c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 faf9 	bl	8004638 <UART_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e036      	b.n	80040be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004064:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	3302      	adds	r3, #2
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e007      	b.n	800407e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	3301      	adds	r3, #1
 800407c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1cf      	bne.n	8004036 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	2140      	movs	r1, #64	; 0x40
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fac9 	bl	8004638 <UART_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e006      	b.n	80040be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e000      	b.n	80040be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
  }
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b0ba      	sub	sp, #232	; 0xe8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10f      	bne.n	800412e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <HAL_UART_IRQHandler+0x66>
 800411a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fbd1 	bl	80048ce <UART_Receive_IT>
      return;
 800412c:	e25b      	b.n	80045e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800412e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80de 	beq.w	80042f4 <HAL_UART_IRQHandler+0x22c>
 8004138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004148:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80d1 	beq.w	80042f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_UART_IRQHandler+0xae>
 800415e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <HAL_UART_IRQHandler+0xd2>
 8004182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f043 0202 	orr.w	r2, r3, #2
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800419a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_UART_IRQHandler+0xf6>
 80041a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d011      	beq.n	80041ee <HAL_UART_IRQHandler+0x126>
 80041ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	f043 0208 	orr.w	r2, r3, #8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 81f2 	beq.w	80045dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_UART_IRQHandler+0x14e>
 8004204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fb5c 	bl	80048ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d103      	bne.n	8004242 <HAL_UART_IRQHandler+0x17a>
 800423a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d04f      	beq.n	80042e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fa66 	bl	8004714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d041      	beq.n	80042da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3314      	adds	r3, #20
 800425c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800426c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004282:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800428e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800429a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1d9      	bne.n	8004256 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d013      	beq.n	80042d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	4a7e      	ldr	r2, [pc, #504]	; (80044a8 <HAL_UART_IRQHandler+0x3e0>)
 80042b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fe f820 	bl	80022fc <HAL_DMA_Abort_IT>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042cc:	4610      	mov	r0, r2
 80042ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	e00e      	b.n	80042f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f99c 	bl	8004610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	e00a      	b.n	80042f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f998 	bl	8004610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e0:	e006      	b.n	80042f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f994 	bl	8004610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80042ee:	e175      	b.n	80045dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	bf00      	nop
    return;
 80042f2:	e173      	b.n	80045dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	f040 814f 	bne.w	800459c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8148 	beq.w	800459c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8141 	beq.w	800459c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80b6 	beq.w	80044ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800434c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8145 	beq.w	80045e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800435a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800435e:	429a      	cmp	r2, r3
 8004360:	f080 813e 	bcs.w	80045e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800436a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b20      	cmp	r3, #32
 8004374:	f000 8088 	beq.w	8004488 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800438e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1d9      	bne.n	8004378 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3314      	adds	r3, #20
 80043ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3314      	adds	r3, #20
 80043e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e1      	bne.n	80043c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004424:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004426:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800442a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e3      	bne.n	8004400 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800446a:	65ba      	str	r2, [r7, #88]	; 0x58
 800446c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e3      	bne.n	8004446 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd feff 	bl	8002286 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004496:	b29b      	uxth	r3, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	b29b      	uxth	r3, r3
 800449c:	4619      	mov	r1, r3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f8bf 	bl	8004622 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a4:	e09c      	b.n	80045e0 <HAL_UART_IRQHandler+0x518>
 80044a6:	bf00      	nop
 80044a8:	080047d9 	.word	0x080047d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 808e 	beq.w	80045e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8089 	beq.w	80045e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044f6:	647a      	str	r2, [r7, #68]	; 0x44
 80044f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e3      	bne.n	80044d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	623b      	str	r3, [r7, #32]
   return(result);
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3314      	adds	r3, #20
 800452a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800452e:	633a      	str	r2, [r7, #48]	; 0x30
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e3      	bne.n	800450a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	330c      	adds	r3, #12
 8004556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0310 	bic.w	r3, r3, #16
 8004566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004574:	61fa      	str	r2, [r7, #28]
 8004576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	617b      	str	r3, [r7, #20]
   return(result);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e3      	bne.n	8004550 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800458e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f844 	bl	8004622 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800459a:	e023      	b.n	80045e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800459c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <HAL_UART_IRQHandler+0x4f4>
 80045a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f923 	bl	8004800 <UART_Transmit_IT>
    return;
 80045ba:	e014      	b.n	80045e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00e      	beq.n	80045e6 <HAL_UART_IRQHandler+0x51e>
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f962 	bl	800489e <UART_EndTransmit_IT>
    return;
 80045da:	e004      	b.n	80045e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80045dc:	bf00      	nop
 80045de:	e002      	b.n	80045e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80045e0:	bf00      	nop
 80045e2:	e000      	b.n	80045e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80045e4:	bf00      	nop
  }
}
 80045e6:	37e8      	adds	r7, #232	; 0xe8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr

080045fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	460b      	mov	r3, r1
 800462c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b090      	sub	sp, #64	; 0x40
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004648:	e050      	b.n	80046ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d04c      	beq.n	80046ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <UART_WaitOnFlagUntilTimeout+0x30>
 8004658:	f7fc ffd6 	bl	8001608 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004664:	429a      	cmp	r2, r3
 8004666:	d241      	bcs.n	80046ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800467e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	330c      	adds	r3, #12
 8004686:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004688:	637a      	str	r2, [r7, #52]	; 0x34
 800468a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800468e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3314      	adds	r3, #20
 80046a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	613b      	str	r3, [r7, #16]
   return(result);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046bc:	623a      	str	r2, [r7, #32]
 80046be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	69f9      	ldr	r1, [r7, #28]
 80046c2:	6a3a      	ldr	r2, [r7, #32]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e00f      	b.n	800470c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4013      	ands	r3, r2
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	429a      	cmp	r2, r3
 8004708:	d09f      	beq.n	800464a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3740      	adds	r7, #64	; 0x40
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004714:	b480      	push	{r7}
 8004716:	b095      	sub	sp, #84	; 0x54
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800473c:	643a      	str	r2, [r7, #64]	; 0x40
 800473e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e5      	bne.n	800471c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3314      	adds	r3, #20
 8004756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	64bb      	str	r3, [r7, #72]	; 0x48
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3314      	adds	r3, #20
 800476e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004770:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e5      	bne.n	8004750 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	2b01      	cmp	r3, #1
 800478a:	d119      	bne.n	80047c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	330c      	adds	r3, #12
 8004792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	60bb      	str	r3, [r7, #8]
   return(result);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f023 0310 	bic.w	r3, r3, #16
 80047a2:	647b      	str	r3, [r7, #68]	; 0x44
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	330c      	adds	r3, #12
 80047aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ac:	61ba      	str	r2, [r7, #24]
 80047ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6979      	ldr	r1, [r7, #20]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e5      	bne.n	800478c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047ce:	bf00      	nop
 80047d0:	3754      	adds	r7, #84	; 0x54
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff ff0c 	bl	8004610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b21      	cmp	r3, #33	; 0x21
 8004812:	d13e      	bne.n	8004892 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481c:	d114      	bne.n	8004848 <UART_Transmit_IT+0x48>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d110      	bne.n	8004848 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	1c9a      	adds	r2, r3, #2
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	621a      	str	r2, [r3, #32]
 8004846:	e008      	b.n	800485a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	1c59      	adds	r1, r3, #1
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6211      	str	r1, [r2, #32]
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29b      	uxth	r3, r3
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	4619      	mov	r1, r3
 8004868:	84d1      	strh	r1, [r2, #38]	; 0x26
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800487c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800488c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr

0800489e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff fe94 	bl	80045ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b08c      	sub	sp, #48	; 0x30
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b22      	cmp	r3, #34	; 0x22
 80048e0:	f040 80ae 	bne.w	8004a40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ec:	d117      	bne.n	800491e <UART_Receive_IT+0x50>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d113      	bne.n	800491e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490c:	b29a      	uxth	r2, r3
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	1c9a      	adds	r2, r3, #2
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28
 800491c:	e026      	b.n	800496c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004924:	2300      	movs	r3, #0
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d007      	beq.n	8004942 <UART_Receive_IT+0x74>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <UART_Receive_IT+0x82>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	e008      	b.n	8004962 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800495c:	b2da      	uxtb	r2, r3
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29b      	uxth	r3, r3
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	4619      	mov	r1, r3
 800497a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800497c:	2b00      	cmp	r3, #0
 800497e:	d15d      	bne.n	8004a3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0220 	bic.w	r2, r2, #32
 800498e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800499e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d135      	bne.n	8004a32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	613b      	str	r3, [r7, #16]
   return(result);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f023 0310 	bic.w	r3, r3, #16
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	330c      	adds	r3, #12
 80049ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ec:	623a      	str	r2, [r7, #32]
 80049ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	69f9      	ldr	r1, [r7, #28]
 80049f2:	6a3a      	ldr	r2, [r7, #32]
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d10a      	bne.n	8004a24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff fdf9 	bl	8004622 <HAL_UARTEx_RxEventCallback>
 8004a30:	e002      	b.n	8004a38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff fde3 	bl	80045fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e002      	b.n	8004a42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e000      	b.n	8004a42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a40:	2302      	movs	r3, #2
  }
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3730      	adds	r7, #48	; 0x30
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a86:	f023 030c 	bic.w	r3, r3, #12
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	430b      	orrs	r3, r1
 8004a92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <UART_SetConfig+0x114>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d103      	bne.n	8004abc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ab4:	f7ff f896 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	e002      	b.n	8004ac2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004abc:	f7ff f87e 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 8004ac0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	4a22      	ldr	r2, [pc, #136]	; (8004b64 <UART_SetConfig+0x118>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	0119      	lsls	r1, r3, #4
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	009a      	lsls	r2, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af8:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <UART_SetConfig+0x118>)
 8004afa:	fba3 0302 	umull	r0, r3, r3, r2
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2064      	movs	r0, #100	; 0x64
 8004b02:	fb00 f303 	mul.w	r3, r0, r3
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	3332      	adds	r3, #50	; 0x32
 8004b0c:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <UART_SetConfig+0x118>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b18:	4419      	add	r1, r3
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009a      	lsls	r2, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b30:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <UART_SetConfig+0x118>)
 8004b32:	fba3 0302 	umull	r0, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2064      	movs	r0, #100	; 0x64
 8004b3a:	fb00 f303 	mul.w	r3, r0, r3
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	3332      	adds	r3, #50	; 0x32
 8004b44:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <UART_SetConfig+0x118>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f003 020f 	and.w	r2, r3, #15
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	440a      	add	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40013800 	.word	0x40013800
 8004b64:	51eb851f 	.word	0x51eb851f

08004b68 <__errno>:
 8004b68:	4b01      	ldr	r3, [pc, #4]	; (8004b70 <__errno+0x8>)
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	2000000c 	.word	0x2000000c

08004b74 <__libc_init_array>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	2600      	movs	r6, #0
 8004b78:	4d0c      	ldr	r5, [pc, #48]	; (8004bac <__libc_init_array+0x38>)
 8004b7a:	4c0d      	ldr	r4, [pc, #52]	; (8004bb0 <__libc_init_array+0x3c>)
 8004b7c:	1b64      	subs	r4, r4, r5
 8004b7e:	10a4      	asrs	r4, r4, #2
 8004b80:	42a6      	cmp	r6, r4
 8004b82:	d109      	bne.n	8004b98 <__libc_init_array+0x24>
 8004b84:	f000 fc9c 	bl	80054c0 <_init>
 8004b88:	2600      	movs	r6, #0
 8004b8a:	4d0a      	ldr	r5, [pc, #40]	; (8004bb4 <__libc_init_array+0x40>)
 8004b8c:	4c0a      	ldr	r4, [pc, #40]	; (8004bb8 <__libc_init_array+0x44>)
 8004b8e:	1b64      	subs	r4, r4, r5
 8004b90:	10a4      	asrs	r4, r4, #2
 8004b92:	42a6      	cmp	r6, r4
 8004b94:	d105      	bne.n	8004ba2 <__libc_init_array+0x2e>
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9c:	4798      	blx	r3
 8004b9e:	3601      	adds	r6, #1
 8004ba0:	e7ee      	b.n	8004b80 <__libc_init_array+0xc>
 8004ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba6:	4798      	blx	r3
 8004ba8:	3601      	adds	r6, #1
 8004baa:	e7f2      	b.n	8004b92 <__libc_init_array+0x1e>
 8004bac:	08005568 	.word	0x08005568
 8004bb0:	08005568 	.word	0x08005568
 8004bb4:	08005568 	.word	0x08005568
 8004bb8:	0800556c 	.word	0x0800556c

08004bbc <memset>:
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4402      	add	r2, r0
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d100      	bne.n	8004bc6 <memset+0xa>
 8004bc4:	4770      	bx	lr
 8004bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bca:	e7f9      	b.n	8004bc0 <memset+0x4>

08004bcc <siprintf>:
 8004bcc:	b40e      	push	{r1, r2, r3}
 8004bce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bd2:	b500      	push	{lr}
 8004bd4:	b09c      	sub	sp, #112	; 0x70
 8004bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8004bd8:	9002      	str	r0, [sp, #8]
 8004bda:	9006      	str	r0, [sp, #24]
 8004bdc:	9107      	str	r1, [sp, #28]
 8004bde:	9104      	str	r1, [sp, #16]
 8004be0:	4808      	ldr	r0, [pc, #32]	; (8004c04 <siprintf+0x38>)
 8004be2:	4909      	ldr	r1, [pc, #36]	; (8004c08 <siprintf+0x3c>)
 8004be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004be8:	9105      	str	r1, [sp, #20]
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	a902      	add	r1, sp, #8
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	f000 f868 	bl	8004cc4 <_svfiprintf_r>
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	9b02      	ldr	r3, [sp, #8]
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	b01c      	add	sp, #112	; 0x70
 8004bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c00:	b003      	add	sp, #12
 8004c02:	4770      	bx	lr
 8004c04:	2000000c 	.word	0x2000000c
 8004c08:	ffff0208 	.word	0xffff0208

08004c0c <__ssputs_r>:
 8004c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c10:	688e      	ldr	r6, [r1, #8]
 8004c12:	4682      	mov	sl, r0
 8004c14:	429e      	cmp	r6, r3
 8004c16:	460c      	mov	r4, r1
 8004c18:	4690      	mov	r8, r2
 8004c1a:	461f      	mov	r7, r3
 8004c1c:	d838      	bhi.n	8004c90 <__ssputs_r+0x84>
 8004c1e:	898a      	ldrh	r2, [r1, #12]
 8004c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c24:	d032      	beq.n	8004c8c <__ssputs_r+0x80>
 8004c26:	6825      	ldr	r5, [r4, #0]
 8004c28:	6909      	ldr	r1, [r1, #16]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	eba5 0901 	sub.w	r9, r5, r1
 8004c30:	6965      	ldr	r5, [r4, #20]
 8004c32:	444b      	add	r3, r9
 8004c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c3c:	106d      	asrs	r5, r5, #1
 8004c3e:	429d      	cmp	r5, r3
 8004c40:	bf38      	it	cc
 8004c42:	461d      	movcc	r5, r3
 8004c44:	0553      	lsls	r3, r2, #21
 8004c46:	d531      	bpl.n	8004cac <__ssputs_r+0xa0>
 8004c48:	4629      	mov	r1, r5
 8004c4a:	f000 fb6f 	bl	800532c <_malloc_r>
 8004c4e:	4606      	mov	r6, r0
 8004c50:	b950      	cbnz	r0, 8004c68 <__ssputs_r+0x5c>
 8004c52:	230c      	movs	r3, #12
 8004c54:	f04f 30ff 	mov.w	r0, #4294967295
 8004c58:	f8ca 3000 	str.w	r3, [sl]
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c62:	81a3      	strh	r3, [r4, #12]
 8004c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c68:	464a      	mov	r2, r9
 8004c6a:	6921      	ldr	r1, [r4, #16]
 8004c6c:	f000 face 	bl	800520c <memcpy>
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7a:	81a3      	strh	r3, [r4, #12]
 8004c7c:	6126      	str	r6, [r4, #16]
 8004c7e:	444e      	add	r6, r9
 8004c80:	6026      	str	r6, [r4, #0]
 8004c82:	463e      	mov	r6, r7
 8004c84:	6165      	str	r5, [r4, #20]
 8004c86:	eba5 0509 	sub.w	r5, r5, r9
 8004c8a:	60a5      	str	r5, [r4, #8]
 8004c8c:	42be      	cmp	r6, r7
 8004c8e:	d900      	bls.n	8004c92 <__ssputs_r+0x86>
 8004c90:	463e      	mov	r6, r7
 8004c92:	4632      	mov	r2, r6
 8004c94:	4641      	mov	r1, r8
 8004c96:	6820      	ldr	r0, [r4, #0]
 8004c98:	f000 fac6 	bl	8005228 <memmove>
 8004c9c:	68a3      	ldr	r3, [r4, #8]
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	1b9b      	subs	r3, r3, r6
 8004ca2:	60a3      	str	r3, [r4, #8]
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	4433      	add	r3, r6
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	e7db      	b.n	8004c64 <__ssputs_r+0x58>
 8004cac:	462a      	mov	r2, r5
 8004cae:	f000 fbb1 	bl	8005414 <_realloc_r>
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d1e1      	bne.n	8004c7c <__ssputs_r+0x70>
 8004cb8:	4650      	mov	r0, sl
 8004cba:	6921      	ldr	r1, [r4, #16]
 8004cbc:	f000 face 	bl	800525c <_free_r>
 8004cc0:	e7c7      	b.n	8004c52 <__ssputs_r+0x46>
	...

08004cc4 <_svfiprintf_r>:
 8004cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc8:	4698      	mov	r8, r3
 8004cca:	898b      	ldrh	r3, [r1, #12]
 8004ccc:	4607      	mov	r7, r0
 8004cce:	061b      	lsls	r3, r3, #24
 8004cd0:	460d      	mov	r5, r1
 8004cd2:	4614      	mov	r4, r2
 8004cd4:	b09d      	sub	sp, #116	; 0x74
 8004cd6:	d50e      	bpl.n	8004cf6 <_svfiprintf_r+0x32>
 8004cd8:	690b      	ldr	r3, [r1, #16]
 8004cda:	b963      	cbnz	r3, 8004cf6 <_svfiprintf_r+0x32>
 8004cdc:	2140      	movs	r1, #64	; 0x40
 8004cde:	f000 fb25 	bl	800532c <_malloc_r>
 8004ce2:	6028      	str	r0, [r5, #0]
 8004ce4:	6128      	str	r0, [r5, #16]
 8004ce6:	b920      	cbnz	r0, 8004cf2 <_svfiprintf_r+0x2e>
 8004ce8:	230c      	movs	r3, #12
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	e0d1      	b.n	8004e96 <_svfiprintf_r+0x1d2>
 8004cf2:	2340      	movs	r3, #64	; 0x40
 8004cf4:	616b      	str	r3, [r5, #20]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cfa:	2320      	movs	r3, #32
 8004cfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d00:	2330      	movs	r3, #48	; 0x30
 8004d02:	f04f 0901 	mov.w	r9, #1
 8004d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004eb0 <_svfiprintf_r+0x1ec>
 8004d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d12:	4623      	mov	r3, r4
 8004d14:	469a      	mov	sl, r3
 8004d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d1a:	b10a      	cbz	r2, 8004d20 <_svfiprintf_r+0x5c>
 8004d1c:	2a25      	cmp	r2, #37	; 0x25
 8004d1e:	d1f9      	bne.n	8004d14 <_svfiprintf_r+0x50>
 8004d20:	ebba 0b04 	subs.w	fp, sl, r4
 8004d24:	d00b      	beq.n	8004d3e <_svfiprintf_r+0x7a>
 8004d26:	465b      	mov	r3, fp
 8004d28:	4622      	mov	r2, r4
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	f7ff ff6d 	bl	8004c0c <__ssputs_r>
 8004d32:	3001      	adds	r0, #1
 8004d34:	f000 80aa 	beq.w	8004e8c <_svfiprintf_r+0x1c8>
 8004d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d3a:	445a      	add	r2, fp
 8004d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 80a2 	beq.w	8004e8c <_svfiprintf_r+0x1c8>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d52:	f10a 0a01 	add.w	sl, sl, #1
 8004d56:	9304      	str	r3, [sp, #16]
 8004d58:	9307      	str	r3, [sp, #28]
 8004d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d60:	4654      	mov	r4, sl
 8004d62:	2205      	movs	r2, #5
 8004d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d68:	4851      	ldr	r0, [pc, #324]	; (8004eb0 <_svfiprintf_r+0x1ec>)
 8004d6a:	f000 fa41 	bl	80051f0 <memchr>
 8004d6e:	9a04      	ldr	r2, [sp, #16]
 8004d70:	b9d8      	cbnz	r0, 8004daa <_svfiprintf_r+0xe6>
 8004d72:	06d0      	lsls	r0, r2, #27
 8004d74:	bf44      	itt	mi
 8004d76:	2320      	movmi	r3, #32
 8004d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d7c:	0711      	lsls	r1, r2, #28
 8004d7e:	bf44      	itt	mi
 8004d80:	232b      	movmi	r3, #43	; 0x2b
 8004d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d86:	f89a 3000 	ldrb.w	r3, [sl]
 8004d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d8c:	d015      	beq.n	8004dba <_svfiprintf_r+0xf6>
 8004d8e:	4654      	mov	r4, sl
 8004d90:	2000      	movs	r0, #0
 8004d92:	f04f 0c0a 	mov.w	ip, #10
 8004d96:	9a07      	ldr	r2, [sp, #28]
 8004d98:	4621      	mov	r1, r4
 8004d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d9e:	3b30      	subs	r3, #48	; 0x30
 8004da0:	2b09      	cmp	r3, #9
 8004da2:	d94e      	bls.n	8004e42 <_svfiprintf_r+0x17e>
 8004da4:	b1b0      	cbz	r0, 8004dd4 <_svfiprintf_r+0x110>
 8004da6:	9207      	str	r2, [sp, #28]
 8004da8:	e014      	b.n	8004dd4 <_svfiprintf_r+0x110>
 8004daa:	eba0 0308 	sub.w	r3, r0, r8
 8004dae:	fa09 f303 	lsl.w	r3, r9, r3
 8004db2:	4313      	orrs	r3, r2
 8004db4:	46a2      	mov	sl, r4
 8004db6:	9304      	str	r3, [sp, #16]
 8004db8:	e7d2      	b.n	8004d60 <_svfiprintf_r+0x9c>
 8004dba:	9b03      	ldr	r3, [sp, #12]
 8004dbc:	1d19      	adds	r1, r3, #4
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	9103      	str	r1, [sp, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bfbb      	ittet	lt
 8004dc6:	425b      	neglt	r3, r3
 8004dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8004dcc:	9307      	strge	r3, [sp, #28]
 8004dce:	9307      	strlt	r3, [sp, #28]
 8004dd0:	bfb8      	it	lt
 8004dd2:	9204      	strlt	r2, [sp, #16]
 8004dd4:	7823      	ldrb	r3, [r4, #0]
 8004dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8004dd8:	d10c      	bne.n	8004df4 <_svfiprintf_r+0x130>
 8004dda:	7863      	ldrb	r3, [r4, #1]
 8004ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8004dde:	d135      	bne.n	8004e4c <_svfiprintf_r+0x188>
 8004de0:	9b03      	ldr	r3, [sp, #12]
 8004de2:	3402      	adds	r4, #2
 8004de4:	1d1a      	adds	r2, r3, #4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	9203      	str	r2, [sp, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bfb8      	it	lt
 8004dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8004df2:	9305      	str	r3, [sp, #20]
 8004df4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004eb4 <_svfiprintf_r+0x1f0>
 8004df8:	2203      	movs	r2, #3
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	7821      	ldrb	r1, [r4, #0]
 8004dfe:	f000 f9f7 	bl	80051f0 <memchr>
 8004e02:	b140      	cbz	r0, 8004e16 <_svfiprintf_r+0x152>
 8004e04:	2340      	movs	r3, #64	; 0x40
 8004e06:	eba0 000a 	sub.w	r0, r0, sl
 8004e0a:	fa03 f000 	lsl.w	r0, r3, r0
 8004e0e:	9b04      	ldr	r3, [sp, #16]
 8004e10:	3401      	adds	r4, #1
 8004e12:	4303      	orrs	r3, r0
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e1a:	2206      	movs	r2, #6
 8004e1c:	4826      	ldr	r0, [pc, #152]	; (8004eb8 <_svfiprintf_r+0x1f4>)
 8004e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e22:	f000 f9e5 	bl	80051f0 <memchr>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d038      	beq.n	8004e9c <_svfiprintf_r+0x1d8>
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <_svfiprintf_r+0x1f8>)
 8004e2c:	bb1b      	cbnz	r3, 8004e76 <_svfiprintf_r+0x1b2>
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	3307      	adds	r3, #7
 8004e32:	f023 0307 	bic.w	r3, r3, #7
 8004e36:	3308      	adds	r3, #8
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3c:	4433      	add	r3, r6
 8004e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e40:	e767      	b.n	8004d12 <_svfiprintf_r+0x4e>
 8004e42:	460c      	mov	r4, r1
 8004e44:	2001      	movs	r0, #1
 8004e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e4a:	e7a5      	b.n	8004d98 <_svfiprintf_r+0xd4>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f04f 0c0a 	mov.w	ip, #10
 8004e52:	4619      	mov	r1, r3
 8004e54:	3401      	adds	r4, #1
 8004e56:	9305      	str	r3, [sp, #20]
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e5e:	3a30      	subs	r2, #48	; 0x30
 8004e60:	2a09      	cmp	r2, #9
 8004e62:	d903      	bls.n	8004e6c <_svfiprintf_r+0x1a8>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0c5      	beq.n	8004df4 <_svfiprintf_r+0x130>
 8004e68:	9105      	str	r1, [sp, #20]
 8004e6a:	e7c3      	b.n	8004df4 <_svfiprintf_r+0x130>
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	2301      	movs	r3, #1
 8004e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e74:	e7f0      	b.n	8004e58 <_svfiprintf_r+0x194>
 8004e76:	ab03      	add	r3, sp, #12
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	462a      	mov	r2, r5
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <_svfiprintf_r+0x1fc>)
 8004e80:	a904      	add	r1, sp, #16
 8004e82:	f3af 8000 	nop.w
 8004e86:	1c42      	adds	r2, r0, #1
 8004e88:	4606      	mov	r6, r0
 8004e8a:	d1d6      	bne.n	8004e3a <_svfiprintf_r+0x176>
 8004e8c:	89ab      	ldrh	r3, [r5, #12]
 8004e8e:	065b      	lsls	r3, r3, #25
 8004e90:	f53f af2c 	bmi.w	8004cec <_svfiprintf_r+0x28>
 8004e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e96:	b01d      	add	sp, #116	; 0x74
 8004e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9c:	ab03      	add	r3, sp, #12
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	462a      	mov	r2, r5
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <_svfiprintf_r+0x1fc>)
 8004ea6:	a904      	add	r1, sp, #16
 8004ea8:	f000 f87c 	bl	8004fa4 <_printf_i>
 8004eac:	e7eb      	b.n	8004e86 <_svfiprintf_r+0x1c2>
 8004eae:	bf00      	nop
 8004eb0:	08005532 	.word	0x08005532
 8004eb4:	08005538 	.word	0x08005538
 8004eb8:	0800553c 	.word	0x0800553c
 8004ebc:	00000000 	.word	0x00000000
 8004ec0:	08004c0d 	.word	0x08004c0d

08004ec4 <_printf_common>:
 8004ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec8:	4616      	mov	r6, r2
 8004eca:	4699      	mov	r9, r3
 8004ecc:	688a      	ldr	r2, [r1, #8]
 8004ece:	690b      	ldr	r3, [r1, #16]
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	bfb8      	it	lt
 8004ed6:	4613      	movlt	r3, r2
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ede:	460c      	mov	r4, r1
 8004ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee4:	b10a      	cbz	r2, 8004eea <_printf_common+0x26>
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	6033      	str	r3, [r6, #0]
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	0699      	lsls	r1, r3, #26
 8004eee:	bf42      	ittt	mi
 8004ef0:	6833      	ldrmi	r3, [r6, #0]
 8004ef2:	3302      	addmi	r3, #2
 8004ef4:	6033      	strmi	r3, [r6, #0]
 8004ef6:	6825      	ldr	r5, [r4, #0]
 8004ef8:	f015 0506 	ands.w	r5, r5, #6
 8004efc:	d106      	bne.n	8004f0c <_printf_common+0x48>
 8004efe:	f104 0a19 	add.w	sl, r4, #25
 8004f02:	68e3      	ldr	r3, [r4, #12]
 8004f04:	6832      	ldr	r2, [r6, #0]
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	42ab      	cmp	r3, r5
 8004f0a:	dc28      	bgt.n	8004f5e <_printf_common+0x9a>
 8004f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f10:	1e13      	subs	r3, r2, #0
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	bf18      	it	ne
 8004f16:	2301      	movne	r3, #1
 8004f18:	0692      	lsls	r2, r2, #26
 8004f1a:	d42d      	bmi.n	8004f78 <_printf_common+0xb4>
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	4638      	mov	r0, r7
 8004f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f24:	47c0      	blx	r8
 8004f26:	3001      	adds	r0, #1
 8004f28:	d020      	beq.n	8004f6c <_printf_common+0xa8>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	68e5      	ldr	r5, [r4, #12]
 8004f2e:	f003 0306 	and.w	r3, r3, #6
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	bf18      	it	ne
 8004f36:	2500      	movne	r5, #0
 8004f38:	6832      	ldr	r2, [r6, #0]
 8004f3a:	f04f 0600 	mov.w	r6, #0
 8004f3e:	68a3      	ldr	r3, [r4, #8]
 8004f40:	bf08      	it	eq
 8004f42:	1aad      	subeq	r5, r5, r2
 8004f44:	6922      	ldr	r2, [r4, #16]
 8004f46:	bf08      	it	eq
 8004f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bfc4      	itt	gt
 8004f50:	1a9b      	subgt	r3, r3, r2
 8004f52:	18ed      	addgt	r5, r5, r3
 8004f54:	341a      	adds	r4, #26
 8004f56:	42b5      	cmp	r5, r6
 8004f58:	d11a      	bne.n	8004f90 <_printf_common+0xcc>
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e008      	b.n	8004f70 <_printf_common+0xac>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4652      	mov	r2, sl
 8004f62:	4649      	mov	r1, r9
 8004f64:	4638      	mov	r0, r7
 8004f66:	47c0      	blx	r8
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d103      	bne.n	8004f74 <_printf_common+0xb0>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f74:	3501      	adds	r5, #1
 8004f76:	e7c4      	b.n	8004f02 <_printf_common+0x3e>
 8004f78:	2030      	movs	r0, #48	; 0x30
 8004f7a:	18e1      	adds	r1, r4, r3
 8004f7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f86:	4422      	add	r2, r4
 8004f88:	3302      	adds	r3, #2
 8004f8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f8e:	e7c5      	b.n	8004f1c <_printf_common+0x58>
 8004f90:	2301      	movs	r3, #1
 8004f92:	4622      	mov	r2, r4
 8004f94:	4649      	mov	r1, r9
 8004f96:	4638      	mov	r0, r7
 8004f98:	47c0      	blx	r8
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d0e6      	beq.n	8004f6c <_printf_common+0xa8>
 8004f9e:	3601      	adds	r6, #1
 8004fa0:	e7d9      	b.n	8004f56 <_printf_common+0x92>
	...

08004fa4 <_printf_i>:
 8004fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa8:	7e0f      	ldrb	r7, [r1, #24]
 8004faa:	4691      	mov	r9, r2
 8004fac:	2f78      	cmp	r7, #120	; 0x78
 8004fae:	4680      	mov	r8, r0
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	469a      	mov	sl, r3
 8004fb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fba:	d807      	bhi.n	8004fcc <_printf_i+0x28>
 8004fbc:	2f62      	cmp	r7, #98	; 0x62
 8004fbe:	d80a      	bhi.n	8004fd6 <_printf_i+0x32>
 8004fc0:	2f00      	cmp	r7, #0
 8004fc2:	f000 80d9 	beq.w	8005178 <_printf_i+0x1d4>
 8004fc6:	2f58      	cmp	r7, #88	; 0x58
 8004fc8:	f000 80a4 	beq.w	8005114 <_printf_i+0x170>
 8004fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fd4:	e03a      	b.n	800504c <_printf_i+0xa8>
 8004fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fda:	2b15      	cmp	r3, #21
 8004fdc:	d8f6      	bhi.n	8004fcc <_printf_i+0x28>
 8004fde:	a101      	add	r1, pc, #4	; (adr r1, 8004fe4 <_printf_i+0x40>)
 8004fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fe4:	0800503d 	.word	0x0800503d
 8004fe8:	08005051 	.word	0x08005051
 8004fec:	08004fcd 	.word	0x08004fcd
 8004ff0:	08004fcd 	.word	0x08004fcd
 8004ff4:	08004fcd 	.word	0x08004fcd
 8004ff8:	08004fcd 	.word	0x08004fcd
 8004ffc:	08005051 	.word	0x08005051
 8005000:	08004fcd 	.word	0x08004fcd
 8005004:	08004fcd 	.word	0x08004fcd
 8005008:	08004fcd 	.word	0x08004fcd
 800500c:	08004fcd 	.word	0x08004fcd
 8005010:	0800515f 	.word	0x0800515f
 8005014:	08005081 	.word	0x08005081
 8005018:	08005141 	.word	0x08005141
 800501c:	08004fcd 	.word	0x08004fcd
 8005020:	08004fcd 	.word	0x08004fcd
 8005024:	08005181 	.word	0x08005181
 8005028:	08004fcd 	.word	0x08004fcd
 800502c:	08005081 	.word	0x08005081
 8005030:	08004fcd 	.word	0x08004fcd
 8005034:	08004fcd 	.word	0x08004fcd
 8005038:	08005149 	.word	0x08005149
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	602a      	str	r2, [r5, #0]
 8005044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800504c:	2301      	movs	r3, #1
 800504e:	e0a4      	b.n	800519a <_printf_i+0x1f6>
 8005050:	6820      	ldr	r0, [r4, #0]
 8005052:	6829      	ldr	r1, [r5, #0]
 8005054:	0606      	lsls	r6, r0, #24
 8005056:	f101 0304 	add.w	r3, r1, #4
 800505a:	d50a      	bpl.n	8005072 <_printf_i+0xce>
 800505c:	680e      	ldr	r6, [r1, #0]
 800505e:	602b      	str	r3, [r5, #0]
 8005060:	2e00      	cmp	r6, #0
 8005062:	da03      	bge.n	800506c <_printf_i+0xc8>
 8005064:	232d      	movs	r3, #45	; 0x2d
 8005066:	4276      	negs	r6, r6
 8005068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800506c:	230a      	movs	r3, #10
 800506e:	485e      	ldr	r0, [pc, #376]	; (80051e8 <_printf_i+0x244>)
 8005070:	e019      	b.n	80050a6 <_printf_i+0x102>
 8005072:	680e      	ldr	r6, [r1, #0]
 8005074:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	bf18      	it	ne
 800507c:	b236      	sxthne	r6, r6
 800507e:	e7ef      	b.n	8005060 <_printf_i+0xbc>
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	6820      	ldr	r0, [r4, #0]
 8005084:	1d19      	adds	r1, r3, #4
 8005086:	6029      	str	r1, [r5, #0]
 8005088:	0601      	lsls	r1, r0, #24
 800508a:	d501      	bpl.n	8005090 <_printf_i+0xec>
 800508c:	681e      	ldr	r6, [r3, #0]
 800508e:	e002      	b.n	8005096 <_printf_i+0xf2>
 8005090:	0646      	lsls	r6, r0, #25
 8005092:	d5fb      	bpl.n	800508c <_printf_i+0xe8>
 8005094:	881e      	ldrh	r6, [r3, #0]
 8005096:	2f6f      	cmp	r7, #111	; 0x6f
 8005098:	bf0c      	ite	eq
 800509a:	2308      	moveq	r3, #8
 800509c:	230a      	movne	r3, #10
 800509e:	4852      	ldr	r0, [pc, #328]	; (80051e8 <_printf_i+0x244>)
 80050a0:	2100      	movs	r1, #0
 80050a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050a6:	6865      	ldr	r5, [r4, #4]
 80050a8:	2d00      	cmp	r5, #0
 80050aa:	bfa8      	it	ge
 80050ac:	6821      	ldrge	r1, [r4, #0]
 80050ae:	60a5      	str	r5, [r4, #8]
 80050b0:	bfa4      	itt	ge
 80050b2:	f021 0104 	bicge.w	r1, r1, #4
 80050b6:	6021      	strge	r1, [r4, #0]
 80050b8:	b90e      	cbnz	r6, 80050be <_printf_i+0x11a>
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	d04d      	beq.n	800515a <_printf_i+0x1b6>
 80050be:	4615      	mov	r5, r2
 80050c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80050c4:	fb03 6711 	mls	r7, r3, r1, r6
 80050c8:	5dc7      	ldrb	r7, [r0, r7]
 80050ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050ce:	4637      	mov	r7, r6
 80050d0:	42bb      	cmp	r3, r7
 80050d2:	460e      	mov	r6, r1
 80050d4:	d9f4      	bls.n	80050c0 <_printf_i+0x11c>
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d10b      	bne.n	80050f2 <_printf_i+0x14e>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	07de      	lsls	r6, r3, #31
 80050de:	d508      	bpl.n	80050f2 <_printf_i+0x14e>
 80050e0:	6923      	ldr	r3, [r4, #16]
 80050e2:	6861      	ldr	r1, [r4, #4]
 80050e4:	4299      	cmp	r1, r3
 80050e6:	bfde      	ittt	le
 80050e8:	2330      	movle	r3, #48	; 0x30
 80050ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050f2:	1b52      	subs	r2, r2, r5
 80050f4:	6122      	str	r2, [r4, #16]
 80050f6:	464b      	mov	r3, r9
 80050f8:	4621      	mov	r1, r4
 80050fa:	4640      	mov	r0, r8
 80050fc:	f8cd a000 	str.w	sl, [sp]
 8005100:	aa03      	add	r2, sp, #12
 8005102:	f7ff fedf 	bl	8004ec4 <_printf_common>
 8005106:	3001      	adds	r0, #1
 8005108:	d14c      	bne.n	80051a4 <_printf_i+0x200>
 800510a:	f04f 30ff 	mov.w	r0, #4294967295
 800510e:	b004      	add	sp, #16
 8005110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005114:	4834      	ldr	r0, [pc, #208]	; (80051e8 <_printf_i+0x244>)
 8005116:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800511a:	6829      	ldr	r1, [r5, #0]
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005122:	6029      	str	r1, [r5, #0]
 8005124:	061d      	lsls	r5, r3, #24
 8005126:	d514      	bpl.n	8005152 <_printf_i+0x1ae>
 8005128:	07df      	lsls	r7, r3, #31
 800512a:	bf44      	itt	mi
 800512c:	f043 0320 	orrmi.w	r3, r3, #32
 8005130:	6023      	strmi	r3, [r4, #0]
 8005132:	b91e      	cbnz	r6, 800513c <_printf_i+0x198>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	f023 0320 	bic.w	r3, r3, #32
 800513a:	6023      	str	r3, [r4, #0]
 800513c:	2310      	movs	r3, #16
 800513e:	e7af      	b.n	80050a0 <_printf_i+0xfc>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	f043 0320 	orr.w	r3, r3, #32
 8005146:	6023      	str	r3, [r4, #0]
 8005148:	2378      	movs	r3, #120	; 0x78
 800514a:	4828      	ldr	r0, [pc, #160]	; (80051ec <_printf_i+0x248>)
 800514c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005150:	e7e3      	b.n	800511a <_printf_i+0x176>
 8005152:	0659      	lsls	r1, r3, #25
 8005154:	bf48      	it	mi
 8005156:	b2b6      	uxthmi	r6, r6
 8005158:	e7e6      	b.n	8005128 <_printf_i+0x184>
 800515a:	4615      	mov	r5, r2
 800515c:	e7bb      	b.n	80050d6 <_printf_i+0x132>
 800515e:	682b      	ldr	r3, [r5, #0]
 8005160:	6826      	ldr	r6, [r4, #0]
 8005162:	1d18      	adds	r0, r3, #4
 8005164:	6961      	ldr	r1, [r4, #20]
 8005166:	6028      	str	r0, [r5, #0]
 8005168:	0635      	lsls	r5, r6, #24
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	d501      	bpl.n	8005172 <_printf_i+0x1ce>
 800516e:	6019      	str	r1, [r3, #0]
 8005170:	e002      	b.n	8005178 <_printf_i+0x1d4>
 8005172:	0670      	lsls	r0, r6, #25
 8005174:	d5fb      	bpl.n	800516e <_printf_i+0x1ca>
 8005176:	8019      	strh	r1, [r3, #0]
 8005178:	2300      	movs	r3, #0
 800517a:	4615      	mov	r5, r2
 800517c:	6123      	str	r3, [r4, #16]
 800517e:	e7ba      	b.n	80050f6 <_printf_i+0x152>
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	2100      	movs	r1, #0
 8005184:	1d1a      	adds	r2, r3, #4
 8005186:	602a      	str	r2, [r5, #0]
 8005188:	681d      	ldr	r5, [r3, #0]
 800518a:	6862      	ldr	r2, [r4, #4]
 800518c:	4628      	mov	r0, r5
 800518e:	f000 f82f 	bl	80051f0 <memchr>
 8005192:	b108      	cbz	r0, 8005198 <_printf_i+0x1f4>
 8005194:	1b40      	subs	r0, r0, r5
 8005196:	6060      	str	r0, [r4, #4]
 8005198:	6863      	ldr	r3, [r4, #4]
 800519a:	6123      	str	r3, [r4, #16]
 800519c:	2300      	movs	r3, #0
 800519e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a2:	e7a8      	b.n	80050f6 <_printf_i+0x152>
 80051a4:	462a      	mov	r2, r5
 80051a6:	4649      	mov	r1, r9
 80051a8:	4640      	mov	r0, r8
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	47d0      	blx	sl
 80051ae:	3001      	adds	r0, #1
 80051b0:	d0ab      	beq.n	800510a <_printf_i+0x166>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	079b      	lsls	r3, r3, #30
 80051b6:	d413      	bmi.n	80051e0 <_printf_i+0x23c>
 80051b8:	68e0      	ldr	r0, [r4, #12]
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	4298      	cmp	r0, r3
 80051be:	bfb8      	it	lt
 80051c0:	4618      	movlt	r0, r3
 80051c2:	e7a4      	b.n	800510e <_printf_i+0x16a>
 80051c4:	2301      	movs	r3, #1
 80051c6:	4632      	mov	r2, r6
 80051c8:	4649      	mov	r1, r9
 80051ca:	4640      	mov	r0, r8
 80051cc:	47d0      	blx	sl
 80051ce:	3001      	adds	r0, #1
 80051d0:	d09b      	beq.n	800510a <_printf_i+0x166>
 80051d2:	3501      	adds	r5, #1
 80051d4:	68e3      	ldr	r3, [r4, #12]
 80051d6:	9903      	ldr	r1, [sp, #12]
 80051d8:	1a5b      	subs	r3, r3, r1
 80051da:	42ab      	cmp	r3, r5
 80051dc:	dcf2      	bgt.n	80051c4 <_printf_i+0x220>
 80051de:	e7eb      	b.n	80051b8 <_printf_i+0x214>
 80051e0:	2500      	movs	r5, #0
 80051e2:	f104 0619 	add.w	r6, r4, #25
 80051e6:	e7f5      	b.n	80051d4 <_printf_i+0x230>
 80051e8:	08005543 	.word	0x08005543
 80051ec:	08005554 	.word	0x08005554

080051f0 <memchr>:
 80051f0:	4603      	mov	r3, r0
 80051f2:	b510      	push	{r4, lr}
 80051f4:	b2c9      	uxtb	r1, r1
 80051f6:	4402      	add	r2, r0
 80051f8:	4293      	cmp	r3, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	d101      	bne.n	8005202 <memchr+0x12>
 80051fe:	2000      	movs	r0, #0
 8005200:	e003      	b.n	800520a <memchr+0x1a>
 8005202:	7804      	ldrb	r4, [r0, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	428c      	cmp	r4, r1
 8005208:	d1f6      	bne.n	80051f8 <memchr+0x8>
 800520a:	bd10      	pop	{r4, pc}

0800520c <memcpy>:
 800520c:	440a      	add	r2, r1
 800520e:	4291      	cmp	r1, r2
 8005210:	f100 33ff 	add.w	r3, r0, #4294967295
 8005214:	d100      	bne.n	8005218 <memcpy+0xc>
 8005216:	4770      	bx	lr
 8005218:	b510      	push	{r4, lr}
 800521a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521e:	4291      	cmp	r1, r2
 8005220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005224:	d1f9      	bne.n	800521a <memcpy+0xe>
 8005226:	bd10      	pop	{r4, pc}

08005228 <memmove>:
 8005228:	4288      	cmp	r0, r1
 800522a:	b510      	push	{r4, lr}
 800522c:	eb01 0402 	add.w	r4, r1, r2
 8005230:	d902      	bls.n	8005238 <memmove+0x10>
 8005232:	4284      	cmp	r4, r0
 8005234:	4623      	mov	r3, r4
 8005236:	d807      	bhi.n	8005248 <memmove+0x20>
 8005238:	1e43      	subs	r3, r0, #1
 800523a:	42a1      	cmp	r1, r4
 800523c:	d008      	beq.n	8005250 <memmove+0x28>
 800523e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005246:	e7f8      	b.n	800523a <memmove+0x12>
 8005248:	4601      	mov	r1, r0
 800524a:	4402      	add	r2, r0
 800524c:	428a      	cmp	r2, r1
 800524e:	d100      	bne.n	8005252 <memmove+0x2a>
 8005250:	bd10      	pop	{r4, pc}
 8005252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800525a:	e7f7      	b.n	800524c <memmove+0x24>

0800525c <_free_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4605      	mov	r5, r0
 8005260:	2900      	cmp	r1, #0
 8005262:	d040      	beq.n	80052e6 <_free_r+0x8a>
 8005264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005268:	1f0c      	subs	r4, r1, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	bfb8      	it	lt
 800526e:	18e4      	addlt	r4, r4, r3
 8005270:	f000 f910 	bl	8005494 <__malloc_lock>
 8005274:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <_free_r+0x8c>)
 8005276:	6813      	ldr	r3, [r2, #0]
 8005278:	b933      	cbnz	r3, 8005288 <_free_r+0x2c>
 800527a:	6063      	str	r3, [r4, #4]
 800527c:	6014      	str	r4, [r2, #0]
 800527e:	4628      	mov	r0, r5
 8005280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005284:	f000 b90c 	b.w	80054a0 <__malloc_unlock>
 8005288:	42a3      	cmp	r3, r4
 800528a:	d908      	bls.n	800529e <_free_r+0x42>
 800528c:	6820      	ldr	r0, [r4, #0]
 800528e:	1821      	adds	r1, r4, r0
 8005290:	428b      	cmp	r3, r1
 8005292:	bf01      	itttt	eq
 8005294:	6819      	ldreq	r1, [r3, #0]
 8005296:	685b      	ldreq	r3, [r3, #4]
 8005298:	1809      	addeq	r1, r1, r0
 800529a:	6021      	streq	r1, [r4, #0]
 800529c:	e7ed      	b.n	800527a <_free_r+0x1e>
 800529e:	461a      	mov	r2, r3
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	b10b      	cbz	r3, 80052a8 <_free_r+0x4c>
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	d9fa      	bls.n	800529e <_free_r+0x42>
 80052a8:	6811      	ldr	r1, [r2, #0]
 80052aa:	1850      	adds	r0, r2, r1
 80052ac:	42a0      	cmp	r0, r4
 80052ae:	d10b      	bne.n	80052c8 <_free_r+0x6c>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	4401      	add	r1, r0
 80052b4:	1850      	adds	r0, r2, r1
 80052b6:	4283      	cmp	r3, r0
 80052b8:	6011      	str	r1, [r2, #0]
 80052ba:	d1e0      	bne.n	800527e <_free_r+0x22>
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4401      	add	r1, r0
 80052c2:	6011      	str	r1, [r2, #0]
 80052c4:	6053      	str	r3, [r2, #4]
 80052c6:	e7da      	b.n	800527e <_free_r+0x22>
 80052c8:	d902      	bls.n	80052d0 <_free_r+0x74>
 80052ca:	230c      	movs	r3, #12
 80052cc:	602b      	str	r3, [r5, #0]
 80052ce:	e7d6      	b.n	800527e <_free_r+0x22>
 80052d0:	6820      	ldr	r0, [r4, #0]
 80052d2:	1821      	adds	r1, r4, r0
 80052d4:	428b      	cmp	r3, r1
 80052d6:	bf01      	itttt	eq
 80052d8:	6819      	ldreq	r1, [r3, #0]
 80052da:	685b      	ldreq	r3, [r3, #4]
 80052dc:	1809      	addeq	r1, r1, r0
 80052de:	6021      	streq	r1, [r4, #0]
 80052e0:	6063      	str	r3, [r4, #4]
 80052e2:	6054      	str	r4, [r2, #4]
 80052e4:	e7cb      	b.n	800527e <_free_r+0x22>
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	200001bc 	.word	0x200001bc

080052ec <sbrk_aligned>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4e0e      	ldr	r6, [pc, #56]	; (8005328 <sbrk_aligned+0x3c>)
 80052f0:	460c      	mov	r4, r1
 80052f2:	6831      	ldr	r1, [r6, #0]
 80052f4:	4605      	mov	r5, r0
 80052f6:	b911      	cbnz	r1, 80052fe <sbrk_aligned+0x12>
 80052f8:	f000 f8bc 	bl	8005474 <_sbrk_r>
 80052fc:	6030      	str	r0, [r6, #0]
 80052fe:	4621      	mov	r1, r4
 8005300:	4628      	mov	r0, r5
 8005302:	f000 f8b7 	bl	8005474 <_sbrk_r>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	d00a      	beq.n	8005320 <sbrk_aligned+0x34>
 800530a:	1cc4      	adds	r4, r0, #3
 800530c:	f024 0403 	bic.w	r4, r4, #3
 8005310:	42a0      	cmp	r0, r4
 8005312:	d007      	beq.n	8005324 <sbrk_aligned+0x38>
 8005314:	1a21      	subs	r1, r4, r0
 8005316:	4628      	mov	r0, r5
 8005318:	f000 f8ac 	bl	8005474 <_sbrk_r>
 800531c:	3001      	adds	r0, #1
 800531e:	d101      	bne.n	8005324 <sbrk_aligned+0x38>
 8005320:	f04f 34ff 	mov.w	r4, #4294967295
 8005324:	4620      	mov	r0, r4
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	200001c0 	.word	0x200001c0

0800532c <_malloc_r>:
 800532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005330:	1ccd      	adds	r5, r1, #3
 8005332:	f025 0503 	bic.w	r5, r5, #3
 8005336:	3508      	adds	r5, #8
 8005338:	2d0c      	cmp	r5, #12
 800533a:	bf38      	it	cc
 800533c:	250c      	movcc	r5, #12
 800533e:	2d00      	cmp	r5, #0
 8005340:	4607      	mov	r7, r0
 8005342:	db01      	blt.n	8005348 <_malloc_r+0x1c>
 8005344:	42a9      	cmp	r1, r5
 8005346:	d905      	bls.n	8005354 <_malloc_r+0x28>
 8005348:	230c      	movs	r3, #12
 800534a:	2600      	movs	r6, #0
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4630      	mov	r0, r6
 8005350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005354:	4e2e      	ldr	r6, [pc, #184]	; (8005410 <_malloc_r+0xe4>)
 8005356:	f000 f89d 	bl	8005494 <__malloc_lock>
 800535a:	6833      	ldr	r3, [r6, #0]
 800535c:	461c      	mov	r4, r3
 800535e:	bb34      	cbnz	r4, 80053ae <_malloc_r+0x82>
 8005360:	4629      	mov	r1, r5
 8005362:	4638      	mov	r0, r7
 8005364:	f7ff ffc2 	bl	80052ec <sbrk_aligned>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	4604      	mov	r4, r0
 800536c:	d14d      	bne.n	800540a <_malloc_r+0xde>
 800536e:	6834      	ldr	r4, [r6, #0]
 8005370:	4626      	mov	r6, r4
 8005372:	2e00      	cmp	r6, #0
 8005374:	d140      	bne.n	80053f8 <_malloc_r+0xcc>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	4631      	mov	r1, r6
 800537a:	4638      	mov	r0, r7
 800537c:	eb04 0803 	add.w	r8, r4, r3
 8005380:	f000 f878 	bl	8005474 <_sbrk_r>
 8005384:	4580      	cmp	r8, r0
 8005386:	d13a      	bne.n	80053fe <_malloc_r+0xd2>
 8005388:	6821      	ldr	r1, [r4, #0]
 800538a:	3503      	adds	r5, #3
 800538c:	1a6d      	subs	r5, r5, r1
 800538e:	f025 0503 	bic.w	r5, r5, #3
 8005392:	3508      	adds	r5, #8
 8005394:	2d0c      	cmp	r5, #12
 8005396:	bf38      	it	cc
 8005398:	250c      	movcc	r5, #12
 800539a:	4638      	mov	r0, r7
 800539c:	4629      	mov	r1, r5
 800539e:	f7ff ffa5 	bl	80052ec <sbrk_aligned>
 80053a2:	3001      	adds	r0, #1
 80053a4:	d02b      	beq.n	80053fe <_malloc_r+0xd2>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	442b      	add	r3, r5
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	e00e      	b.n	80053cc <_malloc_r+0xa0>
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	1b52      	subs	r2, r2, r5
 80053b2:	d41e      	bmi.n	80053f2 <_malloc_r+0xc6>
 80053b4:	2a0b      	cmp	r2, #11
 80053b6:	d916      	bls.n	80053e6 <_malloc_r+0xba>
 80053b8:	1961      	adds	r1, r4, r5
 80053ba:	42a3      	cmp	r3, r4
 80053bc:	6025      	str	r5, [r4, #0]
 80053be:	bf18      	it	ne
 80053c0:	6059      	strne	r1, [r3, #4]
 80053c2:	6863      	ldr	r3, [r4, #4]
 80053c4:	bf08      	it	eq
 80053c6:	6031      	streq	r1, [r6, #0]
 80053c8:	5162      	str	r2, [r4, r5]
 80053ca:	604b      	str	r3, [r1, #4]
 80053cc:	4638      	mov	r0, r7
 80053ce:	f104 060b 	add.w	r6, r4, #11
 80053d2:	f000 f865 	bl	80054a0 <__malloc_unlock>
 80053d6:	f026 0607 	bic.w	r6, r6, #7
 80053da:	1d23      	adds	r3, r4, #4
 80053dc:	1af2      	subs	r2, r6, r3
 80053de:	d0b6      	beq.n	800534e <_malloc_r+0x22>
 80053e0:	1b9b      	subs	r3, r3, r6
 80053e2:	50a3      	str	r3, [r4, r2]
 80053e4:	e7b3      	b.n	800534e <_malloc_r+0x22>
 80053e6:	6862      	ldr	r2, [r4, #4]
 80053e8:	42a3      	cmp	r3, r4
 80053ea:	bf0c      	ite	eq
 80053ec:	6032      	streq	r2, [r6, #0]
 80053ee:	605a      	strne	r2, [r3, #4]
 80053f0:	e7ec      	b.n	80053cc <_malloc_r+0xa0>
 80053f2:	4623      	mov	r3, r4
 80053f4:	6864      	ldr	r4, [r4, #4]
 80053f6:	e7b2      	b.n	800535e <_malloc_r+0x32>
 80053f8:	4634      	mov	r4, r6
 80053fa:	6876      	ldr	r6, [r6, #4]
 80053fc:	e7b9      	b.n	8005372 <_malloc_r+0x46>
 80053fe:	230c      	movs	r3, #12
 8005400:	4638      	mov	r0, r7
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	f000 f84c 	bl	80054a0 <__malloc_unlock>
 8005408:	e7a1      	b.n	800534e <_malloc_r+0x22>
 800540a:	6025      	str	r5, [r4, #0]
 800540c:	e7de      	b.n	80053cc <_malloc_r+0xa0>
 800540e:	bf00      	nop
 8005410:	200001bc 	.word	0x200001bc

08005414 <_realloc_r>:
 8005414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005418:	4680      	mov	r8, r0
 800541a:	4614      	mov	r4, r2
 800541c:	460e      	mov	r6, r1
 800541e:	b921      	cbnz	r1, 800542a <_realloc_r+0x16>
 8005420:	4611      	mov	r1, r2
 8005422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005426:	f7ff bf81 	b.w	800532c <_malloc_r>
 800542a:	b92a      	cbnz	r2, 8005438 <_realloc_r+0x24>
 800542c:	f7ff ff16 	bl	800525c <_free_r>
 8005430:	4625      	mov	r5, r4
 8005432:	4628      	mov	r0, r5
 8005434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005438:	f000 f838 	bl	80054ac <_malloc_usable_size_r>
 800543c:	4284      	cmp	r4, r0
 800543e:	4607      	mov	r7, r0
 8005440:	d802      	bhi.n	8005448 <_realloc_r+0x34>
 8005442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005446:	d812      	bhi.n	800546e <_realloc_r+0x5a>
 8005448:	4621      	mov	r1, r4
 800544a:	4640      	mov	r0, r8
 800544c:	f7ff ff6e 	bl	800532c <_malloc_r>
 8005450:	4605      	mov	r5, r0
 8005452:	2800      	cmp	r0, #0
 8005454:	d0ed      	beq.n	8005432 <_realloc_r+0x1e>
 8005456:	42bc      	cmp	r4, r7
 8005458:	4622      	mov	r2, r4
 800545a:	4631      	mov	r1, r6
 800545c:	bf28      	it	cs
 800545e:	463a      	movcs	r2, r7
 8005460:	f7ff fed4 	bl	800520c <memcpy>
 8005464:	4631      	mov	r1, r6
 8005466:	4640      	mov	r0, r8
 8005468:	f7ff fef8 	bl	800525c <_free_r>
 800546c:	e7e1      	b.n	8005432 <_realloc_r+0x1e>
 800546e:	4635      	mov	r5, r6
 8005470:	e7df      	b.n	8005432 <_realloc_r+0x1e>
	...

08005474 <_sbrk_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	2300      	movs	r3, #0
 8005478:	4d05      	ldr	r5, [pc, #20]	; (8005490 <_sbrk_r+0x1c>)
 800547a:	4604      	mov	r4, r0
 800547c:	4608      	mov	r0, r1
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	f7fc f808 	bl	8001494 <_sbrk>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_sbrk_r+0x1a>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_sbrk_r+0x1a>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	200001c4 	.word	0x200001c4

08005494 <__malloc_lock>:
 8005494:	4801      	ldr	r0, [pc, #4]	; (800549c <__malloc_lock+0x8>)
 8005496:	f000 b811 	b.w	80054bc <__retarget_lock_acquire_recursive>
 800549a:	bf00      	nop
 800549c:	200001c8 	.word	0x200001c8

080054a0 <__malloc_unlock>:
 80054a0:	4801      	ldr	r0, [pc, #4]	; (80054a8 <__malloc_unlock+0x8>)
 80054a2:	f000 b80c 	b.w	80054be <__retarget_lock_release_recursive>
 80054a6:	bf00      	nop
 80054a8:	200001c8 	.word	0x200001c8

080054ac <_malloc_usable_size_r>:
 80054ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b0:	1f18      	subs	r0, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bfbc      	itt	lt
 80054b6:	580b      	ldrlt	r3, [r1, r0]
 80054b8:	18c0      	addlt	r0, r0, r3
 80054ba:	4770      	bx	lr

080054bc <__retarget_lock_acquire_recursive>:
 80054bc:	4770      	bx	lr

080054be <__retarget_lock_release_recursive>:
 80054be:	4770      	bx	lr

080054c0 <_init>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	bf00      	nop
 80054c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c6:	bc08      	pop	{r3}
 80054c8:	469e      	mov	lr, r3
 80054ca:	4770      	bx	lr

080054cc <_fini>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	bf00      	nop
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr
